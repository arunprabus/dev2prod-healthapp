# ðŸŽ“ Learning Kubernetes Deployment - Step by Step

# Step 1: Create Namespace (Logical Separation)
apiVersion: v1
kind: Namespace
metadata:
  name: learning-k8s
  labels:
    purpose: learning
    environment: dev
---
# Step 2: ConfigMap (Non-sensitive Configuration)
apiVersion: v1
kind: ConfigMap
metadata:
  name: app-config
  namespace: learning-k8s
data:
  APP_ENV: "development"
  LOG_LEVEL: "debug"
  PORT: "8080"
---
# Step 3: Secret (Sensitive Data)
apiVersion: v1
kind: Secret
metadata:
  name: app-secrets
  namespace: learning-k8s
type: Opaque
data:
  # Base64 encoded values
  API_KEY: bXlfc2VjcmV0X2FwaV9rZXk=  # my_secret_api_key
  DB_PASSWORD: cGFzc3dvcmQxMjM=        # password123
---
# Step 4: Deployment (Manages Pods)
apiVersion: apps/v1
kind: Deployment
metadata:
  name: learning-app
  namespace: learning-k8s
  labels:
    app: learning-app
    version: v1
spec:
  # How many pod replicas we want
  replicas: 2
  
  # Which pods this deployment manages
  selector:
    matchLabels:
      app: learning-app
  
  # Pod template
  template:
    metadata:
      labels:
        app: learning-app
        version: v1
    spec:
      containers:
      - name: app-container
        image: nginx:latest  # Simple web server for learning
        ports:
        - containerPort: 80
        
        # Environment variables from ConfigMap
        env:
        - name: APP_ENV
          valueFrom:
            configMapKeyRef:
              name: app-config
              key: APP_ENV
        - name: LOG_LEVEL
          valueFrom:
            configMapKeyRef:
              name: app-config
              key: LOG_LEVEL
        
        # Environment variables from Secret
        - name: API_KEY
          valueFrom:
            secretKeyRef:
              name: app-secrets
              key: API_KEY
        
        # Resource limits (important for learning)
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "100m"
        
        # Health checks
        livenessProbe:
          httpGet:
            path: /
            port: 80
          initialDelaySeconds: 10
          periodSeconds: 10
        
        readinessProbe:
          httpGet:
            path: /
            port: 80
          initialDelaySeconds: 5
          periodSeconds: 5
---
# Step 5: Service (Networking)
apiVersion: v1
kind: Service
metadata:
  name: learning-service
  namespace: learning-k8s
spec:
  selector:
    app: learning-app
  ports:
  - name: http
    port: 80
    targetPort: 80
  type: ClusterIP  # Internal cluster access only
---
# Step 6: HorizontalPodAutoscaler (Auto-scaling)
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: learning-hpa
  namespace: learning-k8s
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: learning-app
  minReplicas: 1
  maxReplicas: 4
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70