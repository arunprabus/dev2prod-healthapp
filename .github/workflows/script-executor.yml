name: Script Executor

on:
  workflow_dispatch:
    inputs:
      script_name:
        description: 'Script to execute'
        required: true
        type: choice
        options:
          # Kubernetes Management
          - 'k8s-cluster-health-check.sh'
          - 'k8s-health-check.sh'
          - 'k8s-auto-scale.sh'
          - 'k3s-health-check.sh'
          - 'k3s-connect.sh'
          
          # Kubeconfig Management
          - 'kubeconfig-fix-and-test.sh'
          - 'fix-kubeconfig.sh'
          - 'setup-kubeconfig.sh'
          - 'refresh-kubeconfig.sh'
          - 'quick-fix-kubeconfig.sh'
          
          # AWS Management
          - 'aws-resource-audit.sh'
          - 'aws-resource-cleanup.sh'
          - 'cost-breakdown.sh'
          - 'cost-cleanup-auto.sh'
          - 'aws-budget-setup.sh'
          
          # GitHub Runner Management
          - 'runner-health-check.sh'
          - 'runner-setup.sh'
          - 'cleanup-duplicates.sh'
          
          # System Management
          - 'check-instance-status.sh'
          - 'fix-security-groups.sh'
          - 'fix-ssh-service.sh'
          - 'restart-k3s.sh'
          - 'install-ssm-agent.sh'
          
          # Secrets Management
          - 'update-github-secrets.sh'
          - 'update-k8s-secret.sh'
          
          # Diagnostics
          - 'diagnose-deployment.sh'
          - 'diagnose-runner.sh'
          - 'platform-readiness-check.sh'
          
          # Emergency Operations
          - 'emergency-cleanup.sh'
          - 'verify-cleanup.sh'
          
          # Validation
          - 'validate-resource-tags.sh'
          - 'setup-governance.sh'
          - 'verify-ssh-keys.sh'
          - 'test-aws-integrations.sh'
          - 'test-github-connectivity.sh'
          
      environment:
        description: 'Target environment'
        required: true
        type: choice
        options:
          - 'dev'
          - 'test'
          - 'prod'
          - 'monitoring'
          - 'lower'
          - 'higher'
          - 'all'
      
      cluster_ip:
        description: 'Cluster IP (optional - will auto-detect)'
        required: false
        type: string
      
      action:
        description: 'Script action/parameter'
        required: false
        type: choice
        options:
          # Connection Methods
          - 'ssh'
          - 'session-manager'
          - 'kubectl'
          
          # Operations
          - 'setup'
          - 'cleanup'
          - 'monitor'
          - 'validate'
          - 'health-check'
          - 'deploy'
          - 'destroy'
          - 'plan'
          - 'redeploy'
          - 'backup'
          - 'restore'
          - 'scale'
          
          # Kubeconfig Operations
          - '--fix-kubeconfig'
          - 'download'
          - 'test-connection'
          - 'get-nodes'
          - 'get-pods'
          
          # Secret Operations
          - 'list'
          - 'update'
          - 'update-file'
          - 'update-kubeconfig'
          - 'update-ssh-key'
          - 'update-aws-creds'
          
          # Diagnostic Operations
          - 'full'
          - 'runner-only'
          - 'database-only'
          - 'kubernetes-only'
      
      additional_params:
        description: 'Additional parameters (optional)'
        required: false
        type: string

jobs:
  execute-script:
    runs-on: ${{ github.event.inputs.environment == 'lower' && fromJSON('[\"self-hosted\", \"github-runner-lower\"]') || github.event.inputs.environment == 'higher' && fromJSON('[\"self-hosted\", \"github-runner-higher\"]') || github.event.inputs.environment == 'monitoring' && fromJSON('[\"self-hosted\", \"github-runner-monitoring\"]') || 'ubuntu-latest' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-south-1

      - name: Setup SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/k3s-key
          chmod 600 ~/.ssh/k3s-key

      - name: Setup kubeconfig secrets
        run: |
          if [ -n "${{ secrets.KUBECONFIG_DEV }}" ]; then
            echo "${{ secrets.KUBECONFIG_DEV }}" | base64 -d > /tmp/kubeconfig-dev
            export KUBECONFIG_DEV="${{ secrets.KUBECONFIG_DEV }}"
          fi
          if [ -n "${{ secrets.KUBECONFIG_TEST }}" ]; then
            echo "${{ secrets.KUBECONFIG_TEST }}" | base64 -d > /tmp/kubeconfig-test
            export KUBECONFIG_TEST="${{ secrets.KUBECONFIG_TEST }}"
          fi
          if [ -n "${{ secrets.KUBECONFIG_PROD }}" ]; then
            echo "${{ secrets.KUBECONFIG_PROD }}" | base64 -d > /tmp/kubeconfig-prod
            export KUBECONFIG_PROD="${{ secrets.KUBECONFIG_PROD }}"
          fi
          if [ -n "${{ secrets.KUBECONFIG_MONITORING }}" ]; then
            echo "${{ secrets.KUBECONFIG_MONITORING }}" | base64 -d > /tmp/kubeconfig-monitoring
            export KUBECONFIG_MONITORING="${{ secrets.KUBECONFIG_MONITORING }}"
          fi
          
          # Set appropriate kubeconfig based on environment
          if [ "${{ inputs.environment }}" = "dev" ]; then
            cp /tmp/kubeconfig-dev /tmp/kubeconfig
            echo "KUBECONFIG=/tmp/kubeconfig" >> $GITHUB_ENV
          elif [ "${{ inputs.environment }}" = "test" ]; then
            cp /tmp/kubeconfig-test /tmp/kubeconfig
            echo "KUBECONFIG=/tmp/kubeconfig" >> $GITHUB_ENV
          elif [ "${{ inputs.environment }}" = "prod" ]; then
            cp /tmp/kubeconfig-prod /tmp/kubeconfig
            echo "KUBECONFIG=/tmp/kubeconfig" >> $GITHUB_ENV
          elif [ "${{ inputs.environment }}" = "monitoring" ]; then
            cp /tmp/kubeconfig-monitoring /tmp/kubeconfig
            echo "KUBECONFIG=/tmp/kubeconfig" >> $GITHUB_ENV
          fi

      - name: Get cluster IP
        id: cluster-ip
        run: |
          if [[ -n "${{ github.event.inputs.cluster_ip }}" ]]; then
            CLUSTER_IP="${{ github.event.inputs.cluster_ip }}"
            echo "Using provided IP: $CLUSTER_IP"
          else
            # Auto-detect from AWS EC2 instances
            ENV="${{ github.event.inputs.environment }}"
            echo "Auto-detecting IP for $ENV environment..."
            
            CLUSTER_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=*k3s*" \
                       "Name=instance-state-name,Values=running" \
              --query 'Reservations[0].Instances[0].PublicIpAddress' \
              --output text 2>/dev/null || echo "")
            
            if [[ "$CLUSTER_IP" == "None" || -z "$CLUSTER_IP" ]]; then
              CLUSTER_IP=$(aws ec2 describe-instances \
                --filters "Name=tag:Name,Values=health-app-*" \
                         "Name=instance-state-name,Values=running" \
                --query 'Reservations[0].Instances[0].PublicIpAddress' \
                --output text 2>/dev/null || echo "")
            fi
            
            if [[ "$CLUSTER_IP" == "None" || -z "$CLUSTER_IP" ]]; then
              echo "‚ùå Could not auto-detect cluster IP"
              exit 1
            fi
          fi
          
          echo "cluster_ip=$CLUSTER_IP" >> $GITHUB_OUTPUT
          echo "üéØ Using cluster IP: $CLUSTER_IP"

      - name: Install kubectl and tools
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/
          
          # Install tools
          sudo apt-get update
          sudo apt-get install -y python3-pip jq netcat-openbsd
          pip3 install PyNaCl

      - name: Execute Script
        run: |
          chmod +x scripts/${{ inputs.script_name }}
          
          # Build command based on script type
          case "${{ inputs.script_name }}" in
            # Kubernetes Management
            "k8s-cluster-health-check.sh")
              CMD="./scripts/k8s-cluster-health-check.sh ${{ inputs.environment }} ${{ steps.cluster-ip.outputs.cluster_ip }}"
              if [ "${{ inputs.action }}" == "--fix-kubeconfig" ]; then
                CMD="$CMD --fix-kubeconfig"
              fi
              ;;
            "kubeconfig-fix-and-test.sh")
              CMD="./scripts/kubeconfig-fix-and-test.sh ${{ inputs.environment }} ${{ steps.cluster-ip.outputs.cluster_ip }}"
              ;;
            "fix-kubeconfig.sh")
              CMD="./scripts/fix-kubeconfig.sh ${{ steps.cluster-ip.outputs.cluster_ip }}"
              ;;
              
            # Kubeconfig Access
            "kubeconfig-access")
              case "${{ inputs.action }}" in
                "download")
                  echo "üìÅ Kubeconfig for ${{ inputs.environment }}:"
                  echo "--- KUBECONFIG START ---"
                  cat /tmp/kubeconfig
                  echo "--- KUBECONFIG END ---"
                  exit 0
                  ;;
                "test-connection")
                  echo "üß™ Testing connection to ${{ inputs.environment }}..."
                  kubectl cluster-info --insecure-skip-tls-verify
                  exit 0
                  ;;
                "get-nodes")
                  echo "üñ•Ô∏è Nodes in ${{ inputs.environment }}:"
                  kubectl get nodes -o wide --insecure-skip-tls-verify
                  exit 0
                  ;;
                "get-pods")
                  echo "üê≥ Pods in ${{ inputs.environment }}:"
                  kubectl get pods -A --insecure-skip-tls-verify
                  exit 0
                  ;;
              esac
              ;;
              
            # Platform Readiness Check
            "platform-readiness-check.sh")
              CMD="./scripts/platform-readiness-check.sh ${{ inputs.environment }} ${{ inputs.action || 'full' }}"
              ;;
              
            # Default command building for other scripts
            *)
              CMD="./scripts/${{ inputs.script_name }}"
              
              if [ -n "${{ inputs.environment }}" ] && [ "${{ inputs.environment }}" != "all" ]; then
                CMD="$CMD ${{ inputs.environment }}"
              fi
              
              if [ -n "${{ inputs.action }}" ]; then
                CMD="$CMD ${{ inputs.action }}"
              fi
              
              if [ -n "${{ inputs.additional_params }}" ]; then
                CMD="$CMD ${{ inputs.additional_params }}"
              fi
              ;;
          esac
          
          echo "üöÄ Executing: $CMD"
          eval $CMD
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          KUBECONFIG_DEV: ${{ secrets.KUBECONFIG_DEV }}
          KUBECONFIG_TEST: ${{ secrets.KUBECONFIG_TEST }}
          KUBECONFIG_PROD: ${{ secrets.KUBECONFIG_PROD }}
          KUBECONFIG_MONITORING: ${{ secrets.KUBECONFIG_MONITORING }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO_NAME: ${{ github.repository }}
          
      - name: Cleanup
        if: always()
        run: |
          rm -f /tmp/kubeconfig-dev /tmp/kubeconfig-test /tmp/kubeconfig-prod /tmp/kubeconfig-monitoring /tmp/kubeconfig
          rm -f ~/.ssh/k3s-key
          echo "üßπ Cleanup completed"