name: Core Infrastructure

on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Action'
        required: true
        type: choice
        options:
          - deploy
          - destroy
          - plan
      network:
        description: 'Network Tier'
        required: true
        default: 'lower'
        type: choice
        options:
          - lower
          - higher
          - monitoring
      confirm_destroy:
        description: 'Type "DESTROY" to confirm'
        required: false
        type: string

env:
  AWS_REGION: ap-south-1
  TERRAFORM_VERSION: 1.6.0

jobs:
  # Step 1: Deploy GitHub Runner (only for deploy action)
  deploy-runner:
    if: github.event.inputs.action == 'deploy'
    runs-on: ubuntu-latest
    outputs:
      runner_ready: ${{ steps.verify-runner.outputs.ready }}
    steps:
      - uses: actions/checkout@v4
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}
          terraform_wrapper: false
      
      - name: Deploy Runner Infrastructure
        working-directory: infra
        run: |
          terraform init -reconfigure \
            -backend-config="bucket=${{ secrets.TF_STATE_BUCKET }}" \
            -backend-config="key=health-app-runner.tfstate" \
            -backend-config="region=$AWS_REGION"
          
          # Clean up existing key pair if it exists
          echo "🧹 Cleaning up existing key pairs..."
          aws ec2 delete-key-pair --key-name health-app-monitoring-key 2>/dev/null || echo "Key pair doesn't exist"
          sleep 10
          
          terraform apply \
            -var-file="environments/runner.tfvars" \
            -var="ssh_public_key=${{ secrets.SSH_PUBLIC_KEY }}" \
            -var="github_pat=${{ secrets.REPO_PAT }}" \
            -var="aws_region=${{ env.AWS_REGION }}" \
            -auto-approve
      
      - name: Verify Runner Ready
        id: verify-runner
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        run: |
          echo "⏳ Waiting for runner to be ready..."
          sleep 60
          
          # Setup SSH key for testing
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          
          # Get runner IP
          RUNNER_IP=$(terraform output -raw github_runner_public_ip)
          echo "Runner IP: $RUNNER_IP"
          
          # Wait for SSH to be ready
          for i in {1..20}; do
            if timeout 10 ssh -o StrictHostKeyChecking=no -o ConnectTimeout=5 ubuntu@$RUNNER_IP "echo 'Runner SSH ready'" 2>/dev/null; then
              echo "✅ Runner SSH is ready"
              rm -f ~/.ssh/id_rsa
              break
            fi
            echo "⏳ Waiting for runner SSH... ($i/20)"
            sleep 15
          done
          
          rm -f ~/.ssh/id_rsa
          echo "ready=true" >> $GITHUB_OUTPUT

  # Step 2: Deploy Infrastructure Resources
  deploy-infrastructure:
    if: github.event.inputs.action == 'deploy'
    needs: deploy-runner
    runs-on: ubuntu-latest
    outputs:
      cluster_ip: ${{ steps.deploy.outputs.cluster_ip }}
      dev_cluster_ip: ${{ steps.deploy.outputs.dev_cluster_ip }}
      test_cluster_ip: ${{ steps.deploy.outputs.test_cluster_ip }}
    steps:
      - uses: actions/checkout@v4
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}
          terraform_wrapper: false
      
      - name: Deploy Infrastructure
        id: deploy
        working-directory: infra
        run: |
          terraform init -reconfigure \
            -backend-config="bucket=${{ secrets.TF_STATE_BUCKET }}" \
            -backend-config="key=health-app-${{ github.event.inputs.network }}.tfstate" \
            -backend-config="region=$AWS_REGION"
          
          # Clean up existing key pairs and terraform state
          echo "🧹 Cleaning up existing resources..."
          if [ "${{ github.event.inputs.network }}" == "lower" ]; then
            aws ec2 delete-key-pair --key-name health-app-lower-dev-k3s-key 2>/dev/null || echo "Dev key doesn't exist"
            aws ec2 delete-key-pair --key-name health-app-lower-test-k3s-key 2>/dev/null || echo "Test key doesn't exist"
            terraform state rm 'module.k3s_clusters["dev"].aws_key_pair.main' 2>/dev/null || echo "Dev key not in state"
            terraform state rm 'module.k3s_clusters["test"].aws_key_pair.main' 2>/dev/null || echo "Test key not in state"
          else
            aws ec2 delete-key-pair --key-name health-app-${{ github.event.inputs.network }}-k3s-key 2>/dev/null || echo "Key doesn't exist"
            terraform state rm 'module.k3s[0].aws_key_pair.main' 2>/dev/null || echo "Key not in state"
          fi
          sleep 10
          
          terraform apply \
            -var-file="environments/${{ github.event.inputs.network }}.tfvars" \
            -var="ssh_public_key=${{ secrets.SSH_PUBLIC_KEY }}" \
            -var="github_pat=${{ secrets.REPO_PAT }}" \
            -var="aws_region=${{ env.AWS_REGION }}" \
            -auto-approve
          
          # Output cluster IPs
          if [ "${{ github.event.inputs.network }}" == "lower" ]; then
            echo "dev_cluster_ip=$(terraform output -raw dev_cluster_ip)" >> $GITHUB_OUTPUT
            echo "test_cluster_ip=$(terraform output -raw test_cluster_ip)" >> $GITHUB_OUTPUT
          else
            echo "cluster_ip=$(terraform output -raw k3s_instance_ip)" >> $GITHUB_OUTPUT
          fi
      
      - name: Verify Instances Ready
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          DEV_CLUSTER_IP: ${{ steps.deploy.outputs.dev_cluster_ip }}
          TEST_CLUSTER_IP: ${{ steps.deploy.outputs.test_cluster_ip }}
          CLUSTER_IP: ${{ steps.deploy.outputs.cluster_ip }}
        run: |
          # Setup SSH key
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          echo "⏳ Waiting for instances to be ready..."
          sleep 120
          
          # Function to test SSH connectivity
          test_ssh() {
            local IP=$1
            local NAME=$2
            echo "Testing SSH connectivity to $NAME ($IP)..."
            
            for i in {1..15}; do
              if timeout 10 ssh -o StrictHostKeyChecking=no -o ConnectTimeout=5 ubuntu@$IP "echo 'SSH ready'" 2>/dev/null; then
                echo "✅ $NAME instance SSH is ready"
                return 0
              fi
              echo "⏳ Waiting for $NAME SSH... ($i/15)"
              sleep 20
            done
            echo "❌ $NAME instance SSH not ready after 5 minutes"
            return 1
          }
          
          # Test instances based on network tier
          if [ "${{ github.event.inputs.network }}" == "lower" ]; then
            success=true
            [ -n "$DEV_CLUSTER_IP" ] && { test_ssh "$DEV_CLUSTER_IP" "dev" || success=false; }
            [ -n "$TEST_CLUSTER_IP" ] && { test_ssh "$TEST_CLUSTER_IP" "test" || success=false; }
            
            if [ "$success" = false ]; then
              echo "❌ Some instances not ready"
              exit 1
            fi
          else
            [ -n "$CLUSTER_IP" ] && test_ssh "$CLUSTER_IP" "${{ github.event.inputs.network }}"
          fi
          
          echo "✅ All instances are ready for K3s installation"
          
          # Cleanup SSH key
          rm -f ~/.ssh/id_rsa

  # Step 3: Install K3s using Ansible
  install-k3s:
    if: github.event.inputs.action == 'deploy'
    needs: [deploy-runner, deploy-infrastructure]
    runs-on: self-hosted
    container:
      image: ghcr.io/arunprabus/dev2prod-healthapp/runner-tools:latest
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup SSH Key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
      
      - name: Create Ansible Inventory
        env:
          DEV_CLUSTER_IP: ${{ needs.deploy-infrastructure.outputs.dev_cluster_ip }}
          TEST_CLUSTER_IP: ${{ needs.deploy-infrastructure.outputs.test_cluster_ip }}
          CLUSTER_IP: ${{ needs.deploy-infrastructure.outputs.cluster_ip }}
        run: |
          cat > inventory.ini << EOF
          [k3s_nodes]
          EOF
          
          if [ "${{ github.event.inputs.network }}" == "lower" ]; then
            [ -n "$DEV_CLUSTER_IP" ] && echo "dev-cluster ansible_host=$DEV_CLUSTER_IP" >> inventory.ini
            [ -n "$TEST_CLUSTER_IP" ] && echo "test-cluster ansible_host=$TEST_CLUSTER_IP" >> inventory.ini
          else
            [ -n "$CLUSTER_IP" ] && echo "${{ github.event.inputs.network }}-cluster ansible_host=$CLUSTER_IP" >> inventory.ini
          fi
          
          cat >> inventory.ini << EOF
          
          [k3s_nodes:vars]
          ansible_user=ubuntu
          ansible_ssh_private_key_file=~/.ssh/id_rsa
          ansible_ssh_common_args='-o StrictHostKeyChecking=no'
          EOF
      
      - name: Install K3s with Ansible
        run: |
          ansible-playbook -i inventory.ini ansible/k3s-install.yml
      
      - name: Cleanup SSH Key
        if: always()
        run: rm -f ~/.ssh/id_rsa
      
      - name: Job Summary
        if: always()
        run: |
          echo "## 🚀 Infrastructure Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Component | Status | Details |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|--------|---------|" >> $GITHUB_STEP_SUMMARY
          echo "| GitHub Runner | ✅ Ready | Self-hosted runner deployed |" >> $GITHUB_STEP_SUMMARY
          echo "| Infrastructure | ✅ Deployed | ${{ github.event.inputs.network }} tier resources |" >> $GITHUB_STEP_SUMMARY
          echo "| K3s Installation | ✅ Complete | Ansible deployment successful |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ github.event.inputs.network }}" == "lower" ]; then
            echo "### 🎯 Cluster Endpoints" >> $GITHUB_STEP_SUMMARY
            [ -n "${{ needs.deploy-infrastructure.outputs.dev_cluster_ip }}" ] && echo "- **Dev Cluster**: https://${{ needs.deploy-infrastructure.outputs.dev_cluster_ip }}:6443" >> $GITHUB_STEP_SUMMARY
            [ -n "${{ needs.deploy-infrastructure.outputs.test_cluster_ip }}" ] && echo "- **Test Cluster**: https://${{ needs.deploy-infrastructure.outputs.test_cluster_ip }}:6443" >> $GITHUB_STEP_SUMMARY
          else
            echo "### 🎯 Cluster Endpoint" >> $GITHUB_STEP_SUMMARY
            [ -n "${{ needs.deploy-infrastructure.outputs.cluster_ip }}" ] && echo "- **${{ github.event.inputs.network }} Cluster**: https://${{ needs.deploy-infrastructure.outputs.cluster_ip }}:6443" >> $GITHUB_STEP_SUMMARY
          fi

  # Destroy job
  destroy:
    if: github.event.inputs.action == 'destroy'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}
          terraform_wrapper: false

      - name: Terraform Destroy
        working-directory: infra
        run: |
          if [ "${{ github.event.inputs.confirm_destroy }}" != "DESTROY" ]; then
            echo "❌ Type 'DESTROY' to confirm"
            exit 1
          fi
          
          terraform init -reconfigure \
            -backend-config="bucket=${{ secrets.TF_STATE_BUCKET }}" \
            -backend-config="key=health-app-${{ github.event.inputs.network }}.tfstate" \
            -backend-config="region=$AWS_REGION"
          
          terraform destroy \
            -var-file="environments/${{ github.event.inputs.network }}.tfvars" \
            -var="ssh_public_key=${{ secrets.SSH_PUBLIC_KEY }}" \
            -var="github_pat=${{ secrets.REPO_PAT }}" \
            -var="aws_region=${{ env.AWS_REGION }}" \
            -auto-approve
      
      - name: Destroy Summary
        if: always()
        run: |
          echo "## 💥 Infrastructure Destroy Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Component | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| ${{ github.event.inputs.network }} Infrastructure | ✅ Destroyed |" >> $GITHUB_STEP_SUMMARY
          echo "| Resources Cleaned | ✅ Complete |" >> $GITHUB_STEP_SUMMARY