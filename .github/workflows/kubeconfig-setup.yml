name: Kubeconfig Setup

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment'
        required: true
        type: choice
        options:
        - lower
        - higher
        - monitoring

jobs:
  kubeconfig:
    runs-on: ${{ fromJSON(format('["self-hosted", "github-runner-{0}"]', github.event.inputs.environment)) }}
    
    steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-south-1

    - name: Verify tools
      run: |
        # Verify pre-installed tools
        aws --version
        kubectl version --client
        terraform version
        docker --version
        gh --version

    - name: Debug K3s Installation
      run: |
        echo "🔍 Debugging K3s installation for ${{ github.event.inputs.environment }} environment..."
        
        # Get K3s instance details
        K3S_DETAILS=$(aws ec2 describe-instances \
          --filters "Name=tag:Name,Values=health-app-${{ github.event.inputs.environment }}-k3s-node" "Name=instance-state-name,Values=running" \
          --query "Reservations[0].Instances[0].[InstanceId,PublicIpAddress]" --output text)
        
        K3S_INSTANCE_ID=$(echo $K3S_DETAILS | cut -d' ' -f1)
        K3S_IP=$(echo $K3S_DETAILS | cut -d' ' -f2)
        
        if [ "$K3S_INSTANCE_ID" = "None" ] || [ -z "$K3S_INSTANCE_ID" ]; then
          echo "❌ No K3s instance found"
          exit 1
        fi
        
        echo "🔍 Checking K3s installation status: $K3S_INSTANCE_ID"
        
        # Check user-data logs
        echo "=== USER DATA LOGS ==="
        COMMAND_ID=$(aws ssm send-command \
          --instance-ids "$K3S_INSTANCE_ID" \
          --document-name "AWS-RunShellScript" \
          --parameters 'commands=["tail -50 /var/log/cloud-init-output.log"]' \
          --query "Command.CommandId" --output text)
        
        sleep 10
        aws ssm get-command-invocation \
          --command-id "$COMMAND_ID" \
          --instance-id "$K3S_INSTANCE_ID" \
          --query "StandardOutputContent" --output text
        
        echo "=== K3S SERVICE STATUS ==="
        COMMAND_ID=$(aws ssm send-command \
          --instance-ids "$K3S_INSTANCE_ID" \
          --document-name "AWS-RunShellScript" \
          --parameters 'commands=["systemctl status k3s --no-pager"]' \
          --query "Command.CommandId" --output text)
        
        sleep 10
        aws ssm get-command-invocation \
          --command-id "$COMMAND_ID" \
          --instance-id "$K3S_INSTANCE_ID" \
          --query "StandardOutputContent" --output text
        
        echo "=== K3S INSTALLATION LOG ==="
        COMMAND_ID=$(aws ssm send-command \
          --instance-ids "$K3S_INSTANCE_ID" \
          --document-name "AWS-RunShellScript" \
          --parameters 'commands=["cat /var/log/k3s-install.log 2>/dev/null || echo No K3s install log found"]' \
          --query "Command.CommandId" --output text)
        
        sleep 10
        aws ssm get-command-invocation \
          --command-id "$COMMAND_ID" \
          --instance-id "$K3S_INSTANCE_ID" \
          --query "StandardOutputContent" --output text

    - name: Setup kubeconfig via Systems Manager
      run: |
        echo "🔧 Setting up kubeconfig for ${{ github.event.inputs.environment }} environment..."
        
        # Get K3s instance details
        K3S_DETAILS=$(aws ec2 describe-instances \
          --filters "Name=tag:Name,Values=health-app-${{ github.event.inputs.environment }}-k3s-node" "Name=instance-state-name,Values=running" \
          --query "Reservations[0].Instances[0].[InstanceId,PublicIpAddress]" --output text)
        
        K3S_INSTANCE_ID=$(echo $K3S_DETAILS | cut -d' ' -f1)
        K3S_IP=$(echo $K3S_DETAILS | cut -d' ' -f2)
        
        echo "📥 Connecting to K3s via Systems Manager: $K3S_INSTANCE_ID"
        
        # Wait for K3s to be ready via SSM
        for i in {1..10}; do
          echo "⏳ Checking K3s status (attempt $i/10)..."
          
          COMMAND_ID=$(aws ssm send-command \
            --instance-ids "$K3S_INSTANCE_ID" \
            --document-name "AWS-RunShellScript" \
            --parameters 'commands=["sudo systemctl is-active k3s"]' \
            --query "Command.CommandId" --output text)
          
          sleep 15
          
          RESULT=$(aws ssm get-command-invocation \
            --command-id "$COMMAND_ID" \
            --instance-id "$K3S_INSTANCE_ID" \
            --query "StandardOutputContent" --output text 2>/dev/null || echo "waiting")
          
          if [[ "$RESULT" == "active" ]]; then
            echo "✅ K3s is ready!"
            break
          else
            echo "⏳ K3s not ready yet, waiting..."
            sleep 30
          fi
        done
        
        # Download kubeconfig via SSM
        echo "📥 Downloading kubeconfig via Systems Manager..."
        COMMAND_ID=$(aws ssm send-command \
          --instance-ids "$K3S_INSTANCE_ID" \
          --document-name "AWS-RunShellScript" \
          --parameters 'commands=["sudo cat /etc/rancher/k3s/k3s.yaml"]' \
          --query "Command.CommandId" --output text)
        
        sleep 10
        
        aws ssm get-command-invocation \
          --command-id "$COMMAND_ID" \
          --instance-id "$K3S_INSTANCE_ID" \
          --query "StandardOutputContent" --output text > /tmp/kubeconfig.yaml
        
        # Update server IP to public IP
        sed -i "s/127.0.0.1/$K3S_IP/g" /tmp/kubeconfig.yaml
        
        # Test kubeconfig connectivity
        export KUBECONFIG=/tmp/kubeconfig.yaml
        if kubectl get nodes; then
          echo "✅ Kubeconfig is working!"
          kubectl get pods -A
        else
          echo "❌ Kubeconfig test failed"
          exit 1
        fi
        
        # Upload kubeconfig to S3
        echo "📤 Uploading kubeconfig to S3..."
        aws s3 cp /tmp/kubeconfig.yaml s3://${{ secrets.TF_STATE_BUCKET }}/kubeconfig/${{ github.event.inputs.environment }}-kubeconfig.yaml
        
        # Base64 encode for GitHub secret
        KUBECONFIG_B64=$(base64 -w 0 /tmp/kubeconfig.yaml)
        
        # Determine secret name
        case "${{ github.event.inputs.environment }}" in
          "lower") SECRET_NAME="KUBECONFIG_DEV" ;;
          "higher") SECRET_NAME="KUBECONFIG_PROD" ;;
          "monitoring") SECRET_NAME="KUBECONFIG_MONITORING" ;;
        esac
        
        echo "### 🔐 Kubeconfig Ready" >> $GITHUB_STEP_SUMMARY
        echo "**Secret Name:** \`$SECRET_NAME\`" >> $GITHUB_STEP_SUMMARY
        echo "**Cluster:** $K3S_IP:6443" >> $GITHUB_STEP_SUMMARY
        echo "**S3 Location:** s3://${{ secrets.TF_STATE_BUCKET }}/kubeconfig/${{ github.event.inputs.environment }}-kubeconfig.yaml" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        echo "$KUBECONFIG_B64" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        
        rm -f /tmp/kubeconfig.yaml
        echo "🎉 Kubeconfig configured and uploaded to S3 for ${{ github.event.inputs.environment }} environment"