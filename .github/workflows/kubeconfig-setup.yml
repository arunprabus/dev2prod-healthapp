name: Kubeconfig Setup

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment'
        required: true
        type: choice
        options:
        - lower
        - higher
        - monitoring

jobs:
  kubeconfig:
    runs-on: ${{ fromJSON(format('["self-hosted", "github-runner-{0}"]', github.event.inputs.environment)) }}
    
    steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-south-1

    - name: Verify tools
      run: |
        # Verify pre-installed tools
        aws --version
        kubectl version --client
        terraform version
        docker --version
        gh --version

    - name: Setup kubeconfig from K3s cluster
      run: |
        echo "🔧 Setting up kubeconfig for ${{ github.event.inputs.environment }} environment..."
        
        # Get K3s instance IP
        K3S_IP=$(aws ec2 describe-instances \
          --filters "Name=tag:Name,Values=health-app-${{ github.event.inputs.environment }}-k3s-node" "Name=instance-state-name,Values=running" \
          --query "Reservations[0].Instances[0].PublicIpAddress" --output text 2>/dev/null)
        
        if [ "$K3S_IP" = "None" ] || [ -z "$K3S_IP" ]; then
          echo "❌ No K3s instance found"
          exit 1
        fi
        
        echo "📥 Downloading kubeconfig from K3s cluster at $K3S_IP..."
        
        # Wait for K3s to be ready
        for i in {1..10}; do
          if ssh -o StrictHostKeyChecking=no ubuntu@$K3S_IP "sudo systemctl is-active k3s" 2>/dev/null; then
            echo "✅ K3s is ready (attempt $i)"
            break
          else
            echo "⏳ Waiting for K3s to be ready... (attempt $i/10)"
            sleep 30
          fi
        done
        
        # Download and configure kubeconfig
        ssh -o StrictHostKeyChecking=no ubuntu@$K3S_IP "sudo cat /etc/rancher/k3s/k3s.yaml" > /tmp/kubeconfig.yaml
        sed -i "s/127.0.0.1/$K3S_IP/g" /tmp/kubeconfig.yaml
        
        # Test kubeconfig
        export KUBECONFIG=/tmp/kubeconfig.yaml
        if kubectl get nodes; then
          echo "✅ Kubeconfig is working!"
          kubectl get pods -A
        else
          echo "❌ Kubeconfig test failed"
          exit 1
        fi
        
        # Base64 encode for GitHub secret
        KUBECONFIG_B64=$(base64 -w 0 /tmp/kubeconfig.yaml)
        
        # Determine secret name
        case "${{ github.event.inputs.environment }}" in
          "lower") SECRET_NAME="KUBECONFIG_DEV" ;;
          "higher") SECRET_NAME="KUBECONFIG_PROD" ;;
          "monitoring") SECRET_NAME="KUBECONFIG_MONITORING" ;;
        esac
        
        echo "### 🔐 Kubeconfig Ready" >> $GITHUB_STEP_SUMMARY
        echo "**Secret Name:** \`$SECRET_NAME\`" >> $GITHUB_STEP_SUMMARY
        echo "**Cluster:** $K3S_IP:6443" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        echo "$KUBECONFIG_B64" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        
        rm -f /tmp/kubeconfig.yaml
        echo "🎉 Kubeconfig configured for ${{ github.event.inputs.environment }} environment"