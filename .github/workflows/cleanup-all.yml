name: Cleanup All Resources

on:
  workflow_dispatch:
    inputs:
      confirm_cleanup:
        description: 'Type "CLEANUP-ALL" to confirm'
        required: true
        type: string

env:
  AWS_REGION: ap-south-1
  TERRAFORM_VERSION: 1.6.0

jobs:
  cleanup-all:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        network: [lower, higher, monitoring]
    
    steps:
      - uses: actions/checkout@v4

      - uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Confirm Cleanup
        run: |
          if [ "${{ github.event.inputs.confirm_cleanup }}" != "CLEANUP-ALL" ]; then
            echo "‚ùå Type 'CLEANUP-ALL' to confirm"
            exit 1
          fi

      - name: Destroy Network
        working-directory: infra
        run: |
          ENV="${{ matrix.network == 'lower' && 'dev' || matrix.network == 'higher' && 'prod' || 'monitoring' }}"
          terraform init \
            -backend-config="bucket=${{ secrets.TF_STATE_BUCKET }}" \
            -backend-config="key=health-app-${{ matrix.network }}.tfstate" \
            -backend-config="region=$AWS_REGION"
          
          terraform destroy \
            -var-file="environments/$ENV.tfvars" \
            -var="network_tier=${{ matrix.network }}" \
            -var="ssh_public_key=${{ secrets.SSH_PUBLIC_KEY }}" \
            -var="github_pat=${{ secrets.REPO_PAT }}" \
            -auto-approve || echo "Network ${{ matrix.network }} cleanup completed"

  cleanup-orphaned:
    needs: cleanup-all
    runs-on: ubuntu-latest
    
    steps:
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Cleanup Orphaned Resources
        run: |
          echo "üßπ Starting comprehensive cleanup..."
          
          # 1. Terminate all health-app instances
          echo "üî• Terminating EC2 instances..."
          INSTANCES=$(aws ec2 describe-instances \
            --filters "Name=tag:Project,Values=health-app" "Name=instance-state-name,Values=running,stopped" \
            --query 'Reservations[].Instances[].InstanceId' --output text)
          
          if [ -n "$INSTANCES" ]; then
            aws ec2 terminate-instances --instance-ids $INSTANCES
            echo "‚è≥ Waiting for instances to terminate..."
            aws ec2 wait instance-terminated --instance-ids $INSTANCES || true
          fi
          
          # 2. Delete RDS instances
          echo "üóÑÔ∏è Deleting RDS instances..."
          RDS_INSTANCES=$(aws rds describe-db-instances \
            --query 'DBInstances[?starts_with(DBInstanceIdentifier, `health-app`)].DBInstanceIdentifier' --output text)
          
          for db in $RDS_INSTANCES; do
            aws rds delete-db-instance --db-instance-identifier $db --skip-final-snapshot --delete-automated-backups || true
          done
          
          # 3. Delete EBS volumes
          echo "üíæ Deleting EBS volumes..."
          VOLUMES=$(aws ec2 describe-volumes \
            --filters "Name=tag:Project,Values=health-app" "Name=state,Values=available" \
            --query 'Volumes[].VolumeId' --output text)
          
          for vol in $VOLUMES; do
            aws ec2 delete-volume --volume-id $vol || true
          done
          
          # 4. Delete security groups
          echo "üîí Deleting security groups..."
          sleep 30
          SG_IDS=$(aws ec2 describe-security-groups \
            --filters "Name=tag:Project,Values=health-app" \
            --query 'SecurityGroups[?GroupName!=`default`].GroupId' --output text)
          
          for sg in $SG_IDS; do
            aws ec2 delete-security-group --group-id $sg || true
          done
          
          # 5. Delete key pairs
          echo "üîë Deleting key pairs..."
          KEY_PAIRS=$(aws ec2 describe-key-pairs \
            --filters "Name=key-name,Values=health-app-*" \
            --query 'KeyPairs[].KeyName' --output text)
          
          for key in $KEY_PAIRS; do
            aws ec2 delete-key-pair --key-name $key || true
          done
          
          # 6. Delete IAM roles and policies
          echo "üë§ Deleting IAM resources..."
          IAM_ROLES=$(aws iam list-roles --query 'Roles[?starts_with(RoleName, `health-app`)].RoleName' --output text)
          
          for role in $IAM_ROLES; do
            # Detach policies
            ATTACHED_POLICIES=$(aws iam list-attached-role-policies --role-name $role --query 'AttachedPolicies[].PolicyArn' --output text)
            for policy in $ATTACHED_POLICIES; do
              aws iam detach-role-policy --role-name $role --policy-arn $policy || true
            done
            
            # Remove from instance profiles
            INSTANCE_PROFILES=$(aws iam list-instance-profiles-for-role --role-name $role --query 'InstanceProfiles[].InstanceProfileName' --output text)
            for profile in $INSTANCE_PROFILES; do
              aws iam remove-role-from-instance-profile --instance-profile-name $profile --role-name $role || true
              aws iam delete-instance-profile --instance-profile-name $profile || true
            done
            
            # Delete role
            aws iam delete-role --role-name $role || true
          done
          
          # 7. Delete VPCs and related resources
          echo "üåê Deleting VPC resources..."
          VPCS=$(aws ec2 describe-vpcs \
            --filters "Name=tag:Project,Values=health-app" \
            --query 'Vpcs[].VpcId' --output text)
          
          for vpc in $VPCS; do
            # Delete subnets
            SUBNETS=$(aws ec2 describe-subnets --filters "Name=vpc-id,Values=$vpc" --query 'Subnets[].SubnetId' --output text)
            for subnet in $SUBNETS; do
              aws ec2 delete-subnet --subnet-id $subnet || true
            done
            
            # Delete route tables (except main)
            ROUTE_TABLES=$(aws ec2 describe-route-tables --filters "Name=vpc-id,Values=$vpc" --query 'RouteTables[?Associations[0].Main!=`true`].RouteTableId' --output text)
            for rt in $ROUTE_TABLES; do
              aws ec2 delete-route-table --route-table-id $rt || true
            done
            
            # Delete internet gateway
            IGW=$(aws ec2 describe-internet-gateways --filters "Name=attachment.vpc-id,Values=$vpc" --query 'InternetGateways[].InternetGatewayId' --output text)
            if [ -n "$IGW" ]; then
              aws ec2 detach-internet-gateway --internet-gateway-id $IGW --vpc-id $vpc || true
              aws ec2 delete-internet-gateway --internet-gateway-id $IGW || true
            fi
            
            # Delete VPC
            aws ec2 delete-vpc --vpc-id $vpc || true
          done
          
          echo "‚úÖ Comprehensive cleanup completed!"