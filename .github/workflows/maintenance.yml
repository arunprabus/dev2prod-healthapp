name: Governance & Maintenance

on:
  pull_request:
    paths:
      - 'infra/**'
      - 'policies/**'
  schedule:
    - cron: '0 */6 * * *'  # Every 6 hours for data transfer monitoring
  workflow_dispatch:
    inputs:
      action:
        description: 'Action'
        required: true
        type: choice
        options:
        - governance-check
        - data-transfer-monitor
        - emergency-cleanup
        - vpc-cleanup
      check_type:
        description: 'Governance check type'
        required: false
        default: 'full'
        type: choice
        options:
        - full
        - policy-only
        - cost-only
      confirm_cleanup:
        description: 'Type "CLEANUP" to confirm destructive actions'
        required: false
        type: string
      cleanup_scope:
        description: 'Cleanup scope (for emergency cleanup)'
        required: false
        default: 'health-app-only'
        type: choice
        options:
        - health-app-only
        - all-orphaned-resources

env:
  AWS_REGION: ap-south-1

jobs:
  governance-maintenance:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Setup Terraform
      if: github.event.inputs.action == 'governance-check' || github.event_name == 'pull_request'
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.6.0

    - name: Governance Check
      if: github.event.inputs.action == 'governance-check' || github.event_name == 'pull_request'
      run: |
        echo "🛡️ Running governance validation..."
        
        # Multi-region check
        chmod +x scripts/prevent-multi-region-resources.sh
        ./scripts/prevent-multi-region-resources.sh ${{ env.AWS_REGION }} check
        
        # Terraform validation
        cd infra/two-network-setup
        terraform init -backend=false
        terraform validate
        
        # Policy compliance
        terraform plan \
          -var="environment=dev" \
          -var="network_tier=lower" \
          -var="ssh_public_key=ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC7S6n..." \
          -var="repo_pat=dummy" \
          -var="repo_name=dummy" \
          -out=test-plan
        
        chmod +x ../../scripts/terraform-policy-check.sh
        ../../scripts/terraform-policy-check.sh test-plan ../../policies validate
        
        echo "✅ Governance check completed"

    - name: Validate Cleanup Confirmation
      if: github.event.inputs.action == 'emergency-cleanup'
      run: |
        if [ "${{ github.event.inputs.confirm_cleanup }}" != "CLEANUP" ]; then
          echo "❌ Confirmation failed. Type 'CLEANUP' to proceed with emergency cleanup."
          exit 1
        fi
        echo "✅ Emergency cleanup confirmed"

    - name: Data Transfer Monitor
      if: github.event.inputs.action == 'data-transfer-monitor' || github.event_name == 'schedule'
      run: |
        chmod +x scripts/data-transfer-optimizer.sh
        ./scripts/data-transfer-optimizer.sh ${{ env.AWS_REGION }} monitor
        
        # Auto-optimize if scheduled
        if [ "${{ github.event_name }}" = "schedule" ]; then
          echo "🔄 Scheduled optimization to prevent free tier overage"
          ./scripts/data-transfer-optimizer.sh ${{ env.AWS_REGION }} optimize
        fi

    - name: Emergency Cleanup
      if: github.event.inputs.action == 'emergency-cleanup'
      run: |
        echo "🚨 Starting emergency cleanup..."
        echo "Scope: ${{ github.event.inputs.cleanup_scope }}"
        
        # Define regions to clean
        if [ "${{ github.event.inputs.cleanup_scope }}" = "all-orphaned-resources" ]; then
          REGIONS="ap-south-1 us-east-1 us-west-2 eu-west-1 ap-northeast-1 ap-southeast-1 ap-southeast-2 eu-central-1 ca-central-1 sa-east-1"
        else
          REGIONS="ap-south-1"
        fi
        
        for REGION in $REGIONS; do
          echo "🌍 Cleaning region: $REGION"
          
          # Terminate EC2 instances
          if [ "${{ github.event.inputs.cleanup_scope }}" = "health-app-only" ]; then
            INSTANCES=$(aws ec2 describe-instances --region $REGION --filters "Name=tag:Project,Values=health-app" "Name=instance-state-name,Values=running,stopped,stopping" --query "Reservations[].Instances[].InstanceId" --output text 2>/dev/null || echo "")
          else
            INSTANCES=$(aws ec2 describe-instances --region $REGION --filters "Name=instance-state-name,Values=running,stopped,stopping" --query "Reservations[].Instances[].InstanceId" --output text 2>/dev/null || echo "")
          fi
          
          if [ -n "$INSTANCES" ] && [ "$INSTANCES" != "None" ]; then
            echo "Terminating instances in $REGION: $INSTANCES"
            echo $INSTANCES | xargs -n1 aws ec2 terminate-instances --region $REGION --instance-ids || true
          fi
          
          # Delete RDS instances
          if [ "${{ github.event.inputs.cleanup_scope }}" = "health-app-only" ]; then
            RDS_INSTANCES=$(aws rds describe-db-instances --region $REGION --query "DBInstances[?contains(DBInstanceIdentifier, 'health-app')].DBInstanceIdentifier" --output text 2>/dev/null || echo "")
          else
            RDS_INSTANCES=$(aws rds describe-db-instances --region $REGION --query "DBInstances[].DBInstanceIdentifier" --output text 2>/dev/null || echo "")
          fi
          
          if [ -n "$RDS_INSTANCES" ] && [ "$RDS_INSTANCES" != "None" ]; then
            echo "Deleting RDS instances in $REGION: $RDS_INSTANCES"
            echo $RDS_INSTANCES | xargs -n1 -I {} aws rds delete-db-instance --region $REGION --db-instance-identifier {} --skip-final-snapshot || true
          fi
          
          # Delete security groups (non-default)
          SG_IDS=$(aws ec2 describe-security-groups --region $REGION --query "SecurityGroups[?GroupName!='default'].GroupId" --output text 2>/dev/null || echo "")
          if [ -n "$SG_IDS" ] && [ "$SG_IDS" != "None" ]; then
            echo "Deleting security groups in $REGION: $SG_IDS"
            echo $SG_IDS | xargs -n1 aws ec2 delete-security-group --region $REGION --group-id || true
          fi
          
          # Delete key pairs
          KEY_PAIRS=$(aws ec2 describe-key-pairs --region $REGION --query "KeyPairs[].KeyName" --output text 2>/dev/null || echo "")
          if [ -n "$KEY_PAIRS" ] && [ "$KEY_PAIRS" != "None" ]; then
            echo "Deleting key pairs in $REGION: $KEY_PAIRS"
            echo $KEY_PAIRS | xargs -n1 aws ec2 delete-key-pair --region $REGION --key-name || true
          fi
        done
        
        echo "✅ Multi-region cleanup completed"

    - name: VPC Cleanup
      if: github.event.inputs.action == 'vpc-cleanup'
      run: |
        chmod +x scripts/vpc-cleanup.sh
        ./scripts/vpc-cleanup.sh ${{ env.AWS_REGION }}

    - name: Summary
      if: always()
      run: |
        echo "## 🛡️ Governance & Maintenance Summary" >> $GITHUB_STEP_SUMMARY
        echo "**Action:** ${{ github.event.inputs.action || 'scheduled-monitoring' }}" >> $GITHUB_STEP_SUMMARY
        echo "**Status:** ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
        echo "**Date:** $(date)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ github.event.inputs.action }}" = "governance-check" ] || [ "${{ github.event_name }}" = "pull_request" ]; then
          echo "### 🛡️ Governance Controls:" >> $GITHUB_STEP_SUMMARY
          echo "- Region Lock: ap-south-1 only" >> $GITHUB_STEP_SUMMARY
          echo "- Instance Types: t2.micro only" >> $GITHUB_STEP_SUMMARY
          echo "- Cost Limit: $1.00/month" >> $GITHUB_STEP_SUMMARY
        fi