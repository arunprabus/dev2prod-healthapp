name: Fresh Start

on:
  workflow_dispatch:
    inputs:
      network:
        description: 'Network Tier'
        required: true
        default: 'lower'
        type: choice
        options:
          - lower
          - higher
          - monitoring

env:
  AWS_REGION: ap-south-1
  TERRAFORM_VERSION: 1.6.0

jobs:
  fresh-start:
    runs-on: ubuntu-latest
    timeout-minutes: 45
    
    steps:
      - uses: actions/checkout@v4

      - uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}
          terraform_wrapper: false

      - name: Clean Slate - Delete Everything
        run: |
          echo "🧹 Starting fresh - deleting all existing resources..."
          
          # Delete existing RDS resources manually
          echo "🗑️ Deleting RDS resources..."
          aws rds delete-db-instance --db-instance-identifier health-app-shared-db --skip-final-snapshot --delete-automated-backups || echo "RDS instance doesn't exist"
          
          # Wait for RDS deletion
          echo "⏳ Waiting for RDS deletion..."
          for i in {1..15}; do
            if ! aws rds describe-db-instances --db-instance-identifier health-app-shared-db >/dev/null 2>&1; then
              echo "✅ RDS instance deleted"
              break
            fi
            echo "Waiting... ($i/15)"
            sleep 20
          done
          
          # Delete RDS subnet and parameter groups
          aws rds delete-db-subnet-group --db-subnet-group-name health-app-shared-db-subnet-group || echo "Subnet group doesn't exist"
          aws rds delete-db-parameter-group --db-parameter-group-name health-app-shared-db-params || echo "Parameter group doesn't exist"
          
          # Delete Terraform state completely
          echo "🗑️ Deleting Terraform state..."
          aws s3 rm "s3://${{ secrets.TF_STATE_BUCKET }}/health-app-${{ github.event.inputs.network }}.tfstate" || echo "State file doesn't exist"
          
          echo "✅ Clean slate ready"

      - name: Fresh Terraform Init
        working-directory: infra
        run: |
          echo "🔧 Fresh Terraform initialization..."
          terraform init -reconfigure \
            -backend-config="bucket=${{ secrets.TF_STATE_BUCKET }}" \
            -backend-config="key=health-app-${{ github.event.inputs.network }}.tfstate" \
            -backend-config="region=$AWS_REGION"

      - name: Fresh Deploy
        working-directory: infra
        run: |
          echo "🚀 Fresh deployment starting..."
          
          terraform apply \
            -var-file="environments/${{ github.event.inputs.network }}.tfvars" \
            -var="ssh_public_key=${{ secrets.SSH_PUBLIC_KEY }}" \
            -var="github_pat=${{ secrets.REPO_PAT }}" \
            -var="aws_region=${{ env.AWS_REGION }}" \
            -auto-approve
          
          echo "✅ Fresh deployment complete!"

      - name: Output Results
        working-directory: infra
        run: |
          echo "📋 Deployment Results:"
          terraform output