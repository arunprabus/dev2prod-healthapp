name: Auto Kubeconfig Setup

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to setup kubeconfig for'
        required: true
        type: choice
        options:
          - 'lower'
          - 'higher'
          - 'monitoring'
          - 'all'

jobs:
  setup-kubeconfig:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Get cluster IPs
        id: cluster-ips
        run: |
          echo "üîç Searching for K3s clusters..."
          
          if [[ "${{ inputs.environment }}" == "lower" || "${{ inputs.environment }}" == "all" ]]; then
            echo "Looking for lower network cluster..."
            LOWER_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=health-app-k3s-master-lower" "Name=instance-state-name,Values=running" \
              --query 'Reservations[0].Instances[0].PublicIpAddress' --output text 2>/dev/null || echo "None")
            echo "Lower IP: $LOWER_IP"
            echo "lower_ip=$LOWER_IP" >> $GITHUB_OUTPUT
          fi
          
          if [[ "${{ inputs.environment }}" == "higher" || "${{ inputs.environment }}" == "all" ]]; then
            echo "Looking for higher network cluster..."
            HIGHER_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=health-app-k3s-master-higher" "Name=instance-state-name,Values=running" \
              --query 'Reservations[0].Instances[0].PublicIpAddress' --output text 2>/dev/null || echo "None")
            echo "Higher IP: $HIGHER_IP"
            echo "higher_ip=$HIGHER_IP" >> $GITHUB_OUTPUT
          fi
          
          if [[ "${{ inputs.environment }}" == "monitoring" || "${{ inputs.environment }}" == "all" ]]; then
            echo "Looking for monitoring network cluster..."
            MONITORING_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=health-app-k3s-master-monitoring" "Name=instance-state-name,Values=running" \
              --query 'Reservations[0].Instances[0].PublicIpAddress' --output text 2>/dev/null || echo "None")
            echo "Monitoring IP: $MONITORING_IP"
            echo "monitoring_ip=$MONITORING_IP" >> $GITHUB_OUTPUT
          fi
          
          # Also try alternative naming patterns
          echo "üîç Trying alternative cluster names..."
          ALL_K3S=$(aws ec2 describe-instances \
            --filters "Name=tag:Name,Values=*k3s*" "Name=instance-state-name,Values=running" \
            --query 'Reservations[].Instances[].[Tags[?Key==`Name`].Value|[0],PublicIpAddress]' --output text)
          echo "All K3s instances found:"
          echo "$ALL_K3S"

      - name: Setup SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/k3s-key
          chmod 600 ~/.ssh/k3s-key

      - name: Download and setup kubeconfigs
        run: |
          setup_kubeconfig() {
            local env=$1
            local ip=$2
            local secret_names=$3
            
            if [[ "$ip" == "None" || -z "$ip" ]]; then
              echo "‚ö†Ô∏è No IP found for $env environment"
              return
            fi
            
            echo "üîß Setting up kubeconfig for $env at $ip"
            
            # Download kubeconfig
            scp -i ~/.ssh/k3s-key -o StrictHostKeyChecking=no \
              ubuntu@$ip:/etc/rancher/k3s/k3s.yaml kubeconfig-$env.yaml
            
            # Update server IP
            sed -i "s/127.0.0.1/$ip/" kubeconfig-$env.yaml
            
            # Test connection
            export KUBECONFIG=$PWD/kubeconfig-$env.yaml
            if timeout 30 kubectl get nodes; then
              echo "‚úÖ Connection successful for $env"
              
              # Create base64 encoded version
              BASE64_CONFIG=$(base64 -w 0 kubeconfig-$env.yaml)
              
              # Update GitHub secrets for each secret name
              IFS=',' read -ra SECRETS <<< "$secret_names"
              for secret in "${SECRETS[@]}"; do
                echo "üîê Updating GitHub secret: $secret"
                curl -X PUT \
                  -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                  -H "Accept: application/vnd.github.v3+json" \
                  "https://api.github.com/repos/${{ github.repository }}/actions/secrets/$secret" \
                  -d "{\"encrypted_value\":\"$BASE64_CONFIG\",\"key_id\":\"$(curl -H 'Authorization: token ${{ secrets.GITHUB_TOKEN }}' https://api.github.com/repos/${{ github.repository }}/actions/secrets/public-key | jq -r .key_id)\"}"
              done
            else
              echo "‚ùå Connection failed for $env"
            fi
          }
          
          # Setup kubeconfigs based on input
          if [[ "${{ inputs.environment }}" == "lower" || "${{ inputs.environment }}" == "all" ]]; then
            setup_kubeconfig "lower" "${{ steps.cluster-ips.outputs.lower_ip }}" "KUBECONFIG_DEV,KUBECONFIG_TEST"
          fi
          
          if [[ "${{ inputs.environment }}" == "higher" || "${{ inputs.environment }}" == "all" ]]; then
            setup_kubeconfig "higher" "${{ steps.cluster-ips.outputs.higher_ip }}" "KUBECONFIG_PROD"
          fi
          
          if [[ "${{ inputs.environment }}" == "monitoring" || "${{ inputs.environment }}" == "all" ]]; then
            setup_kubeconfig "monitoring" "${{ steps.cluster-ips.outputs.monitoring_ip }}" "KUBECONFIG_MONITORING"
          fi

      - name: Verify setup
        run: |
          echo "üß™ Verifying kubeconfig setup..."
          
          # Test each environment
          test_kubeconfig() {
            local secret_name=$1
            local env_name=$2
            
            echo "Testing $env_name ($secret_name)..."
            
            # Get secret value (this is a simplified test)
            if [[ -f "kubeconfig-${env_name,,}.yaml" ]]; then
              export KUBECONFIG=$PWD/kubeconfig-${env_name,,}.yaml
              if timeout 10 kubectl cluster-info; then
                echo "‚úÖ $env_name kubeconfig working"
              else
                echo "‚ùå $env_name kubeconfig failed"
              fi
            fi
          }
          
          if [[ "${{ inputs.environment }}" == "lower" || "${{ inputs.environment }}" == "all" ]]; then
            test_kubeconfig "KUBECONFIG_DEV" "lower"
          fi
          
          if [[ "${{ inputs.environment }}" == "higher" || "${{ inputs.environment }}" == "all" ]]; then
            test_kubeconfig "KUBECONFIG_PROD" "higher"
          fi
          
          if [[ "${{ inputs.environment }}" == "monitoring" || "${{ inputs.environment }}" == "all" ]]; then
            test_kubeconfig "KUBECONFIG_MONITORING" "monitoring"
          fi

      - name: Summary
        run: |
          echo "üéâ Kubeconfig automation complete!"
          echo ""
          echo "üìã Updated GitHub Secrets:"
          if [[ "${{ inputs.environment }}" == "lower" || "${{ inputs.environment }}" == "all" ]]; then
            echo "  - KUBECONFIG_DEV (for dev environment)"
            echo "  - KUBECONFIG_TEST (for test environment)"
          fi
          if [[ "${{ inputs.environment }}" == "higher" || "${{ inputs.environment }}" == "all" ]]; then
            echo "  - KUBECONFIG_PROD (for prod environment)"
          fi
          if [[ "${{ inputs.environment }}" == "monitoring" || "${{ inputs.environment }}" == "all" ]]; then
            echo "  - KUBECONFIG_MONITORING (for monitoring environment)"
          fi
          echo ""
          echo "üß™ Test with: Actions ‚Üí Kubeconfig Access"