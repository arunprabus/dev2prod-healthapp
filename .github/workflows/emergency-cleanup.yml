name: Emergency Cleanup

on:
  workflow_dispatch:
    inputs:
      confirm_cleanup:
        description: 'Type "CLEANUP" to confirm'
        required: true
        type: string
      cleanup_scope:
        description: 'Cleanup scope'
        required: true
        default: 'health-app-only'
        type: choice
        options:
        - health-app-only
        - all-orphaned-resources

env:
  AWS_REGION: ap-south-1

jobs:
  emergency-cleanup:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    
    steps:
    - name: Validate Confirmation
      run: |
        if [ "${{ github.event.inputs.confirm_cleanup }}" != "CLEANUP" ]; then
          echo "❌ Confirmation failed. Type 'CLEANUP' to proceed."
          exit 1
        fi
        echo "✅ Confirmation validated"

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Emergency Resource Cleanup
      run: |
        echo "🚨 Starting emergency cleanup..."
        echo "Scope: ${{ github.event.inputs.cleanup_scope }}"
        
        # Wait for any pending operations
        echo "⏳ Waiting 30 seconds for pending operations..."
        sleep 30
        
        # Terminate EC2 instances
        echo "🔥 Terminating EC2 instances..."
        if [ "${{ github.event.inputs.cleanup_scope }}" = "health-app-only" ]; then
          INSTANCES=$(aws ec2 describe-instances --filters "Name=tag:Project,Values=health-app" "Name=instance-state-name,Values=running,stopped,stopping" --query "Reservations[].Instances[].InstanceId" --output text)
        else
          INSTANCES=$(aws ec2 describe-instances --filters "Name=instance-state-name,Values=running,stopped,stopping" --query "Reservations[].Instances[].InstanceId" --output text)
        fi
        
        if [ -n "$INSTANCES" ]; then
          echo "Terminating instances: $INSTANCES"
          echo $INSTANCES | xargs -n1 aws ec2 terminate-instances --instance-ids || true
        else
          echo "No instances to terminate"
        fi
        
        # Wait for instances to terminate
        echo "⏳ Waiting 60 seconds for instances to terminate..."
        sleep 60
        
        # Delete RDS instances
        echo "🗄️ Deleting RDS instances..."
        if [ "${{ github.event.inputs.cleanup_scope }}" = "health-app-only" ]; then
          RDS_INSTANCES=$(aws rds describe-db-instances --query "DBInstances[?contains(DBInstanceIdentifier, 'health-app') || contains(DBInstanceIdentifier, 'dev-lower') || contains(DBInstanceIdentifier, 'prod-higher')].DBInstanceIdentifier" --output text)
        else
          RDS_INSTANCES=$(aws rds describe-db-instances --query "DBInstances[].DBInstanceIdentifier" --output text)
        fi
        
        if [ -n "$RDS_INSTANCES" ]; then
          echo "Deleting RDS instances: $RDS_INSTANCES"
          echo $RDS_INSTANCES | xargs -n1 -I {} aws rds delete-db-instance --db-instance-identifier {} --skip-final-snapshot || true
        else
          echo "No RDS instances to delete"
        fi
        
        # Delete EBS volumes
        echo "💾 Deleting EBS volumes..."
        if [ "${{ github.event.inputs.cleanup_scope }}" = "health-app-only" ]; then
          VOLUMES=$(aws ec2 describe-volumes --filters "Name=tag:Name,Values=*health-app*" "Name=state,Values=available" --query "Volumes[].VolumeId" --output text)
        else
          VOLUMES=$(aws ec2 describe-volumes --filters "Name=state,Values=available" --query "Volumes[].VolumeId" --output text)
        fi
        
        if [ -n "$VOLUMES" ]; then
          echo "Deleting volumes: $VOLUMES"
          echo $VOLUMES | xargs -n1 aws ec2 delete-volume --volume-id || true
        else
          echo "No volumes to delete"
        fi
        
        # Wait before deleting security groups
        echo "⏳ Waiting 30 seconds before security group cleanup..."
        sleep 30
        
        # Delete security groups
        echo "🛡️ Deleting security groups..."
        if [ "${{ github.event.inputs.cleanup_scope }}" = "health-app-only" ]; then
          SECURITY_GROUPS=$(aws ec2 describe-security-groups --filters "Name=group-name,Values=*health-app*,*dev-lower*,*prod-higher*,*github-runner*" --query "SecurityGroups[?GroupName!='default'].GroupId" --output text)
        else
          SECURITY_GROUPS=$(aws ec2 describe-security-groups --query "SecurityGroups[?GroupName!='default'].GroupId" --output text)
        fi
        
        if [ -n "$SECURITY_GROUPS" ]; then
          echo "Deleting security groups: $SECURITY_GROUPS"
          echo $SECURITY_GROUPS | xargs -n1 aws ec2 delete-security-group --group-id || true
        else
          echo "No security groups to delete"
        fi
        
        # Delete key pairs
        echo "🔑 Deleting key pairs..."
        if [ "${{ github.event.inputs.cleanup_scope }}" = "health-app-only" ]; then
          KEY_PAIRS=$(aws ec2 describe-key-pairs --filters "Name=key-name,Values=*health-app*,*dev-lower*,*prod-higher*" --query "KeyPairs[].KeyName" --output text)
        else
          KEY_PAIRS=$(aws ec2 describe-key-pairs --query "KeyPairs[].KeyName" --output text)
        fi
        
        if [ -n "$KEY_PAIRS" ]; then
          echo "Deleting key pairs: $KEY_PAIRS"
          echo $KEY_PAIRS | xargs -n1 aws ec2 delete-key-pair --key-name || true
        else
          echo "No key pairs to delete"
        fi
        
        # Delete DB subnet groups
        echo "🌐 Deleting DB subnet groups..."
        if [ "${{ github.event.inputs.cleanup_scope }}" = "health-app-only" ]; then
          DB_SUBNET_GROUPS=$(aws rds describe-db-subnet-groups --query "DBSubnetGroups[?contains(DBSubnetGroupName, 'health-app') || contains(DBSubnetGroupName, 'dev-lower') || contains(DBSubnetGroupName, 'prod-higher')].DBSubnetGroupName" --output text)
        else
          DB_SUBNET_GROUPS=$(aws rds describe-db-subnet-groups --query "DBSubnetGroups[?DBSubnetGroupName!='default'].DBSubnetGroupName" --output text)
        fi
        
        if [ -n "$DB_SUBNET_GROUPS" ]; then
          echo "Deleting DB subnet groups: $DB_SUBNET_GROUPS"
          echo $DB_SUBNET_GROUPS | xargs -n1 aws rds delete-db-subnet-group --db-subnet-group-name || true
        else
          echo "No DB subnet groups to delete"
        fi
        
        echo "✅ Emergency cleanup completed!"

    - name: Verify Cleanup
      run: |
        echo "🔍 Verifying cleanup results..."
        
        echo "📊 Remaining EC2 instances:"
        aws ec2 describe-instances --filters "Name=instance-state-name,Values=running,stopped,stopping" --query "Reservations[].Instances[].[InstanceId,State.Name,Tags[?Key=='Name'].Value|[0]]" --output table || echo "No instances found"
        
        echo ""
        echo "📊 Remaining RDS instances:"
        aws rds describe-db-instances --query "DBInstances[].[DBInstanceIdentifier,DBInstanceStatus]" --output table || echo "No RDS instances found"
        
        echo ""
        echo "📊 Remaining EBS volumes:"
        aws ec2 describe-volumes --filters "Name=state,Values=available,in-use" --query "Volumes[].[VolumeId,State,Size]" --output table || echo "No volumes found"
        
        echo ""
        echo "📊 Remaining security groups:"
        aws ec2 describe-security-groups --query "SecurityGroups[?GroupName!='default'].[GroupId,GroupName]" --output table || echo "Only default security groups remain"

    - name: Summary
      if: always()
      run: |
        echo "## 🚨 Emergency Cleanup Summary" >> $GITHUB_STEP_SUMMARY
        echo "**Scope:** ${{ github.event.inputs.cleanup_scope }}" >> $GITHUB_STEP_SUMMARY
        echo "**Status:** ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
        echo "**Date:** $(date)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### ✅ Cleanup Actions Performed:" >> $GITHUB_STEP_SUMMARY
        echo "- Terminated EC2 instances" >> $GITHUB_STEP_SUMMARY
        echo "- Deleted RDS instances" >> $GITHUB_STEP_SUMMARY
        echo "- Deleted EBS volumes" >> $GITHUB_STEP_SUMMARY
        echo "- Deleted security groups" >> $GITHUB_STEP_SUMMARY
        echo "- Deleted key pairs" >> $GITHUB_STEP_SUMMARY
        echo "- Deleted DB subnet groups" >> $GITHUB_STEP_SUMMARY