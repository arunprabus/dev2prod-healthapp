name: Infrastructure

on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Infrastructure Action'
        required: true
        type: choice
        options:
        - deploy
        - destroy
        - plan
      environment:
        description: 'Target Environment'
        required: true
        default: 'dev'
        type: choice
        options:
        - dev
        - test
        - prod
        - monitoring
        - all
      confirm_destroy:
        description: 'Type "DESTROY" to confirm deletion (for destroy action)'
        required: false
        type: string

env:
  AWS_REGION: ap-south-1
  TERRAFORM_VERSION: 1.6.0
  TF_STATE_BUCKET: "health-app-terraform-state"

jobs:
  infrastructure:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        env: ${{ github.event.inputs.environment == 'all' && fromJson('["dev", "test", "prod", "monitoring"]') || fromJson(format('["{0}"]', github.event.inputs.environment)) }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TERRAFORM_VERSION }}

    - name: Create Terraform state bucket
      if: github.event.inputs.action != 'destroy'
      run: |
        if ! aws s3api head-bucket --bucket $TF_STATE_BUCKET 2>/dev/null; then
          aws s3 mb s3://$TF_STATE_BUCKET --region $AWS_REGION
          aws s3api put-bucket-versioning --bucket $TF_STATE_BUCKET --versioning-configuration Status=Enabled
        fi

    - name: Terraform Init
      working-directory: infra
      run: |
        terraform init \
          -backend-config="bucket=$TF_STATE_BUCKET" \
          -backend-config="key=health-app-${{ matrix.env }}.tfstate" \
          -backend-config="region=$AWS_REGION"

    - name: Terraform Validate
      working-directory: infra
      run: terraform validate

    - name: Terraform Plan
      working-directory: infra
      if: github.event.inputs.action == 'plan' || github.event.inputs.action == 'deploy'
      run: |
        terraform plan \
          -var-file="environments/${{ matrix.env }}.tfvars" \
          -var="ssh_public_key=${{ secrets.SSH_PUBLIC_KEY }}" \
          -out=tfplan

    - name: Untaint Resources
      working-directory: infra
      if: github.event.inputs.action == 'deploy'
      run: |
        # Untaint any tainted resources to avoid unnecessary recreation
        terraform untaint module.rds.aws_cloudwatch_event_rule.rds_backup_schedule[0] 2>/dev/null || true
        terraform untaint module.vpc.aws_vpc.main 2>/dev/null || true
        terraform untaint module.k3s.aws_key_pair.main 2>/dev/null || true
        terraform untaint module.rds.aws_db_parameter_group.health_db 2>/dev/null || true

    - name: Regenerate Plan After Untaint
      working-directory: infra
      if: github.event.inputs.action == 'deploy'
      run: |
        terraform plan \
          -var-file="environments/${{ matrix.env }}.tfvars" \
          -var="ssh_public_key=${{ secrets.SSH_PUBLIC_KEY }}" \
          -out=tfplan

    - name: Terraform Apply
      working-directory: infra
      if: github.event.inputs.action == 'deploy'
      run: terraform apply -auto-approve tfplan

    - name: Terraform Destroy
      working-directory: infra
      if: github.event.inputs.action == 'destroy' && github.event.inputs.confirm_destroy == 'DESTROY'
      run: |
        terraform destroy \
          -var-file="environments/${{ matrix.env }}.tfvars" \
          -var="ssh_public_key=${{ secrets.SSH_PUBLIC_KEY }}" \
          -auto-approve

    - name: Destroy Confirmation Check
      if: github.event.inputs.action == 'destroy' && github.event.inputs.confirm_destroy != 'DESTROY'
      run: |
        echo "❌ Destroy cancelled - must type 'DESTROY' to confirm"
        exit 1

    - name: Output Summary
      if: always()
      run: |
        echo "## 🏗️ Infrastructure ${{ github.event.inputs.action }} - ${{ matrix.env }}" >> $GITHUB_STEP_SUMMARY
        echo "* Environment: ${{ matrix.env }}" >> $GITHUB_STEP_SUMMARY
        echo "* Action: ${{ github.event.inputs.action }}" >> $GITHUB_STEP_SUMMARY
        echo "* Status: ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
        echo "* Triggered by: ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY