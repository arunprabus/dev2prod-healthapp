name: Kubernetes Deployment

on:
  repository_dispatch:
    types: [app-deploy]
  workflow_dispatch:
    inputs:
      app:
        description: 'Application name'
        required: true
        default: 'health-api'
        type: string
      image:
        description: 'Container image'
        required: true
        type: string
      environment:
        description: 'Target environment'
        required: true
        default: 'dev'
        type: choice
        options:
        - dev
        - test
        - prod

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup kubectl
      run: |
        curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
        chmod +x kubectl
        sudo mv kubectl /usr/local/bin/
        mkdir -p ~/.kube

    - name: Configure kubeconfig
      run: |
        ENV="${{ github.event.client_payload.environment || github.event.inputs.environment }}"
        
        if [[ "$ENV" == "dev" && -n "${{ secrets.KUBECONFIG_DEV }}" ]]; then
          echo "Using DEV kubeconfig"
          echo "${{ secrets.KUBECONFIG_DEV }}" | base64 -d > ~/.kube/config
        elif [[ "$ENV" == "test" && -n "${{ secrets.KUBECONFIG_TEST }}" ]]; then
          echo "Using TEST kubeconfig"
          echo "${{ secrets.KUBECONFIG_TEST }}" | base64 -d > ~/.kube/config
        elif [[ "$ENV" == "prod" && -n "${{ secrets.KUBECONFIG_PROD }}" ]]; then
          echo "Using PROD kubeconfig"
          echo "${{ secrets.KUBECONFIG_PROD }}" | base64 -d > ~/.kube/config
        else
          echo "Using default kubeconfig"
          echo "${{ secrets.KUBECONFIG }}" | base64 -d > ~/.kube/config
        fi
        
        chmod 600 ~/.kube/config

    - name: Extract deployment info
      id: deploy-info
      run: |
        APP="${{ github.event.client_payload.app || github.event.inputs.app }}"
        IMAGE="${{ github.event.client_payload.image || github.event.inputs.image }}"
        ENV="${{ github.event.client_payload.environment || github.event.inputs.environment }}"
        
        echo "app=$APP" >> $GITHUB_OUTPUT
        echo "image=$IMAGE" >> $GITHUB_OUTPUT
        echo "environment=$ENV" >> $GITHUB_OUTPUT
        
        echo "Deploying: $APP"
        echo "Image: $IMAGE"
        echo "Environment: $ENV"

    - name: Verify cluster connection
      run: |
        kubectl cluster-info
        kubectl get nodes

    - name: Deploy application
      run: |
        APP="${{ steps.deploy-info.outputs.app }}"
        IMAGE="${{ steps.deploy-info.outputs.image }}"
        ENV="${{ steps.deploy-info.outputs.environment }}"
        
        NAMESPACE="health-app-${ENV}"
        
        # Create namespace if it doesn't exist
        kubectl create namespace $NAMESPACE --dry-run=client -o yaml | kubectl apply -f -
        
        # Update deployment using kubectl set image
        kubectl set image deployment/$APP $APP=$IMAGE -n $NAMESPACE
        
        # Wait for rollout
        kubectl rollout status deployment/$APP -n $NAMESPACE --timeout=300s

    - name: Verify deployment
      run: |
        APP="${{ steps.deploy-info.outputs.app }}"
        ENV="${{ steps.deploy-info.outputs.environment }}"
        NAMESPACE="health-app-${ENV}"
        
        echo "Pod status:"
        kubectl get pods -l app=$APP -n $NAMESPACE
        
        echo "Service status:"
        kubectl get services -l app=$APP -n $NAMESPACE

    - name: Generate summary
      if: always()
      run: |
        APP="${{ steps.deploy-info.outputs.app }}"
        IMAGE="${{ steps.deploy-info.outputs.image }}"
        ENV="${{ steps.deploy-info.outputs.environment }}"
        
        echo "## ðŸš€ Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "* Application: $APP" >> $GITHUB_STEP_SUMMARY
        echo "* Image: $IMAGE" >> $GITHUB_STEP_SUMMARY
        echo "* Environment: $ENV" >> $GITHUB_STEP_SUMMARY
        echo "* Status: ${{ job.status }}" >> $GITHUB_STEP_SUMMARY