name: üîó Network Connectivity Test

on:
  workflow_dispatch:
    inputs:
      network_tier:
        description: 'Network tier to test'
        required: true
        default: 'lower'
        type: choice
        options:
        - lower
        - higher
        - monitoring
      test_type:
        description: 'Type of connectivity test'
        required: true
        default: 'basic'
        type: choice
        options:
        - basic
        - k3s-api
        - database
        - full
        - k3s-setup

jobs:
  connectivity-test:
    name: Test Network Connectivity
    runs-on: self-hosted
    
    steps:
    - name: üè∑Ô∏è Verify Runner Network
      run: |
        echo "Expected network: ${{ inputs.network_tier }}"
        echo "Runner hostname: $(hostname)"
        echo "‚úÖ Runner verification completed"
        
    - name: üîç Test Basic Connectivity
      if: inputs.test_type == 'basic' || inputs.test_type == 'full'
      run: |
        echo "=== Basic Connectivity Test ==="
        echo "Runner Network: ${{ inputs.network_tier }}"
        echo "Runner IP: $(curl -s http://169.254.169.254/latest/meta-data/local-ipv4 || echo 'N/A')"
        
        echo "=== Internet Connectivity ==="
        ping -c 3 8.8.8.8 && echo "‚úÖ Internet accessible" || echo "‚ùå Internet failed"
        curl -s --connect-timeout 10 https://api.github.com/rate_limit > /dev/null && echo "‚úÖ GitHub API accessible" || echo "‚ùå GitHub API failed"

    - name: üéØ Test K3s API Connectivity
      if: inputs.test_type == 'k3s-api' || inputs.test_type == 'full'
      run: |
        echo "=== K3s API Connectivity Test ==="
        
        # Get K3s cluster IP from AWS
        case "${{ inputs.network_tier }}" in
          "lower")
            K3S_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=health-app-lower-k3s-master" "Name=instance-state-name,Values=running" \
              --query "Reservations[*].Instances[*].PrivateIpAddress" \
              --output text)
            ;;
          "higher")
            K3S_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=health-app-higher-k3s-master" "Name=instance-state-name,Values=running" \
              --query "Reservations[*].Instances[*].PrivateIpAddress" \
              --output text)
            ;;
          "monitoring")
            K3S_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=health-app-monitoring-k3s-master" "Name=instance-state-name,Values=running" \
              --query "Reservations[*].Instances[*].PrivateIpAddress" \
              --output text)
            ;;
        esac
        
        if [ -z "$K3S_IP" ]; then
          echo "‚ùå No K3s cluster found for ${{ inputs.network_tier }} network"
        else
          echo "Testing K3s cluster at $K3S_IP"
          timeout 10 nc -z $K3S_IP 22 && echo "‚úÖ SSH port accessible" || echo "‚ùå SSH port not accessible"
          timeout 10 nc -z $K3S_IP 6443 && echo "‚úÖ K3s API port accessible" || echo "‚ùå K3s API port not accessible"
        fi

    - name: üíæ Test Database Connectivity
      if: inputs.test_type == 'database' || inputs.test_type == 'full'
      run: |
        echo "=== Database Connectivity Test ==="
        
        case "${{ inputs.network_tier }}" in
          "lower")
            DB_ENDPOINT=$(aws rds describe-db-instances \
              --db-instance-identifier health-app-shared-db \
              --query "DBInstances[0].Endpoint.Address" \
              --output text 2>/dev/null || echo "")
            ;;
          "higher")
            DB_ENDPOINT=$(aws rds describe-db-instances \
              --db-instance-identifier health-app-prod-db \
              --query "DBInstances[0].Endpoint.Address" \
              --output text 2>/dev/null || echo "")
            ;;
          "monitoring")
            echo "Monitoring network doesn't have database"
            exit 0
            ;;
        esac
        
        if [ -z "$DB_ENDPOINT" ] || [ "$DB_ENDPOINT" = "None" ]; then
          echo "‚ùå No database found for ${{ inputs.network_tier }} network"
        else
          echo "Testing database at $DB_ENDPOINT"
          timeout 10 nc -z $DB_ENDPOINT 5432 && echo "‚úÖ Database port accessible" || echo "‚ùå Database port not accessible"
        fi

    - name: üîß K3s Setup (Optional)
      if: inputs.test_type == 'k3s-setup'
      run: |
        echo "=== K3s Setup (Optional) ==="
        echo "‚ö†Ô∏è This step is optional and may fail due to network restrictions"
        
        # Get K3s cluster IP
        case "${{ inputs.network_tier }}" in
          "lower")
            K3S_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=health-app-lower-k3s-master" "Name=instance-state-name,Values=running" \
              --query "Reservations[*].Instances[*].PrivateIpAddress" \
              --output text)
            ;;
          "higher")
            K3S_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=health-app-higher-k3s-master" "Name=instance-state-name,Values=running" \
              --query "Reservations[*].Instances[*].PrivateIpAddress" \
              --output text)
            ;;
          "monitoring")
            K3S_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=health-app-monitoring-k3s-master" "Name=instance-state-name,Values=running" \
              --query "Reservations[*].Instances[*].PrivateIpAddress" \
              --output text)
            ;;
        esac
        
        if [ -z "$K3S_IP" ]; then
          echo "‚ùå No K3s cluster found - skipping setup"
          exit 0
        fi
        
        echo "Found K3s cluster at: $K3S_IP"
        
        # Test basic connectivity (non-blocking)
        if ping -c 2 $K3S_IP > /dev/null 2>&1; then
          echo "‚úÖ K3s cluster is reachable"
          echo "‚ÑπÔ∏è K3s setup would be possible with proper network configuration"
        else
          echo "‚ùå K3s cluster not reachable from this runner"
          echo "‚ÑπÔ∏è This is expected due to network isolation"
        fi
        
        echo "‚úÖ K3s setup check completed (non-blocking)"

    - name: üìä Generate Report
      if: always()
      run: |
        echo "=== Connectivity Test Report ==="
        echo "Date: $(date)"
        echo "Network: ${{ inputs.network_tier }}"
        echo "Test Type: ${{ inputs.test_type }}"
        echo "Runner: $(hostname)"
        echo "‚úÖ Connectivity tests completed"