name: üîß Post-Infrastructure Setup & Connectivity Test

on:
  workflow_dispatch:
    inputs:
      network_tier:
        description: 'Network tier to test'
        required: true
        default: 'lower'
        type: choice
        options:
          - lower
          - higher
          - monitoring
      test_type:
        description: 'Type of connectivity test'
        required: true
        default: 'basic'
        type: choice
        options:
          - basic
          - k3s-api
          - database
          - full
          - post-infra-setup

jobs:
  connectivity-test:
    name: Test Network Connectivity
    runs-on: ubuntu-latest
    env:
      NETWORK_TIER: ${{ inputs.network_tier }}
      TEST_TYPE: ${{ inputs.test_type }}

    steps:
      - name: üîß Install AWS CLI
        run: |
          if ! command -v aws &> /dev/null; then
            echo "Installing AWS CLI..."
            sudo apt-get update -qq
            sudo apt-get install -y unzip curl
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip -q awscliv2.zip
            sudo ./aws/install
            rm -rf aws awscliv2.zip
            echo "AWS CLI installed: $(aws --version)"
          else
            echo "AWS CLI already available: $(aws --version)"
          fi

      - name: üîë Configure AWS Credentials
        run: |
          aws configure set aws_access_key_id "${{ secrets.AWS_ACCESS_KEY_ID }}"
          aws configure set aws_secret_access_key "${{ secrets.AWS_SECRET_ACCESS_KEY }}"
          aws configure set default.region "ap-south-1"
          echo "‚úÖ AWS credentials configured"

      - name: üè∑Ô∏è Verify Runner Network
        run: |
          echo "Expected network: $NETWORK_TIER"
          echo "Runner hostname: $(hostname)"
          echo "‚úÖ Runner verification completed"

      - name: üîç Test Basic Connectivity
        if: ${{ inputs.test_type == 'basic' || inputs.test_type == 'full' }}
        run: |
          echo "=== Basic Connectivity Test ==="
          echo "Runner Network: $NETWORK_TIER"
          echo "Runner IP: $(curl -s http://169.254.169.254/latest/meta-data/local-ipv4 || echo 'N/A')"
          
          echo "=== Internet Connectivity ==="
          ping -c 3 8.8.8.8 && echo "‚úÖ Internet accessible" || echo "‚ùå Internet failed"
          curl -s --connect-timeout 10 https://api.github.com/rate_limit > /dev/null && echo "‚úÖ GitHub API accessible" || echo "‚ùå GitHub API failed"

      - name: üéØ Test K3s API Connectivity
        if: ${{ inputs.test_type == 'k3s-api' || inputs.test_type == 'full' }}
        run: |
          echo "=== K3s API Connectivity Test ==="
          
          case "$NETWORK_TIER" in
            lower)
              TAG_NAME="health-app-lower-k3s-node"
              ;;
            higher)
              TAG_NAME="health-app-higher-k3s-node"
              ;;
            monitoring)
              TAG_NAME="health-app-monitoring-k3s-node"
              ;;
          esac
          
          if command -v aws &> /dev/null; then
            K3S_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=$TAG_NAME" "Name=instance-state-name,Values=running" \
              --query "Reservations[*].Instances[*].PrivateIpAddress" --output text 2>/dev/null || echo "")
            
            if [ -z "$K3S_IP" ] || [ "$K3S_IP" = "None" ]; then
              echo "‚ùå No K3s cluster found for $NETWORK_TIER network"
            else
              echo "Testing K3s cluster at $K3S_IP"
              timeout 10 bash -c "nc -z $K3S_IP 22" && echo "‚úÖ SSH port accessible" || echo "‚ùå SSH port not accessible"
              timeout 10 bash -c "nc -z $K3S_IP 6443" && echo "‚úÖ K3s API port accessible" || echo "‚ùå K3s API port not accessible"
            fi
          else
            echo "‚ùå AWS CLI not available - skipping K3s connectivity test"
          fi

      - name: üíæ Test Database Connectivity
        if: ${{ inputs.test_type == 'database' || inputs.test_type == 'full' }}
        run: |
          echo "=== Database Connectivity Test ==="
          
          case "$NETWORK_TIER" in
            lower)
              DB_ID="health-app-shared-db"
              ;;
            higher)
              DB_ID="health-app-prod-db"
              ;;
            monitoring)
              echo "Monitoring network doesn't have a database"
              exit 0
              ;;
          esac
          
          if command -v aws &> /dev/null; then
            DB_ENDPOINT=$(aws rds describe-db-instances \
              --db-instance-identifier "$DB_ID" \
              --query "DBInstances[0].Endpoint.Address" --output text 2>/dev/null || echo "")
            
            if [ -z "$DB_ENDPOINT" ] || [ "$DB_ENDPOINT" = "None" ]; then
              echo "‚ùå No database found for $NETWORK_TIER network"
            else
              echo "Testing database at $DB_ENDPOINT"
              timeout 10 bash -c "nc -z $DB_ENDPOINT 5432" && echo "‚úÖ Database port accessible" || echo "‚ùå Database port not accessible"
            fi
          else
            echo "‚ùå AWS CLI not available - skipping database connectivity test"
          fi

      - name: üîß Post-Infrastructure Setup
        if: ${{ inputs.test_type == 'post-infra-setup' }}
        run: |
          echo "=== Post-Infrastructure Setup & Configuration ==="
          
          case "$NETWORK_TIER" in
            lower)
              TAG_NAME="health-app-lower-k3s-node"
              SECRET_NAME="KUBECONFIG_DEV"
              ;;
            higher)
              TAG_NAME="health-app-higher-k3s-node"
              SECRET_NAME="KUBECONFIG_PROD"
              ;;
            monitoring)
              TAG_NAME="health-app-monitoring-k3s-node"
              SECRET_NAME="KUBECONFIG_MONITORING"
              ;;
          esac
          
          if ! command -v aws &> /dev/null; then
            echo "‚ùå AWS CLI not available - skipping K3s setup"
            exit 0
          fi
          
          # Debug: Check what instances exist
          echo "Looking for instances with tag: $TAG_NAME"
          aws ec2 describe-instances --filters "Name=tag:Name,Values=$TAG_NAME" --query "Reservations[*].Instances[*].[InstanceId,State.Name,PublicIpAddress,PrivateIpAddress]" --output table
          
          # Get K3s cluster IP (try public first, then private)
          K3S_IP=$(aws ec2 describe-instances \
            --filters "Name=tag:Name,Values=$TAG_NAME" "Name=instance-state-name,Values=running" \
            --query "Reservations[*].Instances[*].PublicIpAddress" --output text 2>/dev/null || echo "")
          
          if [ -z "$K3S_IP" ] || [ "$K3S_IP" = "None" ]; then
            echo "No public IP found, trying private IP..."
            K3S_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=$TAG_NAME" "Name=instance-state-name,Values=running" \
              --query "Reservations[*].Instances[*].PrivateIpAddress" --output text 2>/dev/null || echo "")
          fi
          
          if [ -z "$K3S_IP" ] || [ "$K3S_IP" = "None" ]; then
            echo "‚ùå No K3s cluster found - skipping setup"
            exit 0
          fi
          
          echo "Found K3s cluster at: $K3S_IP"
          
          # Test connectivity
          if ! ping -c 2 "$K3S_IP" > /dev/null 2>&1; then
            echo "‚ùå K3s cluster not reachable - skipping configuration"
            exit 0
          fi
          
          echo "‚úÖ K3s cluster is reachable"
          
          # Setup SSH key
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/k3s_key
          chmod 600 ~/.ssh/k3s_key
          
          # Wait for SSH to be ready
          echo "Waiting for SSH to be ready..."
          for i in {1..10}; do
            if ssh -i ~/.ssh/k3s_key -o StrictHostKeyChecking=no -o ConnectTimeout=10 ubuntu@$K3S_IP "echo 'SSH ready'" 2>/dev/null; then
              echo "‚úÖ SSH connection established (attempt $i)"
              break
            else
              echo "SSH not ready, waiting... (attempt $i/10)"
              if [ $i -eq 10 ]; then
                echo "‚ùå SSH connection failed after 10 attempts"
                exit 0
              fi
              sleep 10
            fi
          done
          
          # Download kubeconfig
          echo "Downloading kubeconfig..."
          if scp -i ~/.ssh/k3s_key -o StrictHostKeyChecking=no ubuntu@$K3S_IP:/etc/rancher/k3s/k3s.yaml ./kubeconfig-$NETWORK_TIER 2>/dev/null; then
            # Update server IP in kubeconfig
            sed -i "s/127.0.0.1/$K3S_IP/g" ./kubeconfig-$NETWORK_TIER
            
            # Test kubeconfig
            export KUBECONFIG=./kubeconfig-$NETWORK_TIER
            if kubectl cluster-info --request-timeout=10s > /dev/null 2>&1; then
              echo "‚úÖ Kubeconfig is working"
              kubectl get nodes
              
              # Create GitHub secret
              if command -v gh &> /dev/null; then
                KUBECONFIG_B64=$(base64 -w 0 ./kubeconfig-$NETWORK_TIER)
                echo "$KUBECONFIG_B64" | gh secret set $SECRET_NAME
                echo "‚úÖ GitHub secret $SECRET_NAME created"
              else
                echo "‚ö†Ô∏è GitHub CLI not available - kubeconfig saved locally"
              fi
            else
              echo "‚ùå Kubeconfig test failed"
            fi
            
            # Cleanup
            rm -f ./kubeconfig-$NETWORK_TIER
          else
            echo "‚ùå Failed to download kubeconfig"
          fi
          
          # Cleanup SSH key
          rm -f ~/.ssh/k3s_key
          
          echo "‚úÖ Post-infrastructure setup completed"

      - name: üìä Generate Report
        if: always()
        run: |
          echo "=== Connectivity Test Report ==="
          echo "Date: $(date)"
          echo "Network: $NETWORK_TIER"
          echo "Test Type: $TEST_TYPE"
          echo "Runner: $(hostname)"
          echo "‚úÖ Connectivity tests completed"
