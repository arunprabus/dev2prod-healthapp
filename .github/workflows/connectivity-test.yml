name: üîó Network Connectivity Test

on:
  workflow_dispatch:
    inputs:
      network_tier:
        description: 'Network tier to test'
        required: true
        default: 'lower'
        type: choice
        options:
        - lower
        - higher
        - monitoring
      test_type:
        description: 'Type of connectivity test'
        required: true
        default: 'basic'
        type: choice
        options:
        - basic
        - k3s-api
        - database
        - full
        - k3s-setup

jobs:
  connectivity-test:
    name: Test Network Connectivity
    runs-on: self-hosted
    
    steps:
    - name: üè∑Ô∏è Verify Runner Network
      run: |
        echo "Expected network: ${{ inputs.network_tier }}"
        echo "Runner hostname: $(hostname)"
        echo "Runner labels should include: github-runner-${{ inputs.network_tier }}"
        
        # Verify we're on the correct network runner
        if ! hostname | grep -q "${{ inputs.network_tier }}"; then
          echo "‚ö†Ô∏è Warning: Runner may not be on expected network tier"
        fi
        
    - name: üîç Test Basic Connectivity
      if: inputs.test_type == 'basic' || inputs.test_type == 'full'
      run: |
        echo "=== Basic Connectivity Test ==="
        echo "Runner Network: ${{ inputs.network_tier }}"
        echo "Runner IP: $(curl -s http://169.254.169.254/latest/meta-data/local-ipv4)"
        echo "Public IP: $(curl -s http://169.254.169.254/latest/meta-data/public-ipv4)"
        
        echo "=== Internet Connectivity ==="
        ping -c 3 8.8.8.8 || echo "‚ùå Internet connectivity failed"
        curl -s --connect-timeout 10 https://api.github.com/rate_limit > /dev/null && echo "‚úÖ GitHub API accessible" || echo "‚ùå GitHub API failed"
        
        echo "=== VPC Internal Connectivity ==="
        # Test connectivity to other subnets in same VPC
        case "${{ inputs.network_tier }}" in
          "lower")
            echo "Testing lower network (10.0.0.0/16)"
            ping -c 2 -W 2 10.0.1.1 && echo "‚úÖ K3s subnet reachable" || echo "‚ùå K3s subnet unreachable"
            ;;
          "higher") 
            echo "Testing higher network (10.1.0.0/16)"
            ping -c 2 -W 2 10.1.1.1 && echo "‚úÖ K3s subnet reachable" || echo "‚ùå K3s subnet unreachable"
            ;;
          "monitoring")
            echo "Testing monitoring network (10.3.0.0/16)"
            ping -c 2 -W 2 10.3.1.1 && echo "‚úÖ K3s subnet reachable" || echo "‚ùå K3s subnet unreachable"
            ;;
        esac

    - name: üéØ Test K3s API Connectivity
      if: inputs.test_type == 'k3s-api' || inputs.test_type == 'full'
      run: |
        echo "=== K3s API Connectivity Test ==="
        
        # Get K3s cluster IP from AWS
        case "${{ inputs.network_tier }}" in
          "lower")
            K3S_IPS=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=health-app-lower-k3s-master" "Name=instance-state-name,Values=running" \
              --query "Reservations[*].Instances[*].PrivateIpAddress" \
              --output text)
            ;;
          "higher")
            K3S_IPS=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=health-app-higher-k3s-master" "Name=instance-state-name,Values=running" \
              --query "Reservations[*].Instances[*].PrivateIpAddress" \
              --output text)
            ;;
          "monitoring")
            K3S_IPS=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=health-app-monitoring-k3s-master" "Name=instance-state-name,Values=running" \
              --query "Reservations[*].Instances[*].PrivateIpAddress" \
              --output text)
            ;;
        esac
        
        if [ -z "$K3S_IPS" ]; then
          echo "‚ùå No K3s clusters found for ${{ inputs.network_tier }} network"
          exit 1
        fi
        
        for K3S_IP in $K3S_IPS; do
          echo "Testing K3s cluster at $K3S_IP"
          
          # Test SSH connectivity
          timeout 10 nc -z $K3S_IP 22 && echo "‚úÖ SSH port (22) accessible" || echo "‚ùå SSH port (22) not accessible"
          
          # Test K3s API connectivity
          timeout 10 nc -z $K3S_IP 6443 && echo "‚úÖ K3s API port (6443) accessible" || echo "‚ùå K3s API port (6443) not accessible"
          
          # Test actual API call if kubeconfig exists
          if [ -f ~/.kube/config-${{ inputs.network_tier }} ]; then
            echo "Testing K3s API with kubeconfig..."
            kubectl --kubeconfig ~/.kube/config-${{ inputs.network_tier }} get nodes --request-timeout=10s && echo "‚úÖ K3s API responding" || echo "‚ùå K3s API not responding"
          fi
        done

    - name: üíæ Test Database Connectivity
      if: inputs.test_type == 'database' || inputs.test_type == 'full'
      run: |
        echo "=== Database Connectivity Test ==="
        
        # Get RDS endpoint from AWS
        case "${{ inputs.network_tier }}" in
          "lower")
            DB_ENDPOINT=$(aws rds describe-db-instances \
              --db-instance-identifier health-app-shared-db \
              --query "DBInstances[0].Endpoint.Address" \
              --output text 2>/dev/null || echo "")
            ;;
          "higher")
            DB_ENDPOINT=$(aws rds describe-db-instances \
              --db-instance-identifier health-app-prod-db \
              --query "DBInstances[0].Endpoint.Address" \
              --output text 2>/dev/null || echo "")
            ;;
          "monitoring")
            echo "Monitoring network doesn't have database"
            exit 0
            ;;
        esac
        
        if [ -z "$DB_ENDPOINT" ] || [ "$DB_ENDPOINT" = "None" ]; then
          echo "‚ùå No database found for ${{ inputs.network_tier }} network"
          exit 1
        fi
        
        echo "Testing database at $DB_ENDPOINT"
        
        # Test database port connectivity
        timeout 10 nc -z $DB_ENDPOINT 5432 && echo "‚úÖ Database port (5432) accessible" || echo "‚ùå Database port (5432) not accessible"

    - name: üîß K3s Setup and Configuration
      if: inputs.test_type == 'k3s-setup'
      run: |
        echo "=== K3s Setup and Configuration ==="
        
        # Get K3s cluster IP from AWS
        case "${{ inputs.network_tier }}" in
          "lower")
            K3S_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=health-app-lower-k3s-master" "Name=instance-state-name,Values=running" \
              --query "Reservations[*].Instances[*].PrivateIpAddress" \
              --output text)
            ;;
          "higher")
            K3S_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=health-app-higher-k3s-master" "Name=instance-state-name,Values=running" \
              --query "Reservations[*].Instances[*].PrivateIpAddress" \
              --output text)
            ;;
          "monitoring")
            K3S_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=health-app-monitoring-k3s-master" "Name=instance-state-name,Values=running" \
              --query "Reservations[*].Instances[*].PrivateIpAddress" \
              --output text)
            ;;
        esac
        
        if [ -z "$K3S_IP" ]; then
          echo "‚ùå No K3s cluster found for ${{ inputs.network_tier }} network"
          exit 1
        fi
        
        echo "Found K3s cluster at: $K3S_IP"
        
        # Test connectivity first
        echo "Testing connectivity to K3s cluster..."
        if ! ping -c 3 $K3S_IP > /dev/null 2>&1; then
          echo "‚ùå Cannot ping K3s cluster at $K3S_IP"
          exit 1
        fi
        echo "‚úÖ Ping successful"
        
        # Wait for SSH to be ready
        echo "Waiting for SSH to be ready..."
        for i in {1..10}; do
          if ssh -o StrictHostKeyChecking=no -o ConnectTimeout=10 ubuntu@$K3S_IP "echo 'SSH ready'" 2>/dev/null; then
            echo "‚úÖ SSH connection established (attempt $i)"
            break
          else
            echo "SSH not ready, waiting... (attempt $i/10)"
            if [ $i -eq 10 ]; then
              echo "‚ùå SSH connection failed after 10 attempts"
              exit 1
            fi
            sleep 30
          fi
        done
        
        # Download kubeconfig
        echo "Downloading kubeconfig..."
        scp -o StrictHostKeyChecking=no ubuntu@$K3S_IP:/etc/rancher/k3s/k3s.yaml ./kubeconfig-${{ inputs.network_tier }}
        
        # Update server IP
        sed -i "s/127.0.0.1/$K3S_IP/g" ./kubeconfig-${{ inputs.network_tier }}
        
        # Test kubeconfig
        export KUBECONFIG=./kubeconfig-${{ inputs.network_tier }}
        if kubectl cluster-info --request-timeout=10s > /dev/null 2>&1; then
          echo "‚úÖ Kubeconfig is working"
          kubectl get nodes
        else
          echo "‚ùå Kubeconfig test failed"
          exit 1
        fi
        
        # Create GitHub secret
        echo "Creating GitHub secret..."
        KUBECONFIG_B64=$(base64 -w 0 ./kubeconfig-${{ inputs.network_tier }})
        
        # Determine secret name based on network tier
        case "${{ inputs.network_tier }}" in
          "lower")
            SECRET_NAME="KUBECONFIG_DEV"
            ;;
          "higher")
            SECRET_NAME="KUBECONFIG_PROD"
            ;;
          "monitoring")
            SECRET_NAME="KUBECONFIG_MONITORING"
            ;;
        esac
        
        # Create the secret using GitHub CLI or API
        if command -v gh &> /dev/null; then
          echo "$KUBECONFIG_B64" | gh secret set $SECRET_NAME
          echo "‚úÖ GitHub secret $SECRET_NAME created using GitHub CLI"
        else
          echo "‚ö†Ô∏è GitHub CLI not available, kubeconfig saved locally as ./kubeconfig-${{ inputs.network_tier }}"
          echo "Manual step: Create GitHub secret $SECRET_NAME with the base64 content"
        fi
        
        echo "üéâ K3s setup completed for ${{ inputs.network_tier }} environment"
        
    - name: üìä Generate Connectivity Report
      if: always()
      run: |
        echo "=== Network Connectivity Report ==="
        echo "Date: $(date)"
        echo "Network Tier: ${{ inputs.network_tier }}"
        echo "Test Type: ${{ inputs.test_type }}"
        echo "Runner: $(hostname)"
        echo "Runner IP: $(curl -s http://169.254.169.254/latest/meta-data/local-ipv4)"
        
        echo "=== Network Configuration ==="
        ip route show | head -10
        
        echo "=== Security Groups ==="
        INSTANCE_ID=$(curl -s http://169.254.169.254/latest/meta-data/instance-id)
        aws ec2 describe-instances --instance-ids $INSTANCE_ID \
          --query "Reservations[*].Instances[*].SecurityGroups[*].GroupName" \
          --output text
        
        echo "=== Subnet Information ==="
        aws ec2 describe-instances --instance-ids $INSTANCE_ID \
          --query "Reservations[*].Instances[*].SubnetId" \
          --output text | xargs -I {} aws ec2 describe-subnets --subnet-ids {} \
          --query "Subnets[*].[SubnetId,CidrBlock,AvailabilityZone]" \
          --output table

  cross-network-test:
    name: Cross-Network Connectivity Test
    runs-on: self-hosted
    if: inputs.network_tier == 'monitoring' && (inputs.test_type == 'full' || inputs.test_type == 'k3s-api')
    
    steps:
    - name: üåê Test Cross-Network Access
      run: |
        echo "=== Cross-Network Connectivity Test ==="
        echo "Testing from monitoring network to other networks"
        
        # Test connectivity to lower network K3s
        echo "Testing lower network K3s..."
        LOWER_K3S_IP=$(aws ec2 describe-instances \
          --filters "Name=tag:Name,Values=health-app-lower-k3s-master" "Name=instance-state-name,Values=running" \
          --query "Reservations[*].Instances[*].PrivateIpAddress" \
          --output text)
        
        if [ ! -z "$LOWER_K3S_IP" ]; then
          timeout 10 nc -z $LOWER_K3S_IP 6443 && echo "‚úÖ Lower K3s API accessible" || echo "‚ùå Lower K3s API not accessible"
        fi
        
        # Test connectivity to higher network K3s
        echo "Testing higher network K3s..."
        HIGHER_K3S_IP=$(aws ec2 describe-instances \
          --filters "Name=tag:Name,Values=health-app-higher-k3s-master" "Name=instance-state-name,Values=running" \
          --query "Reservations[*].Instances[*].PrivateIpAddress" \
          --output text)
        
        if [ ! -z "$HIGHER_K3S_IP" ]; then
          timeout 10 nc -z $HIGHER_K3S_IP 6443 && echo "‚úÖ Higher K3s API accessible" || echo "‚ùå Higher K3s API not accessible"
        fi