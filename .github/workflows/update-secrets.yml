name: Update GitHub Secrets

on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Action to perform'
        required: true
        type: choice
        options:
          - 'list'
          - 'update'
          - 'update-file'
          - 'update-kubeconfig'
          - 'update-ssh-key'
          - 'update-aws-creds'
      secret_name:
        description: 'Secret name or environment (for kubeconfig)'
        required: false
        type: string
      secret_value:
        description: 'Secret value or file path'
        required: false
        type: string
      environment:
        description: 'Target environment'
        required: false
        type: choice
        options:
          - 'dev'
          - 'test'
          - 'prod'
          - 'monitoring'
          - 'lower'
          - 'higher'
          - 'all'
      kubeconfig_file:
        description: 'Kubeconfig file path (for update-kubeconfig)'
        required: false
        type: string
        default: 'kubeconfig-lower.yaml'

jobs:
  update-secrets:
    runs-on: ${{ github.event.inputs.environment == 'lower' && fromJSON('["self-hosted", "github-runner-lower"]') || github.event.inputs.environment == 'higher' && fromJSON('["self-hosted", "github-runner-higher"]') || github.event.inputs.environment == 'monitoring' && fromJSON('["self-hosted", "github-runner-monitoring"]') || 'ubuntu-latest' }}
    
    # This workflow needs write permissions to create secrets
    permissions:
      contents: read
      actions: write
      id-token: write
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-south-1

      - name: Setup SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/k3s-key
          chmod 600 ~/.ssh/k3s-key
          echo "${{ secrets.SSH_PUBLIC_KEY }}" > ~/.ssh/k3s-key.pub
          chmod 644 ~/.ssh/k3s-key.pub

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y python3-pip jq
          pip3 install PyNaCl

      - name: List secrets
        if: ${{ github.event.inputs.action == 'list' }}
        run: |
          chmod +x scripts/update-github-secrets.sh
          ./scripts/update-github-secrets.sh list
        env:
          GITHUB_TOKEN: ${{ secrets.REPO_PAT }}
          REPO_NAME: ${{ github.repository }}

      - name: Update secret
        if: ${{ github.event.inputs.action == 'update' }}
        run: |
          chmod +x scripts/update-github-secrets.sh
          ./scripts/update-github-secrets.sh update "${{ github.event.inputs.secret_name }}" "${{ github.event.inputs.secret_value }}"
        env:
          GITHUB_TOKEN: ${{ secrets.REPO_PAT }}
          REPO_NAME: ${{ github.repository }}

      - name: Update secret from file
        if: ${{ github.event.inputs.action == 'update-file' }}
        run: |
          chmod +x scripts/update-github-secrets.sh
          ./scripts/update-github-secrets.sh update-file "${{ github.event.inputs.secret_name }}" "${{ github.event.inputs.secret_value }}"
        env:
          GITHUB_TOKEN: ${{ secrets.REPO_PAT }}
          REPO_NAME: ${{ github.repository }}

      - name: Update kubeconfig
        if: ${{ github.event.inputs.action == 'update-kubeconfig' }}
        run: |
          chmod +x scripts/update-github-secrets.sh
          
          # If environment is specified, use it, otherwise use secret_name
          ENV="${{ github.event.inputs.environment }}"
          if [ -z "$ENV" ] || [ "$ENV" = "all" ]; then
            ENV="${{ github.event.inputs.secret_name }}"
          fi
          
          # If kubeconfig_file is specified, use it, otherwise use secret_value or default
          KUBECONFIG_FILE="${{ github.event.inputs.kubeconfig_file }}"
          if [ -z "$KUBECONFIG_FILE" ]; then
            KUBECONFIG_FILE="${{ github.event.inputs.secret_value }}"
            if [ -z "$KUBECONFIG_FILE" ]; then
              KUBECONFIG_FILE="kubeconfig-$ENV.yaml"
              
              # If file doesn't exist, try lower/higher
              if [ ! -f "$KUBECONFIG_FILE" ]; then
                if [ "$ENV" = "dev" ] || [ "$ENV" = "test" ]; then
                  KUBECONFIG_FILE="kubeconfig-lower.yaml"
                elif [ "$ENV" = "prod" ]; then
                  KUBECONFIG_FILE="kubeconfig-higher.yaml"
                fi
              fi
            fi
          fi
          
          echo "ðŸ”§ Updating kubeconfig for $ENV using $KUBECONFIG_FILE"
          ./scripts/update-github-secrets.sh update-kubeconfig "$ENV" "$KUBECONFIG_FILE"
        env:
          GITHUB_TOKEN: ${{ secrets.REPO_PAT }}
          REPO_NAME: ${{ github.repository }}

      - name: Update SSH keys
        if: ${{ github.event.inputs.action == 'update-ssh-key' }}
        run: |
          chmod +x scripts/update-github-secrets.sh
          ./scripts/update-github-secrets.sh update-ssh-key
        env:
          GITHUB_TOKEN: ${{ secrets.REPO_PAT }}
          REPO_NAME: ${{ github.repository }}

      - name: Update AWS credentials
        if: ${{ github.event.inputs.action == 'update-aws-creds' }}
        run: |
          chmod +x scripts/update-github-secrets.sh
          ./scripts/update-github-secrets.sh update-aws-creds
        env:
          GITHUB_TOKEN: ${{ secrets.REPO_PAT }}
          REPO_NAME: ${{ github.repository }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}