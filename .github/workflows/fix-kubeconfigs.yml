name: Fix Kubeconfigs

on:
  workflow_dispatch:
    inputs:
      network:
        description: 'Network environment'
        required: true
        type: choice
        options:
          - lower
          - higher
          - monitoring
        default: 'lower'

jobs:
  fix-kubeconfigs:
    runs-on: self-hosted
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Configure AWS CLI
        run: |
          # Install dependencies
          sudo apt update
          sudo apt install -y unzip curl
          
          # Install AWS CLI if not present
          if ! command -v aws &> /dev/null; then
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip -q awscliv2.zip
            sudo ./aws/install
          fi
          
          # Configure AWS credentials
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws configure set default.region ap-south-1
      
      - name: Fix Kubeconfigs
        env:
          GITHUB_TOKEN: ${{ secrets.REPO_PAT }}
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        run: |
          # Setup SSH key
          echo "$SSH_PRIVATE_KEY" > /tmp/ssh_key
          chmod 600 /tmp/ssh_key
          eval $(ssh-agent -s)
          ssh-add /tmp/ssh_key
          if [ "${{ github.event.inputs.network }}" == "lower" ]; then
            echo "ðŸ”§ Fixing lower environment kubeconfigs..."
            
            # Get cluster IPs (use private IPs for TLS certificate compatibility)
            DEV_PRIVATE_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=health-app-lower-dev-k3s-node-v2" "Name=instance-state-name,Values=running" \
              --query 'Reservations[0].Instances[0].PrivateIpAddress' --output text)
            
            DEV_PUBLIC_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=health-app-lower-dev-k3s-node-v2" "Name=instance-state-name,Values=running" \
              --query 'Reservations[0].Instances[0].PublicIpAddress' --output text)
            
            TEST_PRIVATE_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=health-app-lower-test-k3s-node-v2" "Name=instance-state-name,Values=running" \
              --query 'Reservations[0].Instances[0].PrivateIpAddress' --output text)
            
            TEST_PUBLIC_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=health-app-lower-test-k3s-node-v2" "Name=instance-state-name,Values=running" \
              --query 'Reservations[0].Instances[0].PublicIpAddress' --output text)
            
            echo "Dev: $DEV_PUBLIC_IP (public) -> $DEV_PRIVATE_IP (private)"
            echo "Test: $TEST_PUBLIC_IP (public) -> $TEST_PRIVATE_IP (private)"
            
            # Install GitHub CLI
            if ! command -v gh &> /dev/null; then
              curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
              echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
              sudo apt update && sudo apt install gh -y
            fi
            
            # Fix dev kubeconfig
            if [ "$DEV_PUBLIC_IP" != "None" ]; then
              ssh -i /tmp/ssh_key -o StrictHostKeyChecking=no ubuntu@$DEV_PUBLIC_IP "sudo cat /etc/rancher/k3s/k3s.yaml" > /tmp/kubeconfig-dev
              sed "s/127.0.0.1/$DEV_PRIVATE_IP/g" /tmp/kubeconfig-dev > /tmp/kubeconfig-dev-fixed
              base64 -w 0 /tmp/kubeconfig-dev-fixed | gh secret set KUBECONFIG_DEV --repo $GITHUB_REPOSITORY
              echo "âœ… KUBECONFIG_DEV updated"
            fi
            
            # Fix test kubeconfig
            if [ "$TEST_PUBLIC_IP" != "None" ]; then
              ssh -i /tmp/ssh_key -o StrictHostKeyChecking=no ubuntu@$TEST_PUBLIC_IP "sudo cat /etc/rancher/k3s/k3s.yaml" > /tmp/kubeconfig-test
              sed "s/127.0.0.1/$TEST_PRIVATE_IP/g" /tmp/kubeconfig-test > /tmp/kubeconfig-test-fixed
              base64 -w 0 /tmp/kubeconfig-test-fixed | gh secret set KUBECONFIG_TEST --repo $GITHUB_REPOSITORY
              echo "âœ… KUBECONFIG_TEST updated"
            fi
            
          else
            echo "ðŸ”§ Fixing single cluster kubeconfig..."
            
            CLUSTER_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=health-app-${{ github.event.inputs.network }}-k3s-node-v2" "Name=instance-state-name,Values=running" \
              --query 'Reservations[0].Instances[0].PublicIpAddress' --output text)
            
            if [ "$CLUSTER_IP" != "None" ]; then
              ssh -i /tmp/ssh_key -o StrictHostKeyChecking=no ubuntu@$CLUSTER_IP "sudo cat /etc/rancher/k3s/k3s.yaml" > /tmp/kubeconfig
              sed "s/127.0.0.1/$CLUSTER_IP/g" /tmp/kubeconfig > /tmp/kubeconfig-fixed
              
              ENV_NAME="${{ github.event.inputs.network == 'higher' && 'PROD' || 'MONITORING' }}"
              base64 -w 0 /tmp/kubeconfig-fixed | gh secret set KUBECONFIG_$ENV_NAME --repo $GITHUB_REPOSITORY
              echo "âœ… KUBECONFIG_$ENV_NAME updated"
            fi
          fi
          
          # Test connections
          echo "ðŸ§ª Testing connections..."
          if [ -f /tmp/kubeconfig-dev-fixed ]; then
            export KUBECONFIG=/tmp/kubeconfig-dev-fixed
            kubectl get nodes && echo "âœ… Dev cluster accessible"
          fi
          
          if [ -f /tmp/kubeconfig-test-fixed ]; then
            export KUBECONFIG=/tmp/kubeconfig-test-fixed
            kubectl get nodes && echo "âœ… Test cluster accessible"
          fi
          
          rm -f /tmp/kubeconfig* /tmp/ssh_key 2>/dev/null || true
          echo "ðŸŽ‰ Kubeconfigs fixed!"