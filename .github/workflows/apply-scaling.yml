name: Apply Scaling Configuration

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - test
          - prod
      app:
        description: 'Application'
        required: true
        default: 'health-api'
        type: string
      scaling_type:
        description: 'Scaling Type'
        required: true
        default: 'standard'
        type: choice
        options:
          - standard
          - advanced
      min_replicas:
        description: 'Minimum Replicas'
        required: false
        default: '2'
        type: string
      max_replicas:
        description: 'Maximum Replicas'
        required: false
        default: '10'
        type: string
      cpu_threshold:
        description: 'CPU Utilization Threshold (%)'
        required: false
        default: '70'
        type: string
      memory_threshold:
        description: 'Memory Utilization Threshold (%)'
        required: false
        default: '80'
        type: string

env:
  AWS_REGION: ap-south-1

jobs:
  apply-scaling:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup kubectl
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/

      - name: Configure kubectl for environment
        run: |
          # Set environment variables
          ENVIRONMENT="${{ github.event.inputs.environment }}"
          APP_NAME="${{ github.event.inputs.app }}"
          NAMESPACE="health-app-$ENVIRONMENT"
          
          echo "ENVIRONMENT=$ENVIRONMENT" >> $GITHUB_ENV
          echo "APP_NAME=$APP_NAME" >> $GITHUB_ENV
          echo "NAMESPACE=$NAMESPACE" >> $GITHUB_ENV
          
          # Use appropriate kubeconfig secret
          if [ "$ENVIRONMENT" = "dev" ]; then
            echo "${{ secrets.KUBECONFIG_DEV }}" | base64 -d > /tmp/kubeconfig
          elif [ "$ENVIRONMENT" = "test" ]; then
            echo "${{ secrets.KUBECONFIG_TEST }}" | base64 -d > /tmp/kubeconfig
          else
            echo "${{ secrets.KUBECONFIG_PROD }}" | base64 -d > /tmp/kubeconfig
          fi
          
          export KUBECONFIG=/tmp/kubeconfig
          echo "KUBECONFIG=/tmp/kubeconfig" >> $GITHUB_ENV
          
          # Test connection
          kubectl cluster-info --insecure-skip-tls-verify
          kubectl get nodes --insecure-skip-tls-verify

      - name: Verify deployment exists
        run: |
          if ! kubectl get deployment $APP_NAME -n $NAMESPACE --insecure-skip-tls-verify >/dev/null 2>&1; then
            echo "‚ùå Deployment $APP_NAME does not exist in namespace $NAMESPACE"
            exit 1
          fi
          
          echo "‚úÖ Found deployment $APP_NAME in namespace $NAMESPACE"

      - name: Apply standard HPA
        if: github.event.inputs.scaling_type == 'standard'
        run: |
          echo "üîÑ Applying standard HPA for $APP_NAME in $NAMESPACE"
          
          cat <<EOF | kubectl apply -f - --insecure-skip-tls-verify
          apiVersion: autoscaling/v2
          kind: HorizontalPodAutoscaler
          metadata:
            name: $APP_NAME-hpa
            namespace: $NAMESPACE
          spec:
            scaleTargetRef:
              apiVersion: apps/v1
              kind: Deployment
              name: $APP_NAME
            minReplicas: ${{ github.event.inputs.min_replicas }}
            maxReplicas: ${{ github.event.inputs.max_replicas }}
            metrics:
            - type: Resource
              resource:
                name: cpu
                target:
                  type: Utilization
                  averageUtilization: ${{ github.event.inputs.cpu_threshold }}
            - type: Resource
              resource:
                name: memory
                target:
                  type: Utilization
                  averageUtilization: ${{ github.event.inputs.memory_threshold }}
          EOF
          
          echo "‚úÖ Standard HPA applied successfully"

      - name: Apply advanced HPA
        if: github.event.inputs.scaling_type == 'advanced'
        run: |
          echo "üîÑ Applying advanced HPA for $APP_NAME in $NAMESPACE"
          
          cat <<EOF | kubectl apply -f - --insecure-skip-tls-verify
          apiVersion: autoscaling/v2
          kind: HorizontalPodAutoscaler
          metadata:
            name: $APP_NAME-advanced-hpa
            namespace: $NAMESPACE
          spec:
            scaleTargetRef:
              apiVersion: apps/v1
              kind: Deployment
              name: $APP_NAME
            minReplicas: ${{ github.event.inputs.min_replicas }}
            maxReplicas: ${{ github.event.inputs.max_replicas }}
            metrics:
            - type: Resource
              resource:
                name: cpu
                target:
                  type: Utilization
                  averageUtilization: ${{ github.event.inputs.cpu_threshold }}
            - type: Resource
              resource:
                name: memory
                target:
                  type: Utilization
                  averageUtilization: ${{ github.event.inputs.memory_threshold }}
            behavior:
              scaleUp:
                stabilizationWindowSeconds: 60
                policies:
                - type: Percent
                  value: 100
                  periodSeconds: 15
                - type: Pods
                  value: 4
                  periodSeconds: 15
                selectPolicy: Max
              scaleDown:
                stabilizationWindowSeconds: 300
                policies:
                - type: Percent
                  value: 10
                  periodSeconds: 60
          EOF
          
          echo "‚úÖ Advanced HPA applied successfully"

      - name: Verify HPA
        run: |
          echo "üîç Verifying HPA configuration"
          
          if [ "${{ github.event.inputs.scaling_type }}" = "standard" ]; then
            HPA_NAME="$APP_NAME-hpa"
          else
            HPA_NAME="$APP_NAME-advanced-hpa"
          fi
          
          kubectl get hpa $HPA_NAME -n $NAMESPACE --insecure-skip-tls-verify
          kubectl describe hpa $HPA_NAME -n $NAMESPACE --insecure-skip-tls-verify
          
          echo "‚úÖ HPA verification completed"

      - name: Generate scaling summary
        if: always()
        run: |
          echo "## üöÄ Scaling Configuration Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üìã Configuration Details" >> $GITHUB_STEP_SUMMARY
          echo "**Application:** $APP_NAME" >> $GITHUB_STEP_SUMMARY
          echo "**Environment:** $ENVIRONMENT" >> $GITHUB_STEP_SUMMARY
          echo "**Namespace:** $NAMESPACE" >> $GITHUB_STEP_SUMMARY
          echo "**Scaling Type:** ${{ github.event.inputs.scaling_type }}" >> $GITHUB_STEP_SUMMARY
          echo "**Min Replicas:** ${{ github.event.inputs.min_replicas }}" >> $GITHUB_STEP_SUMMARY
          echo "**Max Replicas:** ${{ github.event.inputs.max_replicas }}" >> $GITHUB_STEP_SUMMARY
          echo "**CPU Threshold:** ${{ github.event.inputs.cpu_threshold }}%" >> $GITHUB_STEP_SUMMARY
          echo "**Memory Threshold:** ${{ github.event.inputs.memory_threshold }}%" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### üîç HPA Information" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          if [ "${{ github.event.inputs.scaling_type }}" = "standard" ]; then
            kubectl get hpa $APP_NAME-hpa -n $NAMESPACE -o yaml --insecure-skip-tls-verify >> $GITHUB_STEP_SUMMARY 2>/dev/null || echo "HPA not available" >> $GITHUB_STEP_SUMMARY
          else
            kubectl get hpa $APP_NAME-advanced-hpa -n $NAMESPACE -o yaml --insecure-skip-tls-verify >> $GITHUB_STEP_SUMMARY 2>/dev/null || echo "HPA not available" >> $GITHUB_STEP_SUMMARY
          fi
          echo '```' >> $GITHUB_STEP_SUMMARY

      - name: Cleanup
        if: always()
        run: |
          rm -f /tmp/kubeconfig
          echo "üßπ Cleanup completed"