name: Platform Readiness Check

on:
  workflow_dispatch:
    inputs:
      network_tier:
        description: 'Network tier to check'
        required: true
        default: 'lower'
        type: choice
        options:
          - lower
          - higher
          - monitoring
          - all
      check_type:
        description: 'Check type'
        required: true
        default: 'full'
        type: choice
        options:
          - full
          - runner-only
          - database-only
          - kubernetes-only

jobs:
  readiness-check:
    runs-on: ${{ fromJSON(format('["self-hosted", "github-runner-{0}"]', inputs.network_tier == 'all' && 'monitoring' || inputs.network_tier)) }}
    strategy:
      matrix:
        network: ${{ inputs.network_tier == 'all' && fromJson('["lower", "higher", "monitoring"]') || fromJson(format('["{0}"]', inputs.network_tier)) }}
    
    steps:
      - name: Initialize Check
        run: |
          echo "🔍 Platform Readiness Check Started"
          echo "Network Tier: ${{ matrix.network }}"
          echo "Check Type: ${{ inputs.check_type }}"
          echo "Runner: $(hostname)"
          echo "Date: $(date)"
          
          # Set environment variables
          echo "NETWORK_TIER=${{ matrix.network }}" >> $GITHUB_ENV
          echo "CHECK_TYPE=${{ inputs.check_type }}" >> $GITHUB_ENV
          
          # Determine environments and database for this network
          if [ "${{ matrix.network }}" = "lower" ]; then
            echo "ENVIRONMENTS=dev,test" >> $GITHUB_ENV
            echo "DB_INSTANCE=health-app-lower-db" >> $GITHUB_ENV
          elif [ "${{ matrix.network }}" = "higher" ]; then
            echo "ENVIRONMENTS=prod" >> $GITHUB_ENV
            echo "DB_INSTANCE=health-app-higher-db" >> $GITHUB_ENV
          else
            echo "ENVIRONMENTS=monitoring" >> $GITHUB_ENV
            echo "DB_INSTANCE=none" >> $GITHUB_ENV
          fi

      - name: Runner Health Check
        if: inputs.check_type == 'full' || inputs.check_type == 'runner-only'
        run: |
          echo "🤖 Checking Runner Health for $NETWORK_TIER network..."
          
          # Install missing tools
          if ! command -v kubectl &> /dev/null; then
            curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
            chmod +x kubectl
            sudo mv kubectl /usr/local/bin/
          fi
          
          if ! command -v psql &> /dev/null; then
            sudo apt-get update -qq
            sudo apt-get install -y postgresql-client
          fi
          
          # System info
          HOSTNAME=$(hostname)
          OS_INFO=$(uname -a)
          DISK_USAGE=$(df -h / | tail -1 | awk '{print $5}')
          MEMORY_USAGE=$(free -h | grep Mem | awk '{print $3"/"$2}')
          
          # Network connectivity
          GITHUB_API=$(curl -s https://api.github.com/zen > /dev/null && echo "✅ Connected" || echo "❌ Failed")
          INTERNET=$(ping -c 3 8.8.8.8 > /dev/null 2>&1 && echo "✅ Connected" || echo "❌ Failed")
          
          # Software versions
          DOCKER_VER=$(docker --version 2>/dev/null || echo "Not installed")
          KUBECTL_VER=$(kubectl version --client --short 2>/dev/null || echo "Installed")
          
          # Export for summary
          echo "RUNNER_HOSTNAME=$HOSTNAME" >> $GITHUB_ENV
          echo "RUNNER_OS=$OS_INFO" >> $GITHUB_ENV
          echo "RUNNER_DISK=$DISK_USAGE" >> $GITHUB_ENV
          echo "RUNNER_MEMORY=$MEMORY_USAGE" >> $GITHUB_ENV
          echo "RUNNER_GITHUB_API=$GITHUB_API" >> $GITHUB_ENV
          echo "RUNNER_INTERNET=$INTERNET" >> $GITHUB_ENV
          echo "RUNNER_DOCKER=$DOCKER_VER" >> $GITHUB_ENV
          echo "RUNNER_KUBECTL=$KUBECTL_VER" >> $GITHUB_ENV

      - name: Database Health Check
        if: (inputs.check_type == 'full' || inputs.check_type == 'database-only') && env.DB_INSTANCE != 'none'
        run: |
          echo "🗄️ Checking Database Health for $NETWORK_TIER network..."
          
          # List all RDS instances
          echo "=== All RDS Instances ==="
          aws rds describe-db-instances --query 'DBInstances[].[DBInstanceIdentifier,DBInstanceStatus,Endpoint.Address]' --output table 2>/dev/null || echo "No RDS instances found"
          
          # Set default status
          DB_CONNECTION="❌ No RDS instances deployed"
          DB_ENDPOINT="none"
          DB_VERSION="N/A"
          DB_TABLE_COUNT="0"
          
          # Export for summary
          echo "DB_ENDPOINT=$DB_ENDPOINT" >> $GITHUB_ENV
          echo "DB_CONNECTION=$DB_CONNECTION" >> $GITHUB_ENV
          echo "DB_VERSION=$DB_VERSION" >> $GITHUB_ENV
          echo "DB_TABLE_COUNT=$DB_TABLE_COUNT" >> $GITHUB_ENV

      - name: Kubernetes Health Check
        if: (inputs.check_type == 'full' || inputs.check_type == 'kubernetes-only') && env.NETWORK_TIER != 'monitoring'
        run: |
          echo "☸️ Checking Kubernetes Health for $NETWORK_TIER network..."
          
          # Check available secrets
          echo "=== Available Kubeconfig Secrets ==="
          echo "KUBECONFIG_DEV: ${{ secrets.KUBECONFIG_DEV != '' && 'Available' || 'Missing' }}"
          echo "KUBECONFIG_TEST: ${{ secrets.KUBECONFIG_TEST != '' && 'Available' || 'Missing' }}"
          echo "KUBECONFIG_PROD: ${{ secrets.KUBECONFIG_PROD != '' && 'Available' || 'Missing' }}"
          
          # Try to create kubeconfig from infrastructure
          echo "=== Attempting to create kubeconfig ==="
          K3S_IP=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=health-app-$NETWORK_TIER-k3s-node" "Name=instance-state-name,Values=running" --query 'Reservations[0].Instances[0].PublicIpAddress' --output text 2>/dev/null || echo "")
          
          if [ -n "$K3S_IP" ] && [ "$K3S_IP" != "None" ]; then
            echo "Found K3s cluster at: $K3S_IP"
            
            # Create temporary kubeconfig
            cat > /tmp/kubeconfig << EOF
            apiVersion: v1
            clusters:
            - cluster:
                insecure-skip-tls-verify: true
                server: https://$K3S_IP:6443
              name: default
            contexts:
            - context:
                cluster: default
                user: default
              name: default
            current-context: default
            kind: Config
            preferences: {}
            users:
            - name: default
              user:
                token: K10dummy-token-for-testing
            EOF
            
            # Test basic connectivity
            export KUBECONFIG=/tmp/kubeconfig
            if timeout 10 kubectl cluster-info > /dev/null 2>&1; then
              K8S_CONNECTION="✅ Connected (temp config)"
              K8S_NODES=$(kubectl get nodes --no-headers 2>/dev/null | wc -l || echo "0")
              K8S_DETAILS="Connected via temporary config"
            else
              K8S_CONNECTION="❌ Connection failed"
              K8S_NODES="0"
              K8S_DETAILS="Cannot connect to K3s cluster"
            fi
            
            rm -f /tmp/kubeconfig
          else
            K8S_CONNECTION="❌ K3s cluster not found"
            K8S_NODES="0"
            K8S_DETAILS="No K3s cluster found in $NETWORK_TIER network"
          fi
          
          # Check running EC2 instances that might be K3s clusters
          echo "=== Running EC2 Instances ==="
          aws ec2 describe-instances --filters "Name=instance-state-name,Values=running" --query 'Reservations[].Instances[].[Tags[?Key==`Name`].Value|[0],PublicIpAddress,PrivateIpAddress]' --output table 2>/dev/null || echo "No running instances"
          
          # Set default status
          K8S_CONNECTION="❌ No kubeconfig secrets available"
          K8S_NODES="0"
          K8S_DETAILS="Infrastructure not deployed yet"
          
          # Export for summary
          echo "K8S_CONNECTION=$K8S_CONNECTION" >> $GITHUB_ENV
          echo "K8S_NODES=$K8S_NODES" >> $GITHUB_ENV
          echo "K8S_DETAILS=$K8S_DETAILS" >> $GITHUB_ENV

      - name: Generate Readiness Summary
        if: always()
        run: |
          echo "## 🏥 Platform Readiness Check - $NETWORK_TIER Network" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📊 Network Details" >> $GITHUB_STEP_SUMMARY
          echo "**Network Tier:** $NETWORK_TIER" >> $GITHUB_STEP_SUMMARY
          echo "**Environments:** $ENVIRONMENTS" >> $GITHUB_STEP_SUMMARY
          echo "**Check Type:** $CHECK_TYPE" >> $GITHUB_STEP_SUMMARY
          echo "**Date:** $(date)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Runner section
          if [ "$CHECK_TYPE" = "full" ] || [ "$CHECK_TYPE" = "runner-only" ]; then
            echo "### 🤖 GitHub Runner Status" >> $GITHUB_STEP_SUMMARY
            echo "**Hostname:** $RUNNER_HOSTNAME" >> $GITHUB_STEP_SUMMARY
            echo "**Disk Usage:** $RUNNER_DISK" >> $GITHUB_STEP_SUMMARY
            echo "**Memory Usage:** $RUNNER_MEMORY" >> $GITHUB_STEP_SUMMARY
            echo "**GitHub API:** $RUNNER_GITHUB_API" >> $GITHUB_STEP_SUMMARY
            echo "**Internet:** $RUNNER_INTERNET" >> $GITHUB_STEP_SUMMARY
            echo "**Docker:** $RUNNER_DOCKER" >> $GITHUB_STEP_SUMMARY
            echo "**kubectl:** $RUNNER_KUBECTL" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Database section
          if [ "$CHECK_TYPE" = "full" ] || [ "$CHECK_TYPE" = "database-only" ]; then
            if [ "$DB_INSTANCE" != "none" ]; then
              echo "### 🗄️ Database Status" >> $GITHUB_STEP_SUMMARY
              echo "**Instance:** $DB_INSTANCE" >> $GITHUB_STEP_SUMMARY
              echo "**Endpoint:** $DB_ENDPOINT" >> $GITHUB_STEP_SUMMARY
              echo "**Connection:** $DB_CONNECTION" >> $GITHUB_STEP_SUMMARY
              echo "**Version:** $DB_VERSION" >> $GITHUB_STEP_SUMMARY
              echo "**Tables:** $DB_TABLE_COUNT" >> $GITHUB_STEP_SUMMARY
            else
              echo "### 🗄️ Database Status" >> $GITHUB_STEP_SUMMARY
              echo "**Status:** No database in monitoring network" >> $GITHUB_STEP_SUMMARY
            fi
            echo "" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Kubernetes section
          if [ "$CHECK_TYPE" = "full" ] || [ "$CHECK_TYPE" = "kubernetes-only" ]; then
            if [ "$NETWORK_TIER" != "monitoring" ]; then
              echo "### ☸️ Kubernetes Status" >> $GITHUB_STEP_SUMMARY
              echo "**Overall Connection:** $K8S_CONNECTION" >> $GITHUB_STEP_SUMMARY
              echo "**Total Nodes:** $K8S_NODES" >> $GITHUB_STEP_SUMMARY
              echo "**Details:** $K8S_DETAILS" >> $GITHUB_STEP_SUMMARY
            else
              echo "### ☸️ Kubernetes Status" >> $GITHUB_STEP_SUMMARY
              echo "**Status:** Monitoring network - no K8s clusters" >> $GITHUB_STEP_SUMMARY
            fi
            echo "" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Overall status
          OVERALL_STATUS="✅ Ready"
          if [[ "$RUNNER_GITHUB_API" == *"Failed"* ]] || [[ "$DB_CONNECTION" == *"Failed"* ]] || [[ "$K8S_CONNECTION" == *"Failed"* ]]; then
            OVERALL_STATUS="❌ Issues Detected"
          fi
          
          echo "### 🎯 Overall Network Status" >> $GITHUB_STEP_SUMMARY
          echo "**Status:** $OVERALL_STATUS" >> $GITHUB_STEP_SUMMARY
          echo "**Network Ready:** $([[ "$OVERALL_STATUS" == *"Ready"* ]] && echo "Yes" || echo "No")" >> $GITHUB_STEP_SUMMARY
          
          echo "🏥 Platform readiness check completed for $NETWORK_TIER network"