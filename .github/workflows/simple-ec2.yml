name: Simple EC2 Deploy & SSH

on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Action to perform'
        required: true
        default: 'deploy'
        type: choice
        options:
          - deploy
          - destroy
          - ssh-test

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_DEFAULT_REGION: ap-south-1

jobs:
  ec2-management:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.0

      - name: Create Terraform Config
        if: github.event.inputs.action == 'deploy'
        run: |
          mkdir -p simple-ec2
          cat > simple-ec2/main.tf << 'EOF'
          provider "aws" {
            region = "ap-south-1"
          }

          resource "aws_key_pair" "simple" {
            key_name   = "simple-ec2-key"
            public_key = var.ssh_public_key
          }

          resource "aws_security_group" "simple" {
            name = "simple-ec2-sg"
            
            ingress {
              from_port   = 22
              to_port     = 22
              protocol    = "tcp"
              cidr_blocks = ["0.0.0.0/0"]
            }
            
            egress {
              from_port   = 0
              to_port     = 0
              protocol    = "-1"
              cidr_blocks = ["0.0.0.0/0"]
            }
          }

          resource "aws_instance" "simple" {
            ami           = "ami-0ad21ae1d0696ad58"  # Ubuntu 22.04 LTS
            instance_type = "t2.micro"              # FREE TIER
            key_name      = aws_key_pair.simple.key_name
            security_groups = [aws_security_group.simple.name]
            
            tags = {
              Name = "simple-ec2-free"
              Tier = "free"
            }
          }

          output "instance_ip" {
            value = aws_instance.simple.public_ip
          }

          variable "ssh_public_key" {
            type = string
          }
          EOF

      - name: Terraform Init
        if: github.event.inputs.action != 'ssh-test'
        run: |
          cd simple-ec2
          terraform init

      - name: Terraform Apply
        if: github.event.inputs.action == 'deploy'
        run: |
          cd simple-ec2
          terraform apply -auto-approve -var="ssh_public_key=${{ secrets.SSH_PUBLIC_KEY }}"
          echo "INSTANCE_IP=$(terraform output -raw instance_ip)" >> $GITHUB_ENV

      - name: Wait for Instance
        if: github.event.inputs.action == 'deploy'
        run: |
          echo "Waiting for instance to be ready..."
          sleep 60

      - name: Setup SSH Key
        if: github.event.inputs.action == 'deploy' || github.event.inputs.action == 'ssh-test'
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ env.INSTANCE_IP || '13.232.xxx.xxx' }} >> ~/.ssh/known_hosts

      - name: Execute SSH Commands
        if: github.event.inputs.action == 'deploy' || github.event.inputs.action == 'ssh-test'
        run: |
          ssh -i ~/.ssh/id_rsa ubuntu@${{ env.INSTANCE_IP || '13.232.xxx.xxx' }} << 'EOF'
          echo "=== System Info ==="
          uname -a
          echo "=== Disk Usage ==="
          df -h
          echo "=== Memory Usage ==="
          free -h
          echo "=== Installing Docker ==="
          sudo apt update
          sudo apt install -y docker.io
          sudo systemctl start docker
          sudo usermod -aG docker ubuntu
          echo "=== Docker Version ==="
          docker --version
          echo "=== Test Complete ==="
          EOF

      - name: Terraform Destroy
        if: github.event.inputs.action == 'destroy'
        run: |
          cd simple-ec2
          terraform destroy -auto-approve -var="ssh_public_key=${{ secrets.SSH_PUBLIC_KEY }}"