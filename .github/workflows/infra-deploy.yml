name: Infrastructure Deployment

on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Action to perform'
        required: true
        default: 'plan'
        type: choice
        options:
        - plan
        - apply
        - destroy
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'dev'
        type: choice
        options:
        - dev
        - test
        - prod
        - all
      
env:
  AWS_REGION: ap-south-1
  TF_VERSION: 1.6.0

jobs:
  terraform-single:
    if: github.event.inputs.environment != 'all'
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Terraform Init
      working-directory: ./infra
      run: |
        terraform init \
          -backend-config="bucket=${{ secrets.TF_STATE_BUCKET }}" \
          -backend-config="key=health-app-${{ github.event.inputs.environment }}.tfstate" \
          -backend-config="region=${{ env.AWS_REGION }}"

    - name: Terraform Plan
      if: github.event.inputs.action == 'plan'
      working-directory: ./infra
      run: terraform plan -var-file="environments/${{ github.event.inputs.environment }}.tfvars"

    - name: Terraform Apply
      if: github.event.inputs.action == 'apply'
      working-directory: ./infra
      run: terraform apply -var-file="environments/${{ github.event.inputs.environment }}.tfvars" -auto-approve

    - name: Terraform Destroy
      if: github.event.inputs.action == 'destroy'
      working-directory: ./infra
      run: terraform destroy -var-file="environments/${{ github.event.inputs.environment }}.tfvars" -auto-approve

  terraform-all:
    if: github.event.inputs.environment == 'all'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        environment: [dev, test, prod]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}
name: Infrastructure Deployment

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target Environment'
        required: true
        default: 'dev'
        type: choice
        options:
        - dev
        - test
        - prod
      terraform_action:
        description: 'Terraform Action'
        required: true
        default: 'apply'
        type: choice
        options:
        - plan
        - apply
        - destroy

env:
  AWS_REGION: ${{ vars.AWS_REGION || 'ap-south-1' }}
  TERRAFORM_VERSION: ${{ vars.TERRAFORM_VERSION || '1.6.0' }}
  TF_STATE_BUCKET: "health-app-terraform-state"

jobs:
  terraform:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TERRAFORM_VERSION }}

    - name: Create Terraform state bucket if it doesn't exist
      run: |
        if ! aws s3api head-bucket --bucket $TF_STATE_BUCKET 2>/dev/null; then
          echo "Creating Terraform state bucket: $TF_STATE_BUCKET"
          aws s3 mb s3://$TF_STATE_BUCKET --region $AWS_REGION
          aws s3api put-bucket-versioning --bucket $TF_STATE_BUCKET --versioning-configuration Status=Enabled
          aws s3api put-bucket-encryption --bucket $TF_STATE_BUCKET --server-side-encryption-configuration '{"Rules": [{"ApplyServerSideEncryptionByDefault": {"SSEAlgorithm": "AES256"}}]}'
        else
          echo "Terraform state bucket already exists"
        fi

    - name: Terraform Init
      working-directory: infra
      run: |
        terraform init \
          -backend-config="bucket=$TF_STATE_BUCKET" \
          -backend-config="key=health-app-${{ github.event.inputs.environment }}.tfstate" \
          -backend-config="region=$AWS_REGION"

    - name: Terraform Format
      working-directory: infra
      run: terraform fmt -check

    - name: Terraform Validate
      working-directory: infra
      run: terraform validate

    - name: Terraform Plan
      working-directory: infra
      id: plan
      run: |
        terraform plan \
          -var-file="environments/${{ github.event.inputs.environment }}.tfvars" \
          -out=tfplan

        # Save plan output for summary
        terraform show -json tfplan > tfplan.json

    - name: Terraform Plan Summary
      id: plan-summary
      working-directory: infra
      run: |
        RESOURCES_TO_CREATE=$(jq -r '.resource_changes | map(select(.change.actions[0] == "create")) | length' tfplan.json)
        RESOURCES_TO_UPDATE=$(jq -r '.resource_changes | map(select(.change.actions[0] == "update")) | length' tfplan.json)
        RESOURCES_TO_DELETE=$(jq -r '.resource_changes | map(select(.change.actions[0] == "delete")) | length' tfplan.json)

        echo "resources_to_create=$RESOURCES_TO_CREATE" >> $GITHUB_OUTPUT
        echo "resources_to_update=$RESOURCES_TO_UPDATE" >> $GITHUB_OUTPUT
        echo "resources_to_delete=$RESOURCES_TO_DELETE" >> $GITHUB_OUTPUT

        echo "## Terraform Plan Summary - ${{ github.event.inputs.environment }} Environment" >> $GITHUB_STEP_SUMMARY
        echo "* Resources to create: $RESOURCES_TO_CREATE" >> $GITHUB_STEP_SUMMARY
        echo "* Resources to update: $RESOURCES_TO_UPDATE" >> $GITHUB_STEP_SUMMARY
        echo "* Resources to delete: $RESOURCES_TO_DELETE" >> $GITHUB_STEP_SUMMARY

    - name: Terraform Apply
      working-directory: infra
      if: github.event.inputs.terraform_action == 'apply'
      run: terraform apply -auto-approve tfplan

    - name: Terraform Destroy
      working-directory: infra
      if: github.event.inputs.terraform_action == 'destroy'
      run: |
        terraform destroy \
          -var-file="environments/${{ github.event.inputs.environment }}.tfvars" \
          -auto-approve

    - name: Configure kubectl
      if: github.event.inputs.terraform_action == 'apply'
      run: |
        aws eks update-kubeconfig \
          --region $AWS_REGION \
          --name health-app-${{ github.event.inputs.environment }}-cluster

    - name: Verify cluster access
      if: github.event.inputs.terraform_action == 'apply'
      run: kubectl get nodes

    - name: Install ArgoCD (if not exists)
      if: github.event.inputs.terraform_action == 'apply'
      run: |
        if ! kubectl get namespace argocd &>/dev/null; then
          kubectl create namespace argocd
          kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml

          # Wait for ArgoCD to be ready
          kubectl wait --for=condition=available --timeout=300s deployment/argocd-server -n argocd
        else
          echo "ArgoCD namespace already exists"
        fi

    - name: Notify on Slack
      uses: slackapi/slack-github-action@v1.25.0
      if: always()
      with:
        payload: |
          {
            "text": "Infrastructure Deployment: ${{ github.event.inputs.environment }} - ${{ github.event.inputs.terraform_action }}",
            "blocks": [
              {
                "type": "header",
                "text": {
                  "type": "plain_text",
                  "text": "Infrastructure Deployment ${{ job.status == 'success' ? '✅' : '❌' }}"
                }
              },
              {
                "type": "section",
                "fields": [
                  {
                    "type": "mrkdwn",
                    "text": "*Environment:* ${{ github.event.inputs.environment }}"
                  },
                  {
                    "type": "mrkdwn",
                    "text": "*Action:* ${{ github.event.inputs.terraform_action }}"
                  }
                ]
              },
              {
                "type": "section",
                "fields": [
                  {
                    "type": "mrkdwn",
                    "text": "*Status:* ${{ job.status }}"
                  },
                  {
                    "type": "mrkdwn",
                    "text": "*Triggered by:* ${{ github.actor }}"
                  }
                ]
              },
              {
                "type": "section",
                "fields": [
                  {
                    "type": "mrkdwn",
                    "text": "*Resources created:* ${{ steps.plan-summary.outputs.resources_to_create }}"
                  },
                  {
                    "type": "mrkdwn",
                    "text": "*Resources updated:* ${{ steps.plan-summary.outputs.resources_to_update }}"
                  },
                  {
                    "type": "mrkdwn",
                    "text": "*Resources deleted:* ${{ steps.plan-summary.outputs.resources_to_delete }}"
                  }
                ]
              },
              {
                "type": "actions",
                "elements": [
                  {
                    "type": "button",
                    "text": {
                      "type": "plain_text",
                      "text": "View Workflow"
                    },
                    "url": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
                  }
                ]
              }
            ]
          }
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK

    - name: Output infrastructure information
      if: github.event.inputs.terraform_action == 'apply'
      working-directory: infra
      run: |
        echo "## Infrastructure Deployed - ${{ github.event.inputs.environment }} Environment" >> $GITHUB_STEP_SUMMARY
        echo "* VPC ID: $(terraform output -raw vpc_id)" >> $GITHUB_STEP_SUMMARY
        echo "* EKS Cluster Name: $(terraform output -raw eks_cluster_name)" >> $GITHUB_STEP_SUMMARY
        echo "* Kubernetes Namespace: $(terraform output -raw kubernetes_namespace)" >> $GITHUB_STEP_SUMMARY
        echo "* RDS Endpoint: $(terraform output -raw db_instance_endpoint)" >> $GITHUB_STEP_SUMMARY
        echo "* Network Architecture: $(terraform output -raw network_architecture)" >> $GITHUB_STEP_SUMMARY

        if [[ "${{ github.event.inputs.environment }}" == "prod" ]]; then
          echo "* Active Deployment Color: $(terraform output -raw active_deployment_color)" >> $GITHUB_STEP_SUMMARY
        fi
    - name: Terraform Init
      working-directory: ./infra
      run: |
        terraform init \
          -backend-config="bucket=${{ secrets.TF_STATE_BUCKET }}" \
          -backend-config="key=health-app-${{ matrix.environment }}.tfstate" \
          -backend-config="region=${{ env.AWS_REGION }}"

    - name: Terraform Plan
      if: github.event.inputs.action == 'plan'
      working-directory: ./infra
      run: terraform plan -var-file="environments/${{ matrix.environment }}.tfvars"

    - name: Terraform Apply
      if: github.event.inputs.action == 'apply'
      working-directory: ./infra
      run: terraform apply -var-file="environments/${{ matrix.environment }}.tfvars" -auto-approve

    - name: Terraform Destroy
      if: github.event.inputs.action == 'destroy'
      working-directory: ./infra
      run: terraform destroy -var-file="environments/${{ matrix.environment }}.tfvars" -auto-approve