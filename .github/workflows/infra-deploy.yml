name: Infrastructure Deployment

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target Environment'
        required: true
        default: 'dev'
        type: choice
        options:
        - dev
        - test
        - prod
      terraform_action:
        description: 'Terraform Action'
        required: true
        default: 'apply'
        type: choice
        options:
        - plan
        - apply
        - destroy

env:
  AWS_REGION: ap-south-1
  TERRAFORM_VERSION: 1.6.0
  TF_STATE_BUCKET: "health-app-terraform-state"

jobs:
  terraform:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TERRAFORM_VERSION }}

    - name: Create Terraform state bucket if it doesn't exist
      run: |
        if ! aws s3api head-bucket --bucket $TF_STATE_BUCKET 2>/dev/null; then
          echo "Creating Terraform state bucket: $TF_STATE_BUCKET"
          aws s3 mb s3://$TF_STATE_BUCKET --region $AWS_REGION
          aws s3api put-bucket-versioning --bucket $TF_STATE_BUCKET --versioning-configuration Status=Enabled
        else
          echo "Terraform state bucket already exists"
        fi

    - name: Terraform Init
      working-directory: infra
      run: |
        terraform init \
          -backend-config="bucket=$TF_STATE_BUCKET" \
          -backend-config="key=health-app-${{ github.event.inputs.environment }}.tfstate" \
          -backend-config="region=$AWS_REGION"

    - name: Terraform Validate
      working-directory: infra
      run: terraform validate

    - name: Terraform Plan
      working-directory: infra
      id: plan
      run: |
        terraform plan \
          -var-file="environments/${{ github.event.inputs.environment }}.tfvars" \
          -out=tfplan

    - name: Terraform Apply
      working-directory: infra
      if: github.event.inputs.terraform_action == 'apply'
      run: terraform apply -auto-approve tfplan

    - name: Terraform Destroy
      working-directory: infra
      if: github.event.inputs.terraform_action == 'destroy'
      run: |
        terraform destroy \
          -var-file="environments/${{ github.event.inputs.environment }}.tfvars" \
          -auto-approve

    - name: Output infrastructure information
      if: github.event.inputs.terraform_action == 'apply'
      working-directory: infra
      run: |
        echo "## Infrastructure Deployed - ${{ github.event.inputs.environment }} Environment" >> $GITHUB_STEP_SUMMARY
        echo "* Environment: ${{ github.event.inputs.environment }}" >> $GITHUB_STEP_SUMMARY
        echo "* Action: ${{ github.event.inputs.terraform_action }}" >> $GITHUB_STEP_SUMMARY
        echo "* Triggered by: ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY