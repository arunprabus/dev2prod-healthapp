name: Core Deployment

on:
  repository_dispatch:
    types: [app-deploy]
  workflow_dispatch:
    inputs:
      app:
        description: 'Application'
        required: true
        default: 'health-api'
        type: string
      image:
        description: 'Container image'
        required: true
        type: string
      environment:
        description: 'Environment'
        required: true
        default: 'dev'
        type: choice
        options:
        - dev
        - test
        - prod

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup kubectl
      run: |
        curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
        chmod +x kubectl
        sudo mv kubectl /usr/local/bin/
        mkdir -p ~/.kube

    - name: Configure kubeconfig
      run: |
        ENV="${{ github.event.client_payload.environment || github.event.inputs.environment }}"
        INFRA_ENV="${{ github.event.client_payload.environment || github.event.inputs.environment }}"
        
        # Map app environment to infrastructure network
        if [[ "$ENV" == "prod" ]]; then
          INFRA_ENV="higher"
        else
          INFRA_ENV="lower"  # dev and test both use lower network
        fi
        
        SECRET_NAME="KUBECONFIG_$(echo $INFRA_ENV | tr '[:lower:]' '[:upper:]')"
        
        if [[ "$INFRA_ENV" == "lower" && -n "${{ secrets.KUBECONFIG_LOWER }}" ]]; then
          echo "${{ secrets.KUBECONFIG_LOWER }}" | base64 -d > ~/.kube/config
        elif [[ "$INFRA_ENV" == "higher" && -n "${{ secrets.KUBECONFIG_HIGHER }}" ]]; then
          echo "${{ secrets.KUBECONFIG_HIGHER }}" | base64 -d > ~/.kube/config
        elif [[ -n "${{ secrets.KUBECONFIG }}" ]]; then
          echo "${{ secrets.KUBECONFIG }}" | base64 -d > ~/.kube/config
        else
          echo "❌ No kubeconfig found for $INFRA_ENV network"
          exit 1
        fi
        
        chmod 600 ~/.kube/config
        echo "✅ Using kubeconfig for $INFRA_ENV network (app env: $ENV)"

    - name: Extract deployment info
      id: deploy-info
      run: |
        APP="${{ github.event.client_payload.app || github.event.inputs.app }}"
        IMAGE="${{ github.event.client_payload.image || github.event.inputs.image }}"
        ENV="${{ github.event.client_payload.environment || github.event.inputs.environment }}"
        
        echo "app=$APP" >> $GITHUB_OUTPUT
        echo "image=$IMAGE" >> $GITHUB_OUTPUT
        echo "environment=$ENV" >> $GITHUB_OUTPUT

    - name: Verify cluster
      run: |
        kubectl cluster-info
        kubectl get nodes

    - name: Deploy application
      run: |
        APP="${{ steps.deploy-info.outputs.app }}"
        IMAGE="${{ steps.deploy-info.outputs.image }}"
        ENV="${{ steps.deploy-info.outputs.environment }}"
        NAMESPACE="health-app-${ENV}"
        
        # Create namespace
        kubectl create namespace $NAMESPACE --dry-run=client -o yaml | kubectl apply -f -
        
        # Check if deployment exists
        if kubectl get deployment $APP -n $NAMESPACE >/dev/null 2>&1; then
          echo "🔄 Updating existing deployment"
          kubectl set image deployment/$APP $APP=$IMAGE -n $NAMESPACE
        else
          echo "🆕 Creating new deployment"
          # Apply K8s manifests if they exist
          if [[ -d "k8s" ]]; then
            # Update manifests with correct values
            sed -i "s|namespace: health-app-dev|namespace: $NAMESPACE|g" k8s/*.yaml
            sed -i "s|environment: dev|environment: $ENV|g" k8s/*.yaml
            sed -i "s|arunprabusiva/health-api:latest|$IMAGE|g" k8s/*.yaml
            kubectl apply -f k8s/ -n $NAMESPACE
          else
            # Create basic deployment
            kubectl create deployment $APP --image=$IMAGE -n $NAMESPACE
            kubectl expose deployment $APP --port=80 --target-port=8080 -n $NAMESPACE
          fi
        fi
        
        # Wait for rollout
        kubectl rollout status deployment/$APP -n $NAMESPACE --timeout=300s

    - name: Verify deployment
      run: |
        APP="${{ steps.deploy-info.outputs.app }}"
        ENV="${{ steps.deploy-info.outputs.environment }}"
        NAMESPACE="health-app-${ENV}"
        
        kubectl get pods -l app=$APP -n $NAMESPACE
        kubectl get services -l app=$APP -n $NAMESPACE

    - name: Summary
      if: always()
      run: |
        echo "## 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "* App: ${{ steps.deploy-info.outputs.app }}" >> $GITHUB_STEP_SUMMARY
        echo "* Image: ${{ steps.deploy-info.outputs.image }}" >> $GITHUB_STEP_SUMMARY
        echo "* Environment: ${{ steps.deploy-info.outputs.environment }}" >> $GITHUB_STEP_SUMMARY
        echo "* Status: ${{ job.status }}" >> $GITHUB_STEP_SUMMARY