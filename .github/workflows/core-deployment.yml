name: Core Deployment

on:
  repository_dispatch:
    types: [ app-deploy ]
  workflow_dispatch:
    inputs:
      app:
        description: 'Application'
        required: true
        default: 'health-api'
        type: string
      image:
        description: 'Container image'
        required: true
        default: 'arunprabusiva/health-api:latest'
        type: string
      environment:
        description: 'Environment'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - test
          - prod

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup kubectl
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-south-1

      - name: Setup kubeconfig
        run: |
          ENV="${{ github.event.client_payload.environment || github.event.inputs.environment || 'dev' }}"
          
          echo "🔧 Setting up kubeconfig for environment: $ENV"
          
          # Define S3 paths to try for each environment
          case $ENV in
            "dev")
              KUBECONFIG_PATHS=("kubeconfig/dev-network.yaml" "kubeconfig/lower-network.yaml")
              ;;
            "test")
              KUBECONFIG_PATHS=("kubeconfig/test-network.yaml" "kubeconfig/lower-network.yaml")
              ;;
            "prod")
              KUBECONFIG_PATHS=("kubeconfig/prod-network.yaml" "kubeconfig/higher-network.yaml")
              ;;
            *)
              KUBECONFIG_PATHS=("kubeconfig/lower-network.yaml")
              ;;
          esac
          
          mkdir -p ~/.kube
          
          echo "📥 Attempting to download kubeconfig from S3..."
          
          # Try S3 download with multiple paths
          KUBECONFIG_FOUND=false
          for KUBECONFIG_PATH in "${KUBECONFIG_PATHS[@]}"; do
            echo "  Trying: s3://${{ secrets.TF_STATE_BUCKET }}/$KUBECONFIG_PATH"
            if aws s3 cp s3://${{ secrets.TF_STATE_BUCKET }}/$KUBECONFIG_PATH ~/.kube/config 2>/dev/null; then
              echo "✅ Downloaded kubeconfig from S3: $KUBECONFIG_PATH"
              KUBECONFIG_FOUND=true
              
              # Verify downloaded file
              if [[ ! -f ~/.kube/config ]]; then
                echo "❌ Kubeconfig file not found after download"
                KUBECONFIG_FOUND=false
                continue
              fi
              
              # Check file size
              FILE_SIZE=$(stat -c%s ~/.kube/config 2>/dev/null || echo "0")
              if [[ $FILE_SIZE -lt 100 ]]; then
                echo "❌ Downloaded kubeconfig file too small ($FILE_SIZE bytes)"
                KUBECONFIG_FOUND=false
                continue
              fi
              
              echo "📄 Downloaded kubeconfig content:"
              cat ~/.kube/config
              break
            fi
          done
          
          # Fallback to dynamic creation if S3 fails
          if [[ "$KUBECONFIG_FOUND" == "false" ]]; then
            echo "⚠️ Kubeconfig not found in S3, creating from cluster IP..."
            
            # Get cluster IP based on environment
            case $ENV in
              "dev"|"test") TAG_FILTER="*lower*k3s*" ;;
              "prod") TAG_FILTER="*higher*k3s*" ;;
              *) TAG_FILTER="*lower*k3s*" ;;
            esac
            
            CLUSTER_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=$TAG_FILTER" "Name=instance-state-name,Values=running" \
              --query "Reservations[0].Instances[0].PublicIpAddress" --output text)
            
            if [[ "$CLUSTER_IP" == "None" || -z "$CLUSTER_IP" ]]; then
              echo "No cluster found, using fallback IP: 13.235.132.195"
              CLUSTER_IP="13.235.132.195"
            fi
            
            echo "🌐 Using cluster IP: $CLUSTER_IP"
            
            # Use the same script as infrastructure workflow
            chmod +x scripts/generate-kubeconfig.sh
            ./scripts/generate-kubeconfig.sh "$CLUSTER_IP" ~/.kube/config "unused"
          fi
          
          chmod 600 ~/.kube/config
          echo "🎯 Kubeconfig ready for $ENV environment"

      - name: Verify connection
        run: kubectl get nodes

      - name: Deploy application
        run: |
          APP="${{ github.event.client_payload.app || github.event.inputs.app }}"
          IMAGE="${{ github.event.client_payload.image || github.event.inputs.image }}"
          ENV="${{ github.event.client_payload.environment || github.event.inputs.environment }}"
          NAMESPACE="health-app-${ENV}"
          
          kubectl create namespace $NAMESPACE --dry-run=client -o yaml | kubectl apply -f -
          
          if kubectl get deployment $APP -n $NAMESPACE >/dev/null 2>&1; then
            kubectl set image deployment/$APP $APP=$IMAGE -n $NAMESPACE
          else
            kubectl create deployment $APP --image=$IMAGE -n $NAMESPACE
            kubectl expose deployment $APP --port=80 --target-port=8080 -n $NAMESPACE
          fi
          
          kubectl rollout status deployment/$APP -n $NAMESPACE --timeout=300s

      - name: Verify deployment
        run: |
          APP="${{ github.event.client_payload.app || github.event.inputs.app }}"
          ENV="${{ github.event.client_payload.environment || github.event.inputs.environment }}"
          NAMESPACE="health-app-${ENV}"
          
          kubectl get pods -l app=$APP -n $NAMESPACE
          kubectl get services -l app=$APP -n $NAMESPACE