name: Core Deployment

on:
  repository_dispatch:
    types: [app-deploy]
  workflow_dispatch:
    inputs:
      app:
        description: 'Application'
        required: true
        default: 'health-api'
        type: string
      image:
        description: 'Container image'
        required: true
        type: string
      environment:
        description: 'Environment'
        required: true
        default: 'dev'
        type: choice
        options:
        - dev
        - test
        - prod

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup kubectl
      run: |
        curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
        chmod +x kubectl
        sudo mv kubectl /usr/local/bin/
        mkdir -p ~/.kube

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-south-1

    - name: Get cluster IP dynamically
      id: cluster-ip
      run: |
        # Get cluster IP from AWS
        CLUSTER_IP=$(aws ec2 describe-instances \
          --filters "Name=tag:Name,Values=*k3s-node" "Name=instance-state-name,Values=running" \
          --query "Reservations[0].Instances[0].PublicIpAddress" --output text)
        
        if [[ "$CLUSTER_IP" == "None" || -z "$CLUSTER_IP" ]]; then
          echo "Failed to get cluster IP"
          exit 1
        fi
        
        echo "cluster_ip=$CLUSTER_IP" >> $GITHUB_OUTPUT
        echo "Found cluster IP: $CLUSTER_IP"

    - name: Test connectivity
      run: |
        CLUSTER_IP="${{ steps.cluster-ip.outputs.cluster_ip }}"
        echo "Testing connectivity to $CLUSTER_IP"
        
        # Ping test
        if ping -c 3 $CLUSTER_IP; then
          echo "Ping successful"
        else
          echo "Ping failed"
        fi
        
        # Port test
        if timeout 10 bash -c "</dev/tcp/$CLUSTER_IP/6443"; then
          echo "Port 6443 is reachable"
        else
          echo "Port 6443 is not reachable"
        fi
        
        # API test
        curl -k -m 10 https://$CLUSTER_IP:6443/ || echo "API endpoint test completed"

    - name: Configure kubeconfig
      run: |
        CLUSTER_IP="${{ steps.cluster-ip.outputs.cluster_ip }}"
        
        # Check if token exists
        if [[ -z "${{ secrets.K3S_TOKEN }}" ]]; then
          echo "ERROR: K3S_TOKEN secret is missing!"
          echo "Please add K3S_TOKEN secret to repository settings"
          exit 1
        fi
        
        mkdir -p ~/.kube
        echo "apiVersion: v1" > ~/.kube/config
        echo "clusters:" >> ~/.kube/config
        echo "- cluster:" >> ~/.kube/config
        echo "    server: https://$CLUSTER_IP:6443" >> ~/.kube/config
        echo "    insecure-skip-tls-verify: true" >> ~/.kube/config
        echo "  name: k3s-cluster" >> ~/.kube/config
        echo "contexts:" >> ~/.kube/config
        echo "- context:" >> ~/.kube/config
        echo "    cluster: k3s-cluster" >> ~/.kube/config
        echo "    user: k3s-user" >> ~/.kube/config
        echo "  name: k3s-context" >> ~/.kube/config
        echo "current-context: k3s-context" >> ~/.kube/config
        echo "kind: Config" >> ~/.kube/config
        echo "users:" >> ~/.kube/config
        echo "- name: k3s-user" >> ~/.kube/config
        echo "  user:" >> ~/.kube/config
        echo "    token: ${{ secrets.K3S_TOKEN }}" >> ~/.kube/config
        chmod 600 ~/.kube/config
        echo "Kubeconfig configured for $CLUSTER_IP"
        echo "Token length: ${#K3S_TOKEN}" # Debug info
      env:
        K3S_TOKEN: ${{ secrets.K3S_TOKEN }}

    - name: Extract deployment info
      id: deploy-info
      run: |
        APP="${{ github.event.client_payload.app || github.event.inputs.app }}"
        IMAGE="${{ github.event.client_payload.image || github.event.inputs.image }}"
        ENV="${{ github.event.client_payload.environment || github.event.inputs.environment }}"
        
        echo "app=$APP" >> $GITHUB_OUTPUT
        echo "image=$IMAGE" >> $GITHUB_OUTPUT
        echo "environment=$ENV" >> $GITHUB_OUTPUT

    - name: Verify cluster
      run: |
        kubectl cluster-info
        kubectl get nodes

    - name: Deploy application
      run: |
        APP="${{ steps.deploy-info.outputs.app }}"
        IMAGE="${{ steps.deploy-info.outputs.image }}"
        ENV="${{ steps.deploy-info.outputs.environment }}"
        NAMESPACE="health-app-${ENV}"
        
        # Create namespace
        kubectl create namespace $NAMESPACE --dry-run=client -o yaml | kubectl apply -f -
        
        # Check if deployment exists
        if kubectl get deployment $APP -n $NAMESPACE >/dev/null 2>&1; then
          echo "Updating existing deployment"
          kubectl set image deployment/$APP $APP=$IMAGE -n $NAMESPACE
        else
          echo "Creating new deployment"
          # Apply K8s manifests if they exist
          if [[ -d "k8s" ]]; then
            # Update manifests with correct values
            sed -i "s|namespace: health-app-dev|namespace: $NAMESPACE|g" k8s/*.yaml
            sed -i "s|environment: dev|environment: $ENV|g" k8s/*.yaml
            sed -i "s|arunprabusiva/health-api:latest|$IMAGE|g" k8s/*.yaml
            kubectl apply -f k8s/ -n $NAMESPACE
          else
            # Create basic deployment
            kubectl create deployment $APP --image=$IMAGE -n $NAMESPACE
            kubectl expose deployment $APP --port=80 --target-port=8080 -n $NAMESPACE
          fi
        fi
        
        # Wait for rollout
        kubectl rollout status deployment/$APP -n $NAMESPACE --timeout=300s

    - name: Verify deployment
      run: |
        APP="${{ steps.deploy-info.outputs.app }}"
        ENV="${{ steps.deploy-info.outputs.environment }}"
        NAMESPACE="health-app-${ENV}"
        
        kubectl get pods -l app=$APP -n $NAMESPACE
        kubectl get services -l app=$APP -n $NAMESPACE

    - name: Summary
      if: always()
      run: |
        echo "## Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "* App: ${{ steps.deploy-info.outputs.app }}" >> $GITHUB_STEP_SUMMARY
        echo "* Image: ${{ steps.deploy-info.outputs.image }}" >> $GITHUB_STEP_SUMMARY
        echo "* Environment: ${{ steps.deploy-info.outputs.environment }}" >> $GITHUB_STEP_SUMMARY
        echo "* Status: ${{ job.status }}" >> $GITHUB_STEP_SUMMARY