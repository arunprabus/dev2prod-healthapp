name: Core Deployment

on:
  repository_dispatch:
    types: [app-deploy]
  workflow_dispatch:
    inputs:
      app:
        description: 'Application'
        required: true
        default: 'health-api'
        type: string
      image:
        description: 'Container image'
        required: true
        default: 'arunprabusiva/health-api:latest'
        type: string
      environment:
        description: 'Environment'
        required: true
        default: 'dev'
        type: choice
        options:
        - dev
        - test
        - prod

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup kubectl
      run: |
        curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
        chmod +x kubectl
        sudo mv kubectl /usr/local/bin/
        mkdir -p ~/.kube

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-south-1

    - name: Setup kubeconfig
      run: |
        mkdir -p ~/.kube
        
        ENV="${{ github.event.client_payload.environment || github.event.inputs.environment || 'dev' }}"
        echo "🔧 Setting up kubeconfig for environment: $ENV"
        
        # Define S3 paths to try for each environment
        case $ENV in
          "dev")
            KUBECONFIG_PATHS=("kubeconfig/dev-network.yaml" "kubeconfig/lower-network.yaml")
            NETWORK="lower"
            ;;
          "test")
            KUBECONFIG_PATHS=("kubeconfig/test-network.yaml" "kubeconfig/lower-network.yaml")
            NETWORK="lower"
            ;;
          "prod")
            KUBECONFIG_PATHS=("kubeconfig/prod-network.yaml" "kubeconfig/higher-network.yaml")
            NETWORK="higher"
            ;;
          "monitoring")
            KUBECONFIG_PATHS=("kubeconfig/monitoring-network.yaml")
            NETWORK="monitoring"
            ;;
          *)
            KUBECONFIG_PATHS=("kubeconfig/lower-network.yaml")
            NETWORK="lower"
            ;;
        esac
        
        echo "📥 Attempting to download kubeconfig from S3..."
        
        # Try S3 download with multiple paths
        KUBECONFIG_FOUND=false
        for KUBECONFIG_PATH in "${KUBECONFIG_PATHS[@]}"; do
          echo "  Trying: s3://${{ secrets.TF_STATE_BUCKET }}/$KUBECONFIG_PATH"
          if aws s3 cp s3://${{ secrets.TF_STATE_BUCKET }}/$KUBECONFIG_PATH ~/.kube/config 2>/dev/null; then
            echo "✅ Downloaded kubeconfig from S3: $KUBECONFIG_PATH"
            KUBECONFIG_FOUND=true
            break
          fi
        done
        
        # Exit if kubeconfig not found in S3
        if [[ "$KUBECONFIG_FOUND" == "false" ]]; then
          echo "❌ Kubeconfig not found in S3 for $ENV environment"
          echo "💡 Please run: Actions → Core Infrastructure → deploy → $NETWORK"
          echo "📋 This will generate and upload kubeconfig to S3 automatically"
          exit 1
        fi
        
        chmod 600 ~/.kube/config
        echo "🎯 Kubeconfig ready for $ENV environment"

    - name: Extract deployment info
      id: deploy-info
      run: |
        APP="${{ github.event.client_payload.app || github.event.inputs.app }}"
        IMAGE="${{ github.event.client_payload.image || github.event.inputs.image }}"
        ENV="${{ github.event.client_payload.environment || github.event.inputs.environment }}"
        
        echo "app=$APP" >> $GITHUB_OUTPUT
        echo "image=$IMAGE" >> $GITHUB_OUTPUT
        echo "environment=$ENV" >> $GITHUB_OUTPUT

    - name: Verify cluster connection
      run: |
        ENV="${{ github.event.client_payload.environment || github.event.inputs.environment || 'dev' }}"
        echo "🔍 Verifying cluster connection for $ENV environment"
        echo ""
        
        echo "📋 Kubeconfig details:"
        kubectl config view --minify --output=yaml | head -20
        echo ""
        
        echo "🎯 Current context:"
        kubectl config current-context
        echo ""
        
        echo "🌐 Cluster info:"
        kubectl cluster-info --request-timeout=30s
        echo ""
        
        echo "🖥️ Cluster nodes:"
        kubectl get nodes -o wide
        echo ""
        
        echo "✅ Cluster connection verified for $ENV environment"

    - name: Deploy application
      run: |
        APP="${{ steps.deploy-info.outputs.app }}"
        IMAGE="${{ steps.deploy-info.outputs.image }}"
        ENV="${{ steps.deploy-info.outputs.environment }}"
        NAMESPACE="health-app-${ENV}"
        
        echo "🚀 Deploying $APP to $ENV environment"
        echo "  Image: $IMAGE"
        echo "  Namespace: $NAMESPACE"
        echo ""
        
        # Create namespace
        echo "📋 Creating namespace: $NAMESPACE"
        kubectl create namespace $NAMESPACE --dry-run=client -o yaml | kubectl apply -f -
        
        # Check if deployment exists
        if kubectl get deployment $APP -n $NAMESPACE >/dev/null 2>&1; then
          echo "🔄 Updating existing deployment"
          kubectl set image deployment/$APP $APP=$IMAGE -n $NAMESPACE
          kubectl annotate deployment/$APP deployment.kubernetes.io/revision- -n $NAMESPACE
        else
          echo "🆕 Creating new deployment"
          
          # Use K8s manifests if available
          if [[ -d "k8s" && -f "k8s/health-api-complete.yaml" ]]; then
            echo "📄 Using K8s manifests"
            # Create temp directory for modified manifests
            mkdir -p /tmp/k8s-deploy
            cp k8s/*.yaml /tmp/k8s-deploy/
            
            # Update manifests with environment-specific values
            find /tmp/k8s-deploy -name "*.yaml" -exec sed -i "s|namespace: health-app-dev|namespace: $NAMESPACE|g" {} \;
            find /tmp/k8s-deploy -name "*.yaml" -exec sed -i "s|environment: dev|environment: $ENV|g" {} \;
            find /tmp/k8s-deploy -name "*.yaml" -exec sed -i "s|arunprabusiva/health-api:latest|$IMAGE|g" {} \;
            
            # Apply manifests
            kubectl apply -f /tmp/k8s-deploy/ -n $NAMESPACE
          else
            echo "🔨 Creating basic deployment"
            kubectl create deployment $APP --image=$IMAGE -n $NAMESPACE
            kubectl expose deployment $APP --port=80 --target-port=8080 --type=ClusterIP -n $NAMESPACE
            
            # Add labels for better management
            kubectl label deployment $APP app=$APP environment=$ENV -n $NAMESPACE
            kubectl label service $APP app=$APP environment=$ENV -n $NAMESPACE
          fi
        fi
        
        echo "⏳ Waiting for deployment rollout..."
        kubectl rollout status deployment/$APP -n $NAMESPACE --timeout=300s
        
        echo "✅ Deployment completed successfully"

    - name: Verify deployment
      run: |
        APP="${{ steps.deploy-info.outputs.app }}"
        ENV="${{ steps.deploy-info.outputs.environment }}"
        NAMESPACE="health-app-${ENV}"
        
        echo "🔍 Verifying deployment in $ENV environment"
        echo ""
        
        echo "📦 Pods:"
        kubectl get pods -l app=$APP -n $NAMESPACE -o wide
        echo ""
        
        echo "🌐 Services:"
        kubectl get services -l app=$APP -n $NAMESPACE -o wide
        echo ""
        
        echo "📋 Deployment status:"
        kubectl get deployment $APP -n $NAMESPACE -o wide
        echo ""
        
        # Check pod health
        READY_PODS=$(kubectl get pods -l app=$APP -n $NAMESPACE --field-selector=status.phase=Running --no-headers 2>/dev/null | wc -l)
        TOTAL_PODS=$(kubectl get pods -l app=$APP -n $NAMESPACE --no-headers 2>/dev/null | wc -l)
        
        echo "📊 Health check: $READY_PODS/$TOTAL_PODS pods ready"
        
        if [[ $READY_PODS -gt 0 ]]; then
          echo "✅ Application is running in $ENV environment"
        else
          echo "⚠️ No ready pods found - check pod logs"
          kubectl describe pods -l app=$APP -n $NAMESPACE | tail -20
        fi

    - name: Summary
      if: always()
      run: |
        echo "## Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "* App: ${{ steps.deploy-info.outputs.app }}" >> $GITHUB_STEP_SUMMARY
        echo "* Image: ${{ steps.deploy-info.outputs.image }}" >> $GITHUB_STEP_SUMMARY
        echo "* Environment: ${{ steps.deploy-info.outputs.environment }}" >> $GITHUB_STEP_SUMMARY
        echo "* Status: ${{ job.status }}" >> $GITHUB_STEP_SUMMARY