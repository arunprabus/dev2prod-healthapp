name: Core Deployment

on:
  repository_dispatch:
    types: [app-deploy]
  workflow_dispatch:
    inputs:
      app:
        description: 'Application'
        required: true
        default: 'health-api'
        type: string
      image:
        description: 'Container image'
        required: true
        default: 'arunprabusiva/health-api:latest'
        type: string
      environment:
        description: 'Environment'
        required: true
        default: 'dev'
        type: choice
        options:
        - dev
        - test
        - prod

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup kubectl
      run: |
        curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
        chmod +x kubectl
        sudo mv kubectl /usr/local/bin/
        mkdir -p ~/.kube

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-south-1

    - name: Setup kubeconfig
      run: |
        mkdir -p ~/.kube
        
        # Determine environment-specific kubeconfig path
        ENV="${{ github.event.client_payload.environment || github.event.inputs.environment || 'dev' }}"
        
        # Map environment to network
        case $ENV in
          "dev"|"test")
            KUBECONFIG_PATH="kubeconfig/lower-network.yaml"
            ;;
          "prod")
            KUBECONFIG_PATH="kubeconfig/higher-network.yaml"
            ;;
          "monitoring")
            KUBECONFIG_PATH="kubeconfig/monitoring-network.yaml"
            ;;
          *)
            KUBECONFIG_PATH="kubeconfig/lower-network.yaml"
            ;;
        esac
        
        echo "Trying to download kubeconfig for $ENV environment from $KUBECONFIG_PATH"
        
        # Try to download from S3 first
        if aws s3 cp s3://${{ secrets.TF_STATE_BUCKET }}/$KUBECONFIG_PATH ~/.kube/config 2>/dev/null; then
          echo "✅ Kubeconfig downloaded from S3"
        else
          echo "⚠️ Kubeconfig not found in S3, generating dynamically..."
          
          # Get cluster IP from AWS
          CLUSTER_IP=$(aws ec2 describe-instances \
            --filters "Name=tag:Name,Values=*k3s-node" "Name=instance-state-name,Values=running" \
            --query "Reservations[0].Instances[0].PublicIpAddress" --output text)
          
          if [[ "$CLUSTER_IP" == "None" || -z "$CLUSTER_IP" ]]; then
            echo "❌ No running K3s cluster found"
            exit 1
          fi
          
          echo "Found cluster IP: $CLUSTER_IP"
          
          # Create SSH key
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/aws-key
          chmod 600 ~/.ssh/aws-key
          
          # Test SSH key format
          if ! ssh-keygen -l -f ~/.ssh/aws-key >/dev/null 2>&1; then
            echo "❌ Invalid SSH private key format"
            echo "Please ensure SSH_PRIVATE_KEY secret contains a valid private key"
            exit 1
          fi
          
          # Get kubeconfig from cluster
          if ssh -i ~/.ssh/aws-key -o StrictHostKeyChecking=no -o ConnectTimeout=30 ubuntu@$CLUSTER_IP 'sudo cat /etc/rancher/k3s/k3s.yaml' > /tmp/k3s-config; then
            sed "s|127.0.0.1:6443|$CLUSTER_IP:6443|g" /tmp/k3s-config > ~/.kube/config
            echo "✅ Kubeconfig generated from cluster"
          else
            echo "❌ Failed to get kubeconfig from cluster"
            exit 1
          fi
        fi
        
        chmod 600 ~/.kube/config

    - name: Extract deployment info
      id: deploy-info
      run: |
        APP="${{ github.event.client_payload.app || github.event.inputs.app }}"
        IMAGE="${{ github.event.client_payload.image || github.event.inputs.image }}"
        ENV="${{ github.event.client_payload.environment || github.event.inputs.environment }}"
        
        echo "app=$APP" >> $GITHUB_OUTPUT
        echo "image=$IMAGE" >> $GITHUB_OUTPUT
        echo "environment=$ENV" >> $GITHUB_OUTPUT

    - name: Verify cluster connection
      run: |
        echo "=== Testing kubeconfig ==="
        kubectl config view --minify
        echo "=== Current context ==="
        kubectl config current-context
        echo "=== Cluster info ==="
        kubectl cluster-info
        echo "=== Nodes ==="
        kubectl get nodes

    - name: Deploy application
      run: |
        APP="${{ steps.deploy-info.outputs.app }}"
        IMAGE="${{ steps.deploy-info.outputs.image }}"
        ENV="${{ steps.deploy-info.outputs.environment }}"
        NAMESPACE="health-app-${ENV}"
        
        # Create namespace
        kubectl create namespace $NAMESPACE --dry-run=client -o yaml | kubectl apply -f -
        
        # Check if deployment exists
        if kubectl get deployment $APP -n $NAMESPACE >/dev/null 2>&1; then
          echo "Updating existing deployment"
          kubectl set image deployment/$APP $APP=$IMAGE -n $NAMESPACE
        else
          echo "Creating new deployment"
          # Apply K8s manifests if they exist
          if [[ -d "k8s" ]]; then
            # Update manifests with correct values
            sed -i "s|namespace: health-app-dev|namespace: $NAMESPACE|g" k8s/*.yaml
            sed -i "s|environment: dev|environment: $ENV|g" k8s/*.yaml
            sed -i "s|arunprabusiva/health-api:latest|$IMAGE|g" k8s/*.yaml
            kubectl apply -f k8s/ -n $NAMESPACE
          else
            # Create basic deployment
            kubectl create deployment $APP --image=$IMAGE -n $NAMESPACE
            kubectl expose deployment $APP --port=80 --target-port=8080 -n $NAMESPACE
          fi
        fi
        
        # Wait for rollout
        kubectl rollout status deployment/$APP -n $NAMESPACE --timeout=300s

    - name: Verify deployment
      run: |
        APP="${{ steps.deploy-info.outputs.app }}"
        ENV="${{ steps.deploy-info.outputs.environment }}"
        NAMESPACE="health-app-${ENV}"
        
        kubectl get pods -l app=$APP -n $NAMESPACE
        kubectl get services -l app=$APP -n $NAMESPACE

    - name: Summary
      if: always()
      run: |
        echo "## Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "* App: ${{ steps.deploy-info.outputs.app }}" >> $GITHUB_STEP_SUMMARY
        echo "* Image: ${{ steps.deploy-info.outputs.image }}" >> $GITHUB_STEP_SUMMARY
        echo "* Environment: ${{ steps.deploy-info.outputs.environment }}" >> $GITHUB_STEP_SUMMARY
        echo "* Status: ${{ job.status }}" >> $GITHUB_STEP_SUMMARY