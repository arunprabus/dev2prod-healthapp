name: Core Deployment

on:
  repository_dispatch:
    types: [ app-deploy ]
  workflow_dispatch:
    inputs:
      app:
        description: 'Application'
        required: true
        default: 'health-api'
        type: string
      image:
        description: 'Container image'
        required: true
        default: 'arunprabusiva/health-api:latest'
        type: string
      environment:
        description: 'Environment'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - test
          - prod
      runner_type:
        description: 'Runner Type'
        required: false
        default: 'aws'
        type: choice
        options:
        - aws
        - github

jobs:
  deploy:
    runs-on: ${{ github.event.inputs.runner_type == 'aws' && '[self-hosted, awsgithubrunner]' || 'ubuntu-latest' }}
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup kubectl
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-south-1

      - name: Setup kubectl
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/

      - name: Note
        run: |
          echo "📝 Note: Using AWS GitHub runners for K8s access"
          echo "Runners have direct network access to K3s clusters"

      - name: Deploy application
        run: |
          APP="${{ github.event.client_payload.app || github.event.inputs.app }}"
          IMAGE="${{ github.event.client_payload.image || github.event.inputs.image }}"
          ENV="${{ github.event.client_payload.environment || github.event.inputs.environment }}"
          NAMESPACE="health-app-${ENV}"
          
          kubectl create namespace $NAMESPACE --dry-run=client -o yaml | kubectl apply -f -
          
          if kubectl get deployment $APP -n $NAMESPACE >/dev/null 2>&1; then
            kubectl set image deployment/$APP $APP=$IMAGE -n $NAMESPACE
          else
            kubectl create deployment $APP --image=$IMAGE -n $NAMESPACE
            kubectl expose deployment $APP --port=80 --target-port=8080 -n $NAMESPACE
          fi
          
          kubectl rollout status deployment/$APP -n $NAMESPACE --timeout=300s

      - name: Verify deployment
        run: |
          APP="${{ github.event.client_payload.app || github.event.inputs.app }}"
          ENV="${{ github.event.client_payload.environment || github.event.inputs.environment }}"
          NAMESPACE="health-app-${ENV}"
          
          kubectl get pods -l app=$APP -n $NAMESPACE
          kubectl get services -l app=$APP -n $NAMESPACE