name: Cleanup GitHub Runners

on:
  workflow_dispatch:
    inputs:
      network_tier:
        description: 'Network tier to clean'
        required: true
        type: choice
        options:
        - lower
        - higher
        - monitoring
        - all
      cleanup_type:
        description: 'Cleanup type'
        required: true
        type: choice
        options:
        - offline-only
        - all-runners
        - by-pattern

jobs:
  cleanup-runners:
    runs-on: ubuntu-latest
    
    steps:
    - name: Cleanup GitHub Runners
      run: |
        echo "üßπ Cleaning up GitHub runners..."
        echo "Network tier: ${{ github.event.inputs.network_tier }}"
        echo "Cleanup type: ${{ github.event.inputs.cleanup_type }}"
        
        # Function to cleanup runners for a specific network tier
        cleanup_network_runners() {
          local network=$1
          echo "üîç Finding runners for network: $network"
          
          if [ "${{ github.event.inputs.cleanup_type }}" = "offline-only" ]; then
            RUNNERS=$(curl -s -H "Authorization: token ${{ secrets.REPO_PAT }}" \
              -H "Accept: application/vnd.github.v3+json" \
              https://api.github.com/repos/${{ github.repository }}/actions/runners | \
              jq -r ".runners[] | select(.status == \"offline\" and (.name | contains(\"$network\"))) | .id")
          elif [ "${{ github.event.inputs.cleanup_type }}" = "all-runners" ]; then
            RUNNERS=$(curl -s -H "Authorization: token ${{ secrets.REPO_PAT }}" \
              -H "Accept: application/vnd.github.v3+json" \
              https://api.github.com/repos/${{ github.repository }}/actions/runners | \
              jq -r ".runners[] | select(.name | contains(\"$network\")) | .id")
          else
            RUNNERS=$(curl -s -H "Authorization: token ${{ secrets.REPO_PAT }}" \
              -H "Accept: application/vnd.github.v3+json" \
              https://api.github.com/repos/${{ github.repository }}/actions/runners | \
              jq -r ".runners[] | select(.name | contains(\"$network\")) | .id")
          fi
          
          echo "Found runners to remove: $RUNNERS"
          
          for runner_id in $RUNNERS; do
            if [ ! -z "$runner_id" ] && [ "$runner_id" != "null" ]; then
              echo "üóëÔ∏è Removing runner ID: $runner_id"
              curl -s -X DELETE \
                -H "Authorization: token ${{ secrets.REPO_PAT }}" \
                -H "Accept: application/vnd.github.v3+json" \
                https://api.github.com/repos/${{ github.repository }}/actions/runners/$runner_id
              echo "‚úÖ Runner $runner_id removed"
              sleep 2
            fi
          done
        }
        
        # Cleanup based on network tier selection
        if [ "${{ github.event.inputs.network_tier }}" = "all" ]; then
          cleanup_network_runners "lower"
          cleanup_network_runners "higher" 
          cleanup_network_runners "monitoring"
        else
          cleanup_network_runners "${{ github.event.inputs.network_tier }}"
        fi
        
        echo "üéâ Cleanup completed!"
        
        # Show remaining runners
        echo "üìã Remaining runners:"
        curl -s -H "Authorization: token ${{ secrets.REPO_PAT }}" \
          -H "Accept: application/vnd.github.v3+json" \
          https://api.github.com/repos/${{ github.repository }}/actions/runners | \
          jq -r '.runners[] | "\(.name) - \(.status)"'