name: Terraform EC2

on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Action'
        required: true
        default: 'apply'
        type: choice
        options:
          - apply
          - destroy
          - ssh

jobs:
  terraform:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-south-1
      
      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.0

      - name: Terraform Init
        working-directory: simple-ec2
        run: terraform init

      - name: Terraform Apply
        if: github.event.inputs.action == 'apply'
        working-directory: simple-ec2
        run: |
          terraform plan -var="ssh_public_key=${{ secrets.SSH_PUBLIC_KEY }}"
          terraform apply -auto-approve -var="ssh_public_key=${{ secrets.SSH_PUBLIC_KEY }}"
          INSTANCE_IP=$(terraform output -raw instance_ip)
          echo "INSTANCE_IP=$INSTANCE_IP" >> $GITHUB_ENV
          echo "Instance IP: $INSTANCE_IP"

      - name: SSH Test
        if: github.event.inputs.action == 'apply' || github.event.inputs.action == 'ssh'
        run: |
          if [ "${{ github.event.inputs.action }}" == "ssh" ]; then
            cd simple-ec2
            INSTANCE_IP=$(terraform output -raw instance_ip)
          fi
          
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          
          # Wait for SSH with retry
          for i in {1..10}; do
            if ssh-keyscan -H $INSTANCE_IP >> ~/.ssh/known_hosts 2>/dev/null; then
              echo "SSH ready after ${i}0s"
              break
            fi
            echo "Waiting for SSH... attempt $i/10"
            sleep 10
          done
          
          ssh -i ~/.ssh/id_rsa -o ConnectTimeout=10 -o StrictHostKeyChecking=no ubuntu@$INSTANCE_IP '
            echo "Connected to $(hostname)"
            uname -a
            sudo apt update -qq && sudo apt install -y docker.io
            docker --version
          '

      - name: Terraform Destroy
        if: github.event.inputs.action == 'destroy'
        working-directory: simple-ec2
        run: terraform destroy -auto-approve -var="ssh_public_key=${{ secrets.SSH_PUBLIC_KEY }}"