name: Nuclear Cleanup

on:
  workflow_dispatch:
    inputs:
      network:
        description: 'Network Tier'
        required: true
        default: 'lower'
        type: choice
        options:
          - lower
          - higher
          - monitoring
      confirm_nuclear:
        description: 'Type "NUCLEAR" to confirm complete deletion'
        required: true
        type: string

env:
  AWS_REGION: ap-south-1

jobs:
  nuclear-cleanup:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    
    steps:
      - uses: actions/checkout@v4

      - uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Confirm Nuclear Cleanup
        run: |
          if [ "${{ github.event.inputs.confirm_nuclear }}" != "NUCLEAR" ]; then
            echo "❌ Type 'NUCLEAR' to confirm complete deletion"
            exit 1
          fi
          echo "🚨 NUCLEAR CLEANUP CONFIRMED - DELETING EVERYTHING"

      - name: Nuclear AWS Resource Cleanup
        run: |
          echo "🔥 Starting nuclear cleanup for ${{ github.event.inputs.network }} network..."
          
          # Get VPC ID
          VPC_ID=$(aws ec2 describe-vpcs --filters "Name=tag:Name,Values=health-app-${{ github.event.inputs.network }}-vpc" --query 'Vpcs[0].VpcId' --output text 2>/dev/null || echo "")
          
          if [ "$VPC_ID" == "" ] || [ "$VPC_ID" == "None" ]; then
            echo "No VPC found for ${{ github.event.inputs.network }} network"
            exit 0
          fi
          
          echo "Found VPC: $VPC_ID"
          
          # 1. Delete RDS instances
          echo "🗑️ Deleting RDS instances..."
          aws rds describe-db-instances --query 'DBInstances[?contains(DBInstanceIdentifier, `health-app`)].DBInstanceIdentifier' --output text | tr '\t' '\n' | while read DB_ID; do
            if [ "$DB_ID" != "" ]; then
              echo "Deleting RDS instance: $DB_ID"
              aws rds delete-db-instance --db-instance-identifier "$DB_ID" --skip-final-snapshot --delete-automated-backups || true
            fi
          done
          
          # Wait for RDS deletion
          echo "⏳ Waiting for RDS deletion..."
          sleep 60
          
          # 2. Delete RDS subnet groups and parameter groups
          echo "🗑️ Deleting RDS subnet and parameter groups..."
          aws rds describe-db-subnet-groups --query 'DBSubnetGroups[?contains(DBSubnetGroupName, `health-app`)].DBSubnetGroupName' --output text | tr '\t' '\n' | while read SG_NAME; do
            if [ "$SG_NAME" != "" ]; then
              echo "Deleting DB subnet group: $SG_NAME"
              aws rds delete-db-subnet-group --db-subnet-group-name "$SG_NAME" || true
            fi
          done
          
          aws rds describe-db-parameter-groups --query 'DBParameterGroups[?contains(DBParameterGroupName, `health-app`)].DBParameterGroupName' --output text | tr '\t' '\n' | while read PG_NAME; do
            if [ "$PG_NAME" != "" ]; then
              echo "Deleting DB parameter group: $PG_NAME"
              aws rds delete-db-parameter-group --db-parameter-group-name "$PG_NAME" || true
            fi
          done
          
          # 3. Terminate EC2 instances
          echo "🗑️ Terminating EC2 instances..."
          aws ec2 describe-instances --filters "Name=vpc-id,Values=$VPC_ID" "Name=instance-state-name,Values=running,stopped" --query 'Reservations[].Instances[].InstanceId' --output text | tr '\t' '\n' | while read INSTANCE_ID; do
            if [ "$INSTANCE_ID" != "" ]; then
              echo "Terminating instance: $INSTANCE_ID"
              aws ec2 terminate-instances --instance-ids "$INSTANCE_ID" || true
            fi
          done
          
          # Wait for instance termination
          echo "⏳ Waiting for instance termination..."
          sleep 120
          
          # 4. Delete NAT Gateways
          echo "🗑️ Deleting NAT Gateways..."
          aws ec2 describe-nat-gateways --filter "Name=vpc-id,Values=$VPC_ID" --query 'NatGateways[?State==`available`].NatGatewayId' --output text | tr '\t' '\n' | while read NAT_ID; do
            if [ "$NAT_ID" != "" ]; then
              echo "Deleting NAT Gateway: $NAT_ID"
              aws ec2 delete-nat-gateway --nat-gateway-id "$NAT_ID" || true
            fi
          done
          
          # 5. Release Elastic IPs
          echo "🗑️ Releasing Elastic IPs..."
          aws ec2 describe-addresses --filters "Name=domain,Values=vpc" --query 'Addresses[].AllocationId' --output text | tr '\t' '\n' | while read ALLOC_ID; do
            if [ "$ALLOC_ID" != "" ]; then
              echo "Releasing EIP: $ALLOC_ID"
              aws ec2 release-address --allocation-id "$ALLOC_ID" || true
            fi
          done
          
          # 6. Delete VPC Endpoints
          echo "🗑️ Deleting VPC Endpoints..."
          aws ec2 describe-vpc-endpoints --filters "Name=vpc-id,Values=$VPC_ID" --query 'VpcEndpoints[].VpcEndpointId' --output text | tr '\t' '\n' | while read VE_ID; do
            if [ "$VE_ID" != "" ]; then
              echo "Deleting VPC Endpoint: $VE_ID"
              aws ec2 delete-vpc-endpoint --vpc-endpoint-id "$VE_ID" || true
            fi
          done
          
          # 7. Delete Network Interfaces (ENIs)
          echo "🗑️ Deleting Network Interfaces..."
          aws ec2 describe-network-interfaces --filters "Name=vpc-id,Values=$VPC_ID" --query 'NetworkInterfaces[].NetworkInterfaceId' --output text | tr '\t' '\n' | while read ENI_ID; do
            if [ "$ENI_ID" != "" ]; then
              echo "Detaching and deleting ENI: $ENI_ID"
              aws ec2 detach-network-interface --network-interface-id "$ENI_ID" --force || true
              sleep 5
              aws ec2 delete-network-interface --network-interface-id "$ENI_ID" || true
            fi
          done
          
          # 8. Delete Security Groups (except default)
          echo "🗑️ Deleting Security Groups..."
          aws ec2 describe-security-groups --filters "Name=vpc-id,Values=$VPC_ID" --query 'SecurityGroups[?GroupName!=`default`].GroupId' --output text | tr '\t' '\n' | while read SG_ID; do
            if [ "$SG_ID" != "" ]; then
              echo "Deleting Security Group: $SG_ID"
              aws ec2 delete-security-group --group-id "$SG_ID" || true
            fi
          done
          
          # 9. Delete Route Tables (except main)
          echo "🗑️ Deleting Route Tables..."
          aws ec2 describe-route-tables --filters "Name=vpc-id,Values=$VPC_ID" --query 'RouteTables[?Associations[0].Main!=`true`].RouteTableId' --output text | tr '\t' '\n' | while read RT_ID; do
            if [ "$RT_ID" != "" ]; then
              echo "Deleting Route Table: $RT_ID"
              aws ec2 delete-route-table --route-table-id "$RT_ID" || true
            fi
          done
          
          # 10. Delete Subnets
          echo "🗑️ Deleting Subnets..."
          aws ec2 describe-subnets --filters "Name=vpc-id,Values=$VPC_ID" --query 'Subnets[].SubnetId' --output text | tr '\t' '\n' | while read SUBNET_ID; do
            if [ "$SUBNET_ID" != "" ]; then
              echo "Deleting Subnet: $SUBNET_ID"
              aws ec2 delete-subnet --subnet-id "$SUBNET_ID" || true
            fi
          done
          
          # 11. Delete Internet Gateway
          echo "🗑️ Deleting Internet Gateway..."
          aws ec2 describe-internet-gateways --filters "Name=attachment.vpc-id,Values=$VPC_ID" --query 'InternetGateways[].InternetGatewayId' --output text | tr '\t' '\n' | while read IGW_ID; do
            if [ "$IGW_ID" != "" ]; then
              echo "Detaching and deleting IGW: $IGW_ID"
              aws ec2 detach-internet-gateway --internet-gateway-id "$IGW_ID" --vpc-id "$VPC_ID" || true
              aws ec2 delete-internet-gateway --internet-gateway-id "$IGW_ID" || true
            fi
          done
          
          # 12. Delete VPC
          echo "🗑️ Deleting VPC..."
          aws ec2 delete-vpc --vpc-id "$VPC_ID" || true
          
          echo "🎉 Nuclear cleanup complete!"

      - name: Clean Terraform State
        run: |
          echo "🧹 Cleaning Terraform state..."
          
          # Install Terraform
          wget -O- https://apt.releases.hashicorp.com/gpg | sudo gpg --dearmor -o /usr/share/keyrings/hashicorp-archive-keyring.gpg
          echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/hashicorp.list
          sudo apt update && sudo apt install terraform
          
          cd infra
          terraform init -reconfigure \
            -backend-config="bucket=${{ secrets.TF_STATE_BUCKET }}" \
            -backend-config="key=health-app-${{ github.event.inputs.network }}.tfstate" \
            -backend-config="region=$AWS_REGION"
          
          # Delete entire state file
          echo "Deleting Terraform state file..."
          aws s3 rm "s3://${{ secrets.TF_STATE_BUCKET }}/health-app-${{ github.event.inputs.network }}.tfstate" || true
          
          echo "✅ Terraform state cleaned"

      - name: Clean Parameter Store
        run: |
          echo "🧹 Cleaning Parameter Store..."
          
          # Delete kubeconfig parameters (check existence first)
          delete_param() {
            local param_name="$1"
            if aws ssm get-parameter --name "$param_name" >/dev/null 2>&1; then
              echo "Deleting parameter: $param_name"
              aws ssm delete-parameter --name "$param_name"
            fi
          }
          
          if [ "${{ github.event.inputs.network }}" == "lower" ]; then
            delete_param "/dev/health-app/kubeconfig/server"
            delete_param "/dev/health-app/kubeconfig/ca-cert"
            delete_param "/dev/health-app/kubeconfig/client-cert"
            delete_param "/dev/health-app/kubeconfig/client-key"
            
            delete_param "/test/health-app/kubeconfig/server"
            delete_param "/test/health-app/kubeconfig/ca-cert"
            delete_param "/test/health-app/kubeconfig/client-cert"
            delete_param "/test/health-app/kubeconfig/client-key"
          else
            ENV_NAME="${{ github.event.inputs.network }}"
            delete_param "/$ENV_NAME/health-app/kubeconfig/server"
            delete_param "/$ENV_NAME/health-app/kubeconfig/ca-cert"
            delete_param "/$ENV_NAME/health-app/kubeconfig/client-cert"
            delete_param "/$ENV_NAME/health-app/kubeconfig/client-key"
          fi
          
          echo "✅ Parameter Store cleaned"

      - name: Verification
        run: |
          echo "🔍 Verifying cleanup..."
          
          # Check for remaining resources
          VPC_COUNT=$(aws ec2 describe-vpcs --filters "Name=tag:Name,Values=health-app-${{ github.event.inputs.network }}-vpc" --query 'length(Vpcs)' --output text)
          INSTANCE_COUNT=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=*health-app*" "Name=instance-state-name,Values=running,stopped" --query 'length(Reservations[].Instances[])' --output text)
          RDS_COUNT=$(aws rds describe-db-instances --query 'length(DBInstances[?contains(DBInstanceIdentifier, `health-app`)])' --output text)
          
          echo "Remaining resources:"
          echo "- VPCs: $VPC_COUNT"
          echo "- EC2 Instances: $INSTANCE_COUNT"
          echo "- RDS Instances: $RDS_COUNT"
          
          if [ "$VPC_COUNT" == "0" ] && [ "$INSTANCE_COUNT" == "0" ] && [ "$RDS_COUNT" == "0" ]; then
            echo "🎉 NUCLEAR CLEANUP SUCCESSFUL - All resources deleted!"
          else
            echo "⚠️ Some resources may still exist - manual cleanup may be required"
          fi