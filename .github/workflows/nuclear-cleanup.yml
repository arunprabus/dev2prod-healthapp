name: üß® Nuclear Cleanup

on:
  workflow_dispatch:
    inputs:
      cleanup_scope:
        description: 'Cleanup scope'
        required: true
        default: 'current-region'
        type: choice
        options:
          - current-region
          - all-regions
          - all
      confirm_destruction:
        description: 'Type "DESTROY" to confirm'
        required: true
        type: string

jobs:
  nuclear-cleanup:
    runs-on: ubuntu-latest
    if: github.event.inputs.confirm_destruction == 'DESTROY'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-south-1

    - name: üß® Current Region Cleanup
      if: github.event.inputs.cleanup_scope == 'current-region'
      run: |
        echo "üß® Destroying resources in ap-south-1..."
        
        # Terminate EC2 instances
        for id in $(aws ec2 describe-instances --query 'Reservations[].Instances[?State.Name!=`terminated`].InstanceId' --output text); do
          aws ec2 terminate-instances --instance-ids $id || true
        done
        
        # Delete key pairs
        for key in $(aws ec2 describe-key-pairs --query 'KeyPairs[].KeyName' --output text); do
          aws ec2 delete-key-pair --key-name $key || true
        done
        
        # Delete RDS instances
        for db in $(aws rds describe-db-instances --query 'DBInstances[].DBInstanceIdentifier' --output text); do
          aws rds delete-db-instance --db-instance-identifier $db --skip-final-snapshot || true
        done
        
        # Wait and delete VPCs
        sleep 60
        for vpc in $(aws ec2 describe-vpcs --query 'Vpcs[?IsDefault==`false`].VpcId' --output text); do
          aws ec2 delete-vpc --vpc-id $vpc || true
        done
        
        # Delete IAM roles
        for role in $(aws iam list-roles --query 'Roles[?contains(RoleName,`health-app`)].RoleName' --output text); do
          aws iam delete-role --role-name $role || true
        done

    - name: üåç All Regions Cleanup
      if: github.event.inputs.cleanup_scope == 'all-regions' || github.event.inputs.cleanup_scope == 'all'
      run: |
        echo "üåç Destroying resources in ALL regions..."
        
        for region in $(aws ec2 describe-regions --query 'Regions[].RegionName' --output text); do
          echo "Cleaning $region"
          
          # EC2 instances
          for id in $(aws ec2 describe-instances --region $region --query 'Reservations[].Instances[?State.Name!=`terminated`].InstanceId' --output text); do
            aws ec2 terminate-instances --region $region --instance-ids $id || true
          done
          
          # Key pairs
          for key in $(aws ec2 describe-key-pairs --region $region --query 'KeyPairs[].KeyName' --output text); do
            aws ec2 delete-key-pair --region $region --key-name $key || true
          done
          
          # RDS instances
          for db in $(aws rds describe-db-instances --region $region --query 'DBInstances[].DBInstanceIdentifier' --output text); do
            aws rds delete-db-instance --region $region --db-instance-identifier $db --skip-final-snapshot || true
          done
          
          # VPCs
          sleep 30
          for vpc in $(aws ec2 describe-vpcs --region $region --query 'Vpcs[?IsDefault==`false`].VpcId' --output text); do
            aws ec2 delete-vpc --region $region --vpc-id $vpc || true
          done
        done

    - name: üóëÔ∏è Global Resources Cleanup
      if: github.event.inputs.cleanup_scope == 'all'
      run: |
        echo "üóëÔ∏è Destroying global resources..."
        
        # S3 buckets
        for bucket in $(aws s3 ls | awk '{print $3}'); do
          aws s3 rb s3://$bucket --force || true
        done
        
        # IAM roles
        for role in $(aws iam list-roles --query 'Roles[?contains(RoleName,`health-app`) || contains(RoleName,`github-runner`)].RoleName' --output text); do
          aws iam delete-role --role-name $role || true
        done
        
        # IAM policies
        for policy in $(aws iam list-policies --scope Local --query 'Policies[?contains(PolicyName,`health-app`)].Arn' --output text); do
          aws iam delete-policy --policy-arn $policy || true
        done
        
        # CloudWatch logs
        for log in $(aws logs describe-log-groups --query 'logGroups[].logGroupName' --output text); do
          aws logs delete-log-group --log-group-name $log || true
        done

    - name: ‚úÖ Cleanup Complete
      run: echo "‚úÖ Nuclear cleanup completed"