name: Cost Management

on:
  schedule:
    - cron: '0 9 * * 1'   # Monitor: Every Monday at 9 AM UTC
    - cron: '0 10 * * 1'  # Cleanup: Every Monday at 10 AM UTC
  workflow_dispatch:
    inputs:
      action:
        description: 'Action to perform'
        required: true
        type: choice
        options:
        - monitor
        - cleanup
        - budget-setup
        - all
      email:
        description: 'Email for budget alerts (optional)'
        required: false
        type: string
      force_cleanup:
        description: 'Force cleanup even if cost < $0.50'
        required: false
        type: boolean
        default: false

env:
  AWS_REGION: ap-south-1

jobs:
  cost-monitor:
    runs-on: ubuntu-latest
    if: github.event.schedule == '0 9 * * 1' || github.event.inputs.action == 'monitor' || github.event.inputs.action == 'all'
    outputs:
      total-cost: ${{ steps.cost-check.outputs.cost }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Install dependencies
      run: sudo apt-get update && sudo apt-get install -y jq bc

    - name: Run Cost Check
      id: cost-check
      run: |
        chmod +x cost-check-fixed.sh
        ./cost-check-fixed.sh
        
        # Extract cost for next job
        if [ -f cost-report.json ]; then
          COST=$(jq -r '.ResultsByTime[].Total.BlendedCost.Amount // "0"' cost-report.json | awk '{sum += $1} END {print sum+0}')
          echo "cost=$COST" >> $GITHUB_OUTPUT
        fi

    - name: Upload Cost Report
      uses: actions/upload-artifact@v4
      with:
        name: cost-report-${{ github.run_number }}
        path: cost-report.json
        retention-days: 30

  auto-cleanup:
    runs-on: ubuntu-latest
    needs: [cost-monitor]
    if: |
      always() && 
      (github.event.schedule == '0 10 * * 1' || 
       github.event.inputs.action == 'cleanup' || 
       github.event.inputs.action == 'all' ||
       (needs.cost-monitor.outputs.total-cost != '' && needs.cost-monitor.outputs.total-cost > 0.50))
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Install dependencies
      run: sudo apt-get update && sudo apt-get install -y jq bc

    - name: Run Auto Cleanup
      run: |
        chmod +x cost-cleanup-auto.sh
        export BUDGET_EMAIL="${{ github.event.inputs.email || vars.BUDGET_EMAIL || 'admin@example.com' }}"
        
        if [ "${{ github.event.inputs.force_cleanup }}" = "true" ]; then
          sed -i 's/> 0.50/> 0.00/' cost-cleanup-auto.sh
        fi
        
        ./cost-cleanup-auto.sh

  budget-setup:
    runs-on: ubuntu-latest
    if: github.event.inputs.action == 'budget-setup' || github.event.inputs.action == 'all'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Setup Budgets
      run: |
        chmod +x create-budget-cli.sh
        EMAIL="${{ github.event.inputs.email || vars.BUDGET_EMAIL || 'admin@example.com' }}"
        REGIONS="${{ vars.BUDGET_REGIONS || 'us-east-1,ap-south-1' }}"
        
        # Create regional budgets
        IFS=',' read -ra REGION_ARRAY <<< "$REGIONS"
        for region in "${REGION_ARRAY[@]}"; do
          ./create-budget-cli.sh "$EMAIL" "1.00" "ZeroCost-${region}-Alert"
        done
        
        # Create overall budget
        ./create-budget-cli.sh "$EMAIL" "5.00" "ZeroCost-Overall-Alert"

  summary:
    runs-on: ubuntu-latest
    needs: [cost-monitor, auto-cleanup, budget-setup]
    if: always()
    
    steps:
    - name: Generate Summary
      run: |
        echo "## 💰 Cost Management Summary" >> $GITHUB_STEP_SUMMARY
        echo "* Date: $(date)" >> $GITHUB_STEP_SUMMARY
        echo "* Action: ${{ github.event.inputs.action || 'scheduled' }}" >> $GITHUB_STEP_SUMMARY
        echo "* Triggered by: ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ needs.cost-monitor.result }}" = "success" ]; then
          echo "✅ **Cost Monitor**: Completed" >> $GITHUB_STEP_SUMMARY
          if [ "${{ needs.cost-monitor.outputs.total-cost }}" != "" ]; then
            echo "   - Weekly Cost: \$${{ needs.cost-monitor.outputs.total-cost }}" >> $GITHUB_STEP_SUMMARY
          fi
        fi
        
        if [ "${{ needs.auto-cleanup.result }}" = "success" ]; then
          echo "✅ **Auto Cleanup**: Completed" >> $GITHUB_STEP_SUMMARY
        elif [ "${{ needs.auto-cleanup.result }}" = "skipped" ]; then
          echo "⏭️ **Auto Cleanup**: Skipped (cost within limits)" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.budget-setup.result }}" = "success" ]; then
          echo "✅ **Budget Setup**: Completed" >> $GITHUB_STEP_SUMMARY
        elif [ "${{ needs.budget-setup.result }}" = "skipped" ]; then
          echo "⏭️ **Budget Setup**: Skipped" >> $GITHUB_STEP_SUMMARY
        fi