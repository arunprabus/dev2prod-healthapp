name: Cost Management

on:
  schedule:
    - cron: '0 9 * * 1'   # Monitor: Every Monday at 9 AM UTC
    - cron: '0 10 * * 1'  # Cleanup: Every Monday at 10 AM UTC
  workflow_dispatch:
    inputs:
      action:
        description: 'Action to perform'
        required: true
        type: choice
        options:
        - monitor
        - cleanup
        - budget-setup
        - breakdown
        - rds-backup
        - s3-export
        - all
      email:
        description: 'Email for budget alerts (optional)'
        required: false
        type: string
      force_cleanup:
        description: 'Force cleanup even if cost < $0.50'
        required: false
        type: boolean
        default: false

env:
  AWS_REGION: ap-south-1

jobs:
  cost-monitor:
    runs-on: ubuntu-latest
    if: github.event.schedule == '0 9 * * 1' || github.event.inputs.action == 'monitor' || github.event.inputs.action == 'all'
    outputs:
      total-cost: ${{ steps.cost-check.outputs.cost }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Install dependencies
      run: sudo apt-get update && sudo apt-get install -y jq bc

    - name: Run Cost Check
      id: cost-check
      run: |
        chmod +x scripts/cost-check-fixed.sh
        chmod +x scripts/cost-breakdown.sh
        ./scripts/cost-check-fixed.sh
        
        # Extract cost for next job
        if [ -f cost-report.json ]; then
          COST=$(jq -r '.ResultsByTime[].Total.BlendedCost.Amount // "0"' cost-report.json | awk '{sum += $1} END {print sum+0}')
          echo "cost=$COST" >> $GITHUB_OUTPUT
          
          # Run detailed breakdown if cost > $0.50
          if (( $(echo "$COST > 0.50" | bc -l 2>/dev/null || echo "0") )); then
            echo "💰 Cost detected: \$$COST - Running detailed breakdown..."
            ./scripts/cost-breakdown.sh
          fi
        fi

    - name: Upload Cost Report
      uses: actions/upload-artifact@v4
      with:
        name: cost-report-${{ github.run_number }}
        path: cost-report.json
        retention-days: 30

  rds-backup:
    runs-on: ubuntu-latest
    if: github.event.inputs.action == 'rds-backup' || github.event.inputs.action == 'all'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Create RDS Snapshot
      run: |
        # Check if RDS instance exists and is running
        RDS_STATUS=$(aws rds describe-db-instances --db-instance-identifier healthapidb --query 'DBInstances[0].DBInstanceStatus' --output text 2>/dev/null || echo "not-found")
        
        if [ "$RDS_STATUS" = "available" ] || [ "$RDS_STATUS" = "stopped" ]; then
          SNAPSHOT_ID="healthapidb-backup-$(date +%Y%m%d-%H%M)"
          echo "Creating RDS snapshot: $SNAPSHOT_ID"
          
          # Start RDS if stopped
          if [ "$RDS_STATUS" = "stopped" ]; then
            aws rds start-db-instance --db-instance-identifier healthapidb
            aws rds wait db-instance-available --db-instance-identifier healthapidb
          fi
          
          # Create snapshot
          aws rds create-db-snapshot --db-instance-identifier healthapidb --db-snapshot-identifier "$SNAPSHOT_ID"
          aws rds wait db-snapshot-completed --db-snapshot-identifier "$SNAPSHOT_ID"
          
          echo "✅ Snapshot created: $SNAPSHOT_ID"
          echo "💰 Monthly cost: ~$1.90 (20GB × $0.095/GB)"
          
          # Stop RDS to save costs
          aws rds stop-db-instance --db-instance-identifier healthapidb
          echo "✅ RDS stopped to save $13-15/month"
        else
          echo "❌ RDS instance 'healthapidb' not found or not in valid state: $RDS_STATUS"
        fi

  s3-export:
    runs-on: ubuntu-latest
    if: github.event.inputs.action == 's3-export' || github.event.inputs.action == 'all'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Setup S3 Export Role
      run: |
        # Check if role exists
        if ! aws iam get-role --role-name rds-s3-export-role >/dev/null 2>&1; then
          echo "Creating RDS S3 export role..."
          
          # Create trust policy
          cat > trust-policy.json << EOF
        {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": "export.rds.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        }
        EOF
          
          # Create role
          aws iam create-role --role-name rds-s3-export-role --assume-role-policy-document file://trust-policy.json
          
          # Create S3 policy
          cat > s3-policy.json << EOF
        {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "s3:PutObject*",
                "s3:ListBucket",
                "s3:GetObject*"
              ],
              "Resource": [
                "arn:aws:s3:::health-app-terraform-state",
                "arn:aws:s3:::health-app-terraform-state/*"
              ]
            }
          ]
        }
        EOF
          
          # Attach policy
          aws iam put-role-policy --role-name rds-s3-export-role --policy-name S3ExportPolicy --policy-document file://s3-policy.json
          
          echo "✅ RDS S3 export role created"
        else
          echo "✅ RDS S3 export role already exists"
        fi

    - name: Export Latest Snapshot to S3
      run: |
        # Get latest snapshot
        LATEST_SNAPSHOT=$(aws rds describe-db-snapshots --db-instance-identifier healthapidb --snapshot-type manual --query 'DBSnapshots | sort_by(@, &SnapshotCreateTime) | [-1].DBSnapshotIdentifier' --output text 2>/dev/null || echo "none")
        
        if [ "$LATEST_SNAPSHOT" != "none" ] && [ "$LATEST_SNAPSHOT" != "None" ]; then
          EXPORT_ID="healthapi-s3-export-$(date +%Y%m%d-%H%M)"
          
          echo "Exporting snapshot $LATEST_SNAPSHOT to S3..."
          
          # Create customer-managed KMS key if needed
          KMS_KEY=$(aws kms list-keys --query 'Keys[?KeyManager==`CUSTOMER`] | [0].KeyId' --output text 2>/dev/null || echo "none")
          if [ "$KMS_KEY" = "none" ] || [ "$KMS_KEY" = "None" ]; then
            echo "Creating customer-managed KMS key..."
            KMS_KEY=$(aws kms create-key --description "RDS Export Key" --query 'KeyMetadata.KeyId' --output text)
            echo "✅ KMS key created: $KMS_KEY"
          fi
          
          # Start export task
          aws rds start-export-task \
            --export-task-identifier "$EXPORT_ID" \
            --source-arn "arn:aws:rds:${{ env.AWS_REGION }}:$(aws sts get-caller-identity --query Account --output text):snapshot:$LATEST_SNAPSHOT" \
            --s3-bucket-name health-app-terraform-state \
            --s3-prefix db-exports/ \
            --iam-role-arn "arn:aws:iam::$(aws sts get-caller-identity --query Account --output text):role/rds-s3-export-role" \
            --kms-key-id "$KMS_KEY"
          
          echo "✅ S3 export started: $EXPORT_ID"
          echo "💰 S3 storage cost: ~$0.05/month (97% savings vs snapshot)"
          echo "📍 Location: s3://health-app-terraform-state/db-exports/"
          
          # Wait for export to complete (optional)
          echo "Waiting for export to complete..."
          while true; do
            STATUS=$(aws rds describe-export-tasks --export-task-identifier "$EXPORT_ID" --query 'ExportTasks[0].Status' --output text)
            echo "Export status: $STATUS"
            
            if [ "$STATUS" = "COMPLETE" ]; then
              echo "✅ Export completed successfully"
              break
            elif [ "$STATUS" = "FAILED" ] || [ "$STATUS" = "CANCELED" ]; then
              echo "❌ Export failed with status: $STATUS"
              exit 1
            fi
            
            sleep 30
          done
          
          # Optional: Delete expensive snapshot after successful S3 export
          echo "Consider deleting RDS snapshot to save $1.85/month:"
          echo "aws rds delete-db-snapshot --db-snapshot-identifier $LATEST_SNAPSHOT"
          
        else
          echo "❌ No RDS snapshots found for healthapidb"
          echo "Run 'rds-backup' action first to create a snapshot"
        fi

  auto-cleanup:
    runs-on: ubuntu-latest
    needs: [cost-monitor]
    if: |
      always() && 
      (github.event.schedule == '0 10 * * 1' || 
       github.event.inputs.action == 'cleanup' || 
       github.event.inputs.action == 'all' ||
       (needs.cost-monitor.outputs.total-cost != '' && needs.cost-monitor.outputs.total-cost > 0.50))
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Install dependencies
      run: sudo apt-get update && sudo apt-get install -y jq bc

    - name: Run Auto Cleanup
      run: |
        chmod +x scripts/cost-cleanup-auto.sh
        export BUDGET_EMAIL="${{ github.event.inputs.email || vars.BUDGET_EMAIL || 'admin@example.com' }}"
        
        if [ "${{ github.event.inputs.force_cleanup }}" = "true" ]; then
          sed -i 's/> 0.50/> 0.00/' scripts/cost-cleanup-auto.sh
        fi
        
        ./scripts/cost-cleanup-auto.sh

  cost-breakdown:
    runs-on: ubuntu-latest
    if: github.event.inputs.action == 'breakdown' || github.event.inputs.action == 'all'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Install dependencies
      run: sudo apt-get update && sudo apt-get install -y jq bc

    - name: Run Cost Breakdown
      run: |
        chmod +x scripts/cost-breakdown.sh
        ./scripts/cost-breakdown.sh

  budget-setup:
    runs-on: ubuntu-latest
    if: github.event.inputs.action == 'budget-setup' || github.event.inputs.action == 'all'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Setup Budgets
      run: |
        chmod +x scripts/create-budget-cli.sh
        EMAIL="${{ github.event.inputs.email || vars.BUDGET_EMAIL || 'admin@example.com' }}"
        REGIONS="${{ vars.BUDGET_REGIONS || 'us-east-1,ap-south-1' }}"
        
        # Create regional budgets
        IFS=',' read -ra REGION_ARRAY <<< "$REGIONS"
        for region in "${REGION_ARRAY[@]}"; do
          ./scripts/create-budget-cli.sh "$EMAIL" "1.00" "ZeroCost-${region}-Alert"
        done
        
        # Create overall budget
        ./scripts/create-budget-cli.sh "$EMAIL" "5.00" "ZeroCost-Overall-Alert"

  summary:
    runs-on: ubuntu-latest
    needs: [cost-monitor, auto-cleanup, cost-breakdown, budget-setup, rds-backup, s3-export]
    if: always()
    
    steps:
    - name: Generate Summary
      run: |
        echo "## 💰 Cost Management Summary" >> $GITHUB_STEP_SUMMARY
        echo "* Date: $(date)" >> $GITHUB_STEP_SUMMARY
        echo "* Action: ${{ github.event.inputs.action || 'scheduled' }}" >> $GITHUB_STEP_SUMMARY
        echo "* Triggered by: ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ needs.cost-monitor.result }}" = "success" ]; then
          echo "✅ **Cost Monitor**: Completed" >> $GITHUB_STEP_SUMMARY
          if [ "${{ needs.cost-monitor.outputs.total-cost }}" != "" ]; then
            COST="${{ needs.cost-monitor.outputs.total-cost }}"
            echo "   - Weekly Cost: \$$COST" >> $GITHUB_STEP_SUMMARY
            
            if (( $(echo "$COST > 0.50" | bc -l 2>/dev/null || echo "0") )); then
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "### 🔍 Cost Breakdown Analysis" >> $GITHUB_STEP_SUMMARY
              echo "**Detailed analysis was performed - check workflow logs**" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "**Likely cost sources:**" >> $GITHUB_STEP_SUMMARY
              echo "- NAT Gateway: ~\$45/month" >> $GITHUB_STEP_SUMMARY
              echo "- Load Balancer: ~\$18/month" >> $GITHUB_STEP_SUMMARY
              echo "- Elastic IP: ~\$3.6/month" >> $GITHUB_STEP_SUMMARY
              echo "- Cross-region data transfer" >> $GITHUB_STEP_SUMMARY
            fi
          fi
        fi
        
        if [ "${{ needs.auto-cleanup.result }}" = "success" ]; then
          echo "✅ **Auto Cleanup**: Completed" >> $GITHUB_STEP_SUMMARY
        elif [ "${{ needs.auto-cleanup.result }}" = "skipped" ]; then
          echo "⏭️ **Auto Cleanup**: Skipped (cost within limits)" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.cost-breakdown.result }}" = "success" ]; then
          echo "✅ **Cost Breakdown**: Completed" >> $GITHUB_STEP_SUMMARY
        elif [ "${{ needs.cost-breakdown.result }}" = "skipped" ]; then
          echo "⏭️ **Cost Breakdown**: Skipped" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.budget-setup.result }}" = "success" ]; then
          echo "✅ **Budget Setup**: Completed" >> $GITHUB_STEP_SUMMARY
        elif [ "${{ needs.budget-setup.result }}" = "skipped" ]; then
          echo "⏭️ **Budget Setup**: Skipped" >> $GITHUB_STEP_SUMMARY
        fi