name: Health API Application Deployment

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target Environment'
        required: true
        default: 'dev'
        type: choice
        options:
        - dev
        - test
        - prod
#  push:
#    branches:
#      - develop
#      - staging
#      - main
#    paths:
#      - '**'
#      - '!infra/**'
#      - '!.github/workflows/infra-deploy.yml'
#      - '!README.md'
#      - '!*.md'

env:
  AWS_REGION: ap-south-1

jobs:
  determine-environment:
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.set-env.outputs.environment }}
    steps:
    - id: set-env
      run: |
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
        elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
          echo "environment=prod" >> $GITHUB_OUTPUT
        elif [[ "${{ github.ref }}" == "refs/heads/staging" ]]; then
          echo "environment=test" >> $GITHUB_OUTPUT
        else
          echo "environment=dev" >> $GITHUB_OUTPUT
        fi

  build-and-push:
    needs: determine-environment
    runs-on: ubuntu-latest
    environment: ${{ needs.determine-environment.outputs.environment }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build and push
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.login-ecr.outputs.registry }}/health-api:${{ needs.determine-environment.outputs.environment }}-${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy:
    needs: [determine-environment, build-and-push]
    runs-on: ubuntu-latest
    environment: ${{ needs.determine-environment.outputs.environment }}

    steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Setup kubectl
      run: |
        curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
        chmod +x kubectl
        sudo mv kubectl /usr/local/bin/

    - name: Configure K8s access
      run: |
        # Use environment-specific kubeconfig
        ENV=${{ needs.determine-environment.outputs.environment }}
        
        # Try environment-specific kubeconfig first
        if [[ -n "${{ secrets[format('KUBECONFIG_{0}', env.ENVIRONMENT)] }}" ]]; then
          echo "Using environment-specific kubeconfig for $ENV"
          echo "${{ secrets[format('KUBECONFIG_{0}', env.ENVIRONMENT)] }}" | base64 -d > ~/.kube/config
        else
          echo "Using default kubeconfig"
          echo "${{ secrets.KUBECONFIG }}" | base64 -d > ~/.kube/config
        fi
        
        # Verify cluster connection
        kubectl cluster-info
        kubectl get nodes

    - name: Deploy to K8s
      run: |
        # Update image in deployment
        kubectl set image deployment/health-api health-api=${{ steps.login-ecr.outputs.registry }}/health-api:${{ needs.determine-environment.outputs.environment }}-${{ github.sha }} -n health-app-${{ needs.determine-environment.outputs.environment }}
        
        # Wait for rollout
        kubectl rollout status deployment/health-api -n health-app-${{ needs.determine-environment.outputs.environment }} --timeout=300s
