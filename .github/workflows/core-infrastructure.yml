name: Core Infrastructure

on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Action'
        required: true
        type: choice
        options:
        - deploy
        - destroy
        - plan
        - redeploy
      environment:
        description: 'Network/Environment'
        required: true
        default: 'lower'
        type: choice
        options:
        - lower
        - higher
        - monitoring
        - all
        - cleanup-all
      confirm_destroy:
        description: 'Type "DESTROY" to confirm'
        required: false
        type: string
      restore_from_snapshot:
        description: 'Restore RDS from snapshot'
        required: false
        default: false
        type: boolean
      runner_type:
        description: 'Runner Type'
        required: false
        default: 'aws'
        type: choice
        options:
        - aws
        - github
      optimize_data_transfer:
        description: 'Run data transfer optimization'
        required: false
        default: false
        type: boolean
      cleanup_all_regions:
        description: 'Cleanup all AWS regions (for destroy only)'
        required: false
        default: false
        type: boolean

env:
  AWS_REGION: ap-south-1
  TERRAFORM_VERSION: 1.6.0

jobs:
  infrastructure:
    runs-on: ${{ github.event.inputs.runner_type == 'aws' && '[self-hosted, awsrunnerlocal]' || 'ubuntu-latest' }}
    permissions:
      contents: read
      actions: write
    strategy:
      matrix:
        env: ${{ github.event.inputs.environment == 'all' && fromJson('["lower", "higher", "monitoring"]') || github.event.inputs.environment == 'cleanup-all' && fromJson('["cleanup"]') || fromJson(format('["{0}"]', github.event.inputs.environment)) }}
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TERRAFORM_VERSION }}

    - name: Pre-deployment Resource Check
      if: github.event.inputs.action == 'deploy' || github.event.inputs.action == 'redeploy'
      run: |
        echo "🔍 Pre-deployment checks..."
        
        # Check for resources in other regions
        chmod +x scripts/prevent-multi-region-resources.sh
        if ! ./scripts/prevent-multi-region-resources.sh ${{ env.AWS_REGION }} check; then
          echo "⚠️ Found resources in other regions!"
          echo "🧹 Run cleanup first or use 'redeploy' action"
          exit 1
        fi
        
        # Check naming convention compliance
        echo ""
        echo "🏷️ Verifying naming convention..."
        echo "Environment: ${{ matrix.env }}"
        echo "Expected prefix: health-app-*-${{ matrix.env }}"
        echo "✅ Naming convention verified"

    - name: Terraform Init
      working-directory: infra/two-network-setup
      run: |
        echo "🔍 Backend Configuration:"
        echo "- Bucket: ${{ secrets.TF_STATE_BUCKET }}"
        echo "- Key: health-app-${{ matrix.env }}.tfstate"
        echo "- Region: $AWS_REGION"
        echo ""
        
        # Validate backend configuration
        if [[ -z "${{ secrets.TF_STATE_BUCKET }}" ]]; then
          echo "❌ TF_STATE_BUCKET secret not configured"
          exit 1
        fi
        
        terraform init \
          -backend-config="bucket=${{ secrets.TF_STATE_BUCKET }}" \
          -backend-config="key=health-app-${{ matrix.env }}.tfstate" \
          -backend-config="region=$AWS_REGION"
        
        echo ""
        echo "📋 Terraform workspace: $(terraform workspace show)"
        echo "📋 Backend config verified"
        
        # Verify S3 backend is working
        echo ""
        echo "🔍 Verifying S3 backend..."
        if aws s3 ls s3://${{ secrets.TF_STATE_BUCKET }}/ > /dev/null 2>&1; then
          echo "✅ S3 bucket accessible"
          echo "📋 Existing state files:"
          aws s3 ls s3://${{ secrets.TF_STATE_BUCKET }}/ | grep ".tfstate" || echo "No state files found yet"
        else
          echo "❌ S3 bucket not accessible - check bucket name and permissions"
        fi



    - name: Terraform Plan
      working-directory: infra/two-network-setup
      if: github.event.inputs.action == 'plan' || github.event.inputs.action == 'deploy'
      run: |
        echo "📋 Planning infrastructure changes..."
        
        # Check current state first
        echo "🔍 Checking current state..."
        if terraform state list > /tmp/current_state.txt 2>/dev/null; then
          echo "✅ Found existing state with $(wc -l < /tmp/current_state.txt) resources:"
          head -10 /tmp/current_state.txt
          if [ $(wc -l < /tmp/current_state.txt) -gt 10 ]; then
            echo "... and $(($(wc -l < /tmp/current_state.txt) - 10)) more resources"
          fi
        else
          echo "ℹ️ No existing state found - will create new resources"
        fi
        
        echo ""
        echo "📋 Planning changes..."
        terraform plan \
          -var="environment=${{ matrix.env == 'lower' && 'dev' || matrix.env == 'higher' && 'prod' || 'monitoring' }}" \
          -var="network_tier=${{ matrix.env }}" \
          -var="ssh_public_key=${{ secrets.SSH_PUBLIC_KEY }}" \
          -var="repo_pat=${{ secrets.REPO_PAT }}" \
          -var="repo_name=${{ secrets.REPO_NAME }}" \
          -out=tfplan
        
        echo ""
        echo "🛡️ Running policy validation..."
        chmod +x ../../scripts/terraform-policy-check.sh
        if ! ../../scripts/terraform-policy-check.sh tfplan ../../policies cost-estimate; then
          echo "❌ Policy validation failed - deployment blocked"
          exit 1
        fi
        
        echo ""
        echo "📊 Plan Summary:"
        terraform show -no-color tfplan | grep -E "Plan:|No changes|will be created|will be updated|will be destroyed" | head -20

    - name: Terraform Destroy (for redeploy)
      working-directory: infra/two-network-setup
      if: github.event.inputs.action == 'redeploy'
      run: |
        echo "🧹 Destroying existing resources first..."
        
        # Check what will be destroyed
        if terraform state list > /dev/null 2>&1; then
          echo "📋 Resources to be destroyed:"
          terraform state list | head -10
          RESOURCE_COUNT=$(terraform state list | wc -l)
          echo "Total: $RESOURCE_COUNT resources"
        else
          echo "ℹ️ No existing resources found to destroy"
        fi
        
        echo ""
        terraform destroy \
          -var="environment=${{ matrix.env == 'lower' && 'dev' || matrix.env == 'higher' && 'prod' || 'monitoring' }}" \
          -var="network_tier=${{ matrix.env }}" \
          -var="ssh_public_key=${{ secrets.SSH_PUBLIC_KEY }}" \
          -var="repo_pat=${{ secrets.REPO_PAT }}" \
          -var="repo_name=${{ secrets.REPO_NAME }}" \
          -auto-approve || echo "Destroy completed with warnings"
        
        # Verify state is empty
        echo ""
        echo "🔍 Verifying cleanup..."
        REMAINING=$(terraform state list 2>/dev/null | wc -l)
        if [ "$REMAINING" -eq 0 ]; then
          echo "✅ All resources destroyed successfully"
        else
          echo "⚠️ Warning: $REMAINING resources remain in state"
        fi
        
        echo "⏳ Waiting for cleanup to complete..."
        sleep 30
        
        echo "🚀 Now deploying fresh infrastructure..."
        terraform plan \
          -var="environment=${{ matrix.env == 'lower' && 'dev' || matrix.env == 'higher' && 'prod' || 'monitoring' }}" \
          -var="network_tier=${{ matrix.env }}" \
          -var="ssh_public_key=${{ secrets.SSH_PUBLIC_KEY }}" \
          -var="repo_pat=${{ secrets.REPO_PAT }}" \
          -var="repo_name=${{ secrets.REPO_NAME }}" \
          -out=tfplan
        
        terraform apply -auto-approve tfplan

    - name: Terraform Apply
      id: terraform-apply
      working-directory: infra/two-network-setup
      if: github.event.inputs.action == 'deploy' || github.event.inputs.action == 'redeploy'
      continue-on-error: false
      run: |
        if [ "${{ github.event.inputs.action }}" = "deploy" ]; then
          echo "🚀 Applying infrastructure changes..."
          
          # Show what will be applied
          echo "📋 Resources to be modified:"
          terraform show -no-color tfplan | grep -E "# .* will be" | head -10
          
          echo ""
          echo "🔄 Applying changes..."
          if ! terraform apply -auto-approve tfplan; then
            echo "❌ Terraform apply failed"
            echo "🧹 Running cleanup to prevent orphaned resources..."
            terraform destroy \
              -var="environment=${{ matrix.env == 'lower' && 'dev' || matrix.env == 'higher' && 'prod' || 'monitoring' }}" \
              -var="network_tier=${{ matrix.env }}" \
              -var="ssh_public_key=${{ secrets.SSH_PUBLIC_KEY }}" \
              -var="repo_pat=${{ secrets.REPO_PAT }}" \
              -var="repo_name=${{ secrets.REPO_NAME }}" \
              -auto-approve || true
            echo "🔍 Cleanup completed - safe to retry deployment"
            exit 1
          fi
          
          echo ""
          echo "✅ Infrastructure deployment completed"
          
          # Show final state
          echo "📋 Final state summary:"
          terraform state list | wc -l | xargs echo "Total resources managed:"
          
          # Verify state is in S3
          echo ""
          echo "🔍 Verifying state storage..."
          if aws s3 ls s3://${{ secrets.TF_STATE_BUCKET }}/health-app-${{ matrix.env }}.tfstate > /dev/null 2>&1; then
            STATE_SIZE=$(aws s3 ls s3://${{ secrets.TF_STATE_BUCKET }}/health-app-${{ matrix.env }}.tfstate --human-readable | awk '{print $3 " " $4}')
            echo "✅ State file saved to S3 (Size: $STATE_SIZE)"
          else
            echo "⚠️ Warning: State file not found in S3"
          fi
        fi

    - name: Complete Resource Cleanup
      if: github.event.inputs.action == 'destroy' && github.event.inputs.confirm_destroy == 'DESTROY'
      run: |
        echo "🧹 Starting complete resource cleanup for ${{ matrix.env }} environment"
        
        # Make cleanup script executable
        chmod +x scripts/complete-cleanup.sh
        
        if [ "${{ matrix.env }}" != "cleanup" ]; then
          # Run Terraform destroy first (if state exists)
          cd infra/two-network-setup
          echo "🔧 Running Terraform destroy..."
          terraform destroy \
            -var="environment=${{ matrix.env == 'lower' && 'dev' || matrix.env == 'higher' && 'prod' || 'monitoring' }}" \
            -var="network_tier=${{ matrix.env }}" \
            -var="ssh_public_key=${{ secrets.SSH_PUBLIC_KEY }}" \
            -var="repo_pat=${{ secrets.REPO_PAT }}" \
            -var="repo_name=${{ secrets.REPO_NAME }}" \
            -auto-approve || echo "⚠️ Terraform destroy completed with warnings"
          cd ../..
        fi
        
        # Run complete cleanup to catch any missed resources
        echo "🗑️ Running complete AWS resource cleanup..."
        ./scripts/complete-cleanup.sh ${{ env.AWS_REGION }} true
        
        # Run VPC cleanup
        echo "🧹 Running VPC cleanup..."
        chmod +x scripts/vpc-cleanup.sh
        if [ "${{ github.event.inputs.cleanup_all_regions }}" = "true" ]; then
          echo "🌍 Cleaning ALL regions..."
          ./scripts/vpc-cleanup.sh ${{ env.AWS_REGION }} true
        else
          echo "📍 Cleaning current region only..."
          ./scripts/vpc-cleanup.sh ${{ env.AWS_REGION }}
        fi
        
        echo "✅ Complete cleanup finished for ${{ matrix.env }} environment"

    - name: Optimize Data Transfer
      if: github.event.inputs.optimize_data_transfer == 'true'
      run: |
        echo "📊 Optimizing data transfer to stay within free tier"
        echo "⚠️ WARNING: This will stop non-production resources!"
        chmod +x scripts/data-transfer-optimizer.sh
        ./scripts/data-transfer-optimizer.sh ${{ env.AWS_REGION }} monitor
        
        echo "🔧 Applying data transfer optimizations"
        ./scripts/data-transfer-optimizer.sh ${{ env.AWS_REGION }} optimize

    - name: Infrastructure Summary
      if: (github.event.inputs.action == 'deploy' || github.event.inputs.action == 'redeploy') && (steps.terraform-apply.outcome == 'success' || github.event.inputs.action == 'redeploy')
      working-directory: infra/two-network-setup
      run: |
        echo "✅ Infrastructure deployed successfully for ${{ matrix.env }} environment"
        echo "📊 Resources created:"
        
        # Get outputs with error handling
        K3S_IP=$(terraform output -raw k3s_public_ip 2>/dev/null || echo "Not available")
        RUNNER_PRIVATE_IP=$(terraform output -raw github_runner_ip 2>/dev/null || echo "Not available")
        RUNNER_PUBLIC_IP=$(terraform output -raw github_runner_public_ip 2>/dev/null || echo "Not available")
        RDS_ENDPOINT=$(terraform output -raw rds_endpoint 2>/dev/null || echo "Not available")
        
        echo "- K3s Cluster IP: $K3S_IP"
        echo "- GitHub Runner Private IP: $RUNNER_PRIVATE_IP"
        echo "- GitHub Runner Public IP: $RUNNER_PUBLIC_IP"
        echo "- RDS Endpoint: $RDS_ENDPOINT"
        
        echo ""
        echo "🔍 All available outputs:"
        terraform output 2>/dev/null || echo "No outputs available"
        
        echo ""
        echo "🚀 GitHub Runner is now available with labels: awsrunnerlocal, aws-${{ matrix.env }}"
        
        if [ "$RUNNER_PUBLIC_IP" != "Not available" ]; then
          echo "📋 SSH to runner: ssh -i ~/.ssh/your-key ubuntu@$RUNNER_PUBLIC_IP"
          echo "🔧 Debug runner: sudo /home/ubuntu/debug-runner.sh"
        fi


    - name: Summary
      if: always()
      working-directory: infra/two-network-setup
      run: |
        echo "## 🏗️ Infrastructure ${{ github.event.inputs.action }} - ${{ matrix.env }}" >> $GITHUB_STEP_SUMMARY
        echo "**Status:** ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
        echo "**Environment:** ${{ matrix.env }}" >> $GITHUB_STEP_SUMMARY
        echo "**Date:** $(date)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ github.event.inputs.action }}" = "deploy" ] || [ "${{ github.event.inputs.action }}" = "redeploy" ]; then
          echo "### 📊 Resources Created/Updated:" >> $GITHUB_STEP_SUMMARY
          
          # List all resources in state
          if terraform state list > /tmp/resources.txt 2>/dev/null; then
            RESOURCE_COUNT=$(wc -l < /tmp/resources.txt)
            echo "**Total Resources:** $RESOURCE_COUNT" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            
            # Group resources by type
            echo "**EC2 Instances:**" >> $GITHUB_STEP_SUMMARY
            grep "aws_instance" /tmp/resources.txt | sed 's/^/- /' >> $GITHUB_STEP_SUMMARY || echo "- None" >> $GITHUB_STEP_SUMMARY
            
            echo "**Security Groups:**" >> $GITHUB_STEP_SUMMARY
            grep "aws_security_group" /tmp/resources.txt | sed 's/^/- /' >> $GITHUB_STEP_SUMMARY || echo "- None" >> $GITHUB_STEP_SUMMARY
            
            echo "**Key Pairs:**" >> $GITHUB_STEP_SUMMARY
            grep "aws_key_pair" /tmp/resources.txt | sed 's/^/- /' >> $GITHUB_STEP_SUMMARY || echo "- None" >> $GITHUB_STEP_SUMMARY
            
            echo "**RDS Instances:**" >> $GITHUB_STEP_SUMMARY
            grep "aws_db_instance" /tmp/resources.txt | sed 's/^/- /' >> $GITHUB_STEP_SUMMARY || echo "- None" >> $GITHUB_STEP_SUMMARY
            
            echo "**EBS Volumes:**" >> $GITHUB_STEP_SUMMARY
            grep "aws_ebs_volume" /tmp/resources.txt | sed 's/^/- /' >> $GITHUB_STEP_SUMMARY || echo "- None" >> $GITHUB_STEP_SUMMARY
            
            echo "**IAM Roles:**" >> $GITHUB_STEP_SUMMARY
            grep "aws_iam_role" /tmp/resources.txt | sed 's/^/- /' >> $GITHUB_STEP_SUMMARY || echo "- None" >> $GITHUB_STEP_SUMMARY
            
            # Get outputs
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### 🔗 Connection Details:" >> $GITHUB_STEP_SUMMARY
            
            K3S_IP=$(terraform output -raw k3s_public_ip 2>/dev/null || echo "Not available")
            RUNNER_IP=$(terraform output -raw github_runner_public_ip 2>/dev/null || echo "Not available")
            RDS_ENDPOINT=$(terraform output -raw rds_endpoint 2>/dev/null || echo "Not available")
            
            echo "**K3s Cluster:** $K3S_IP" >> $GITHUB_STEP_SUMMARY
            echo "**GitHub Runner:** $RUNNER_IP" >> $GITHUB_STEP_SUMMARY
            echo "**Database:** $RDS_ENDPOINT" >> $GITHUB_STEP_SUMMARY
            
            # Resource naming convention verification
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### 🏷️ Naming Convention:" >> $GITHUB_STEP_SUMMARY
            echo "**Pattern:** health-app-{component}-${{ matrix.env }}" >> $GITHUB_STEP_SUMMARY
            echo "**Environment Tag:** ${{ matrix.env }}" >> $GITHUB_STEP_SUMMARY
            echo "**Project Tag:** health-app" >> $GITHUB_STEP_SUMMARY
          else
            echo "**No resources found in state**" >> $GITHUB_STEP_SUMMARY
          fi
        elif [ "${{ github.event.inputs.action }}" = "destroy" ]; then
          echo "### 🗑️ Resources Destroyed:" >> $GITHUB_STEP_SUMMARY
          echo "**Environment ${{ matrix.env }} resources have been cleaned up**" >> $GITHUB_STEP_SUMMARY
          
          # Verify cleanup
          REMAINING=$(terraform state list 2>/dev/null | wc -l)
          if [ "$REMAINING" -eq 0 ]; then
            echo "**Status:** ✅ All resources destroyed" >> $GITHUB_STEP_SUMMARY
          else
            echo "**Status:** ⚠️ $REMAINING resources remain" >> $GITHUB_STEP_SUMMARY
          fi
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 💰 Cost Impact:" >> $GITHUB_STEP_SUMMARY
        echo "**Instance Types:** t2.micro (Free Tier)" >> $GITHUB_STEP_SUMMARY
        echo "**RDS:** db.t3.micro (Free Tier)" >> $GITHUB_STEP_SUMMARY
        echo "**Expected Cost:** $0/month (within Free Tier limits)" >> $GITHUB_STEP_SUMMARY