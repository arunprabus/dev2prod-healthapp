name: Core Infrastructure

on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Action'
        required: true
        type: choice
        options:
        - deploy
        - destroy
        - plan
      environment:
        description: 'Network/Environment'
        required: true
        default: 'lower'
        type: choice
        options:
        - lower
        - higher
        - monitoring
        - all
      confirm_destroy:
        description: 'Type "DESTROY" to confirm'
        required: false
        type: string
      restore_from_snapshot:
        description: 'Restore RDS from snapshot'
        required: false
        default: false
        type: boolean

env:
  AWS_REGION: ap-south-1
  TERRAFORM_VERSION: 1.6.0

jobs:
  infrastructure:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      actions: write
    strategy:
      matrix:
        env: ${{ github.event.inputs.environment == 'all' && fromJson('["lower", "higher", "monitoring"]') || fromJson(format('["{0}"]', github.event.inputs.environment)) }}
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TERRAFORM_VERSION }}

    - name: Cleanup existing resources
      if: github.event.inputs.action == 'deploy'
      run: |
        echo "🧹 Cleaning up existing resources that might conflict..."
        
        # Delete existing key pair if it exists
        aws ec2 delete-key-pair --key-name "${{ matrix.env == 'lower' && 'dev' || matrix.env == 'higher' && 'prod' || 'monitoring' }}-${{ matrix.env }}-key" || true
        
        # Delete existing DB subnet group if it exists
        aws rds delete-db-subnet-group --db-subnet-group-name "${{ matrix.env == 'lower' && 'dev' || matrix.env == 'higher' && 'prod' || 'monitoring' }}-${{ matrix.env }}-db-subnet-group" || true
        
        echo "✅ Cleanup completed"

    - name: Terraform Init
      working-directory: infra/two-network-setup
      run: |
        terraform init \
          -backend-config="bucket=${{ secrets.TF_STATE_BUCKET }}" \
          -backend-config="key=health-app-${{ matrix.env }}.tfstate" \
          -backend-config="region=$AWS_REGION"

    - name: Terraform Plan
      working-directory: infra/two-network-setup
      if: github.event.inputs.action == 'plan' || github.event.inputs.action == 'deploy'
      run: |
        terraform plan \
          -var="environment=${{ matrix.env == 'lower' && 'dev' || matrix.env == 'higher' && 'prod' || 'monitoring' }}" \
          -var="network_tier=${{ matrix.env }}" \
          -var="ssh_public_key=${{ secrets.SSH_PUBLIC_KEY }}" \
          -out=tfplan

    - name: Terraform Apply
      id: terraform-apply
      working-directory: infra/two-network-setup
      if: github.event.inputs.action == 'deploy'
      run: terraform apply -auto-approve tfplan

    - name: Terraform Destroy
      working-directory: infra/two-network-setup
      if: github.event.inputs.action == 'destroy' && github.event.inputs.confirm_destroy == 'DESTROY'
      run: |
        terraform destroy \
          -var="environment=${{ matrix.env == 'lower' && 'dev' || matrix.env == 'higher' && 'prod' || 'monitoring' }}" \
          -var="network_tier=${{ matrix.env }}" \
          -var="ssh_public_key=${{ secrets.SSH_PUBLIC_KEY }}" \
          -auto-approve

    - name: Setup kubeconfig and GitHub Secret
      if: github.event.inputs.action == 'deploy' && steps.terraform-apply.outcome == 'success'
      working-directory: infra/two-network-setup
      run: |
        echo "🔧 Setting up kubeconfig for ${{ matrix.env }} environment"
        
        # Get cluster IP from Terraform output
        CLUSTER_IP=$(terraform output -raw k3s_public_ip)
        echo "📡 Cluster IP: $CLUSTER_IP"
        
        # Wait for K3s to be ready
        echo "⏳ Waiting for K3s to be ready..."
        sleep 120
        
        # Check K3s status via SSH
        echo "🔍 Checking K3s status..."
        mkdir -p ~/.ssh
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/k3s-key
        chmod 600 ~/.ssh/k3s-key
        
        # Wait for K3s service to be active
        for i in {1..5}; do
          if ssh -i ~/.ssh/k3s-key -o StrictHostKeyChecking=no ubuntu@$CLUSTER_IP "sudo systemctl is-active k3s" | grep -q "active"; then
            echo "✅ K3s service is active"
            break
          else
            echo "⚠️ K3s not ready, waiting 30s... (attempt $i/5)"
            sleep 30
          fi
        done
        
        # Download kubeconfig via SSH
        echo "📥 Downloading kubeconfig via SSH..."
        for i in {1..3}; do
          if scp -i ~/.ssh/k3s-key -o StrictHostKeyChecking=no ubuntu@$CLUSTER_IP:/etc/rancher/k3s/k3s.yaml kubeconfig-${{ matrix.env }}.yaml; then
            echo "✅ Kubeconfig downloaded successfully"
            break
          else
            echo "⚠️ Download attempt $i failed, retrying in 30s..."
            sleep 30
          fi
        done
        
        # Update server IP in kubeconfig
        sed -i "s/127.0.0.1/$CLUSTER_IP/" kubeconfig-${{ matrix.env }}.yaml
        
        # Verify kubeconfig file exists and has content
        if [ -f "kubeconfig-${{ matrix.env }}.yaml" ] && [ -s "kubeconfig-${{ matrix.env }}.yaml" ]; then
          echo "✅ Kubeconfig file is ready"
          echo "📄 Kubeconfig preview:"
          head -5 kubeconfig-${{ matrix.env }}.yaml
        else
          echo "❌ Kubeconfig file is missing or empty"
          exit 1
        fi
        
        # Convert to base64 for GitHub Secret
        KUBECONFIG_B64=$(base64 -w 0 kubeconfig-${{ matrix.env }}.yaml)
        
        # Print kubeconfig for manual secret creation
        echo "📋 COPY THE FOLLOWING BASE64 KUBECONFIG TO GITHUB SECRETS:"
        echo "==========================================="
        case "${{ matrix.env }}" in
          "lower")
            echo "🔑 Secret Name: KUBECONFIG_DEV"
            echo "📄 Secret Value:"
            echo "$KUBECONFIG_B64"
            echo "==========================================="
            echo "🔑 Secret Name: KUBECONFIG_TEST"
            echo "📄 Secret Value:"
            echo "$KUBECONFIG_B64"
            echo "==========================================="
            echo "🔑 Secret Name: KUBECONFIG_LOWER"
            echo "📄 Secret Value:"
            echo "$KUBECONFIG_B64"
            ;;
          "higher")
            echo "🔑 Secret Name: KUBECONFIG_PROD"
            echo "📄 Secret Value:"
            echo "$KUBECONFIG_B64"
            echo "==========================================="
            echo "🔑 Secret Name: KUBECONFIG_HIGHER"
            echo "📄 Secret Value:"
            echo "$KUBECONFIG_B64"
            ;;
          "monitoring")
            echo "🔑 Secret Name: KUBECONFIG_MONITORING"
            echo "📄 Secret Value:"
            echo "$KUBECONFIG_B64"
            ;;
        esac
        echo "==========================================="
        echo "📝 Manual Steps:"
        echo "1. Go to Settings → Secrets and variables → Actions"
        echo "2. Click 'New repository secret'"
        echo "3. Copy secret name and value from above"
        echo "4. Repeat for each secret listed"
        
        # Cleanup
        rm -f ~/.ssh/k3s-key kubeconfig-${{ matrix.env }}.yaml


    - name: Summary
      if: always()
      working-directory: infra/two-network-setup
      run: |
        echo "## 🏗️ Infrastructure ${{ github.event.inputs.action }} - ${{ matrix.env }}" >> $GITHUB_STEP_SUMMARY
        echo "**Status:** ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
        echo "**Environment:** ${{ matrix.env }}" >> $GITHUB_STEP_SUMMARY
        echo "**Date:** $(date)" >> $GITHUB_STEP_SUMMARY