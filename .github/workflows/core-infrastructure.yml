name: Core Infrastructure

on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Action'
        required: true
        type: choice
        options:
        - deploy
        - destroy
        - plan
      environment:
        description: 'Network/Environment'
        required: true
        default: 'lower'
        type: choice
        options:
        - lower
        - higher
        - monitoring
        - all
      confirm_destroy:
        description: 'Type "DESTROY" to confirm'
        required: false
        type: string
      restore_from_snapshot:
        description: 'Restore RDS from snapshot'
        required: false
        default: false
        type: boolean

env:
  AWS_REGION: ap-south-1
  TERRAFORM_VERSION: 1.6.0

jobs:
  infrastructure:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      actions: write
    strategy:
      matrix:
        env: ${{ github.event.inputs.environment == 'all' && fromJson('["lower", "higher", "monitoring"]') || fromJson(format('["{0}"]', github.event.inputs.environment)) }}
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TERRAFORM_VERSION }}



    - name: Terraform Init
      working-directory: infra
      run: |
        terraform init \
          -backend-config="bucket=${{ secrets.TF_STATE_BUCKET }}" \
          -backend-config="key=health-app-${{ matrix.env }}.tfstate" \
          -backend-config="region=$AWS_REGION"

    - name: Terraform Plan
      working-directory: infra
      if: github.event.inputs.action == 'plan' || github.event.inputs.action == 'deploy'
      run: |
        terraform plan \
          -var-file="environments/${{ matrix.env }}.tfvars" \
          -var="ssh_public_key=${{ secrets.SSH_PUBLIC_KEY }}" \
          -var="restore_from_snapshot=${{ github.event.inputs.restore_from_snapshot }}" \
          -out=tfplan

    - name: Terraform Apply
      id: terraform-apply
      working-directory: infra
      if: github.event.inputs.action == 'deploy'
      run: terraform apply -auto-approve tfplan

    - name: Terraform Destroy
      working-directory: infra
      if: github.event.inputs.action == 'destroy' && github.event.inputs.confirm_destroy == 'DESTROY'
      run: |
        terraform destroy \
          -var-file="environments/${{ matrix.env }}.tfvars" \
          -var="ssh_public_key=${{ secrets.SSH_PUBLIC_KEY }}" \
          -var="restore_from_snapshot=${{ github.event.inputs.restore_from_snapshot }}" \
          -auto-approve

    - name: Cleanup kubeconfig from S3
      if: github.event.inputs.action == 'destroy' && github.event.inputs.confirm_destroy == 'DESTROY'
      run: |
        echo "ðŸ§¹ Cleaning up kubeconfig files from S3..."
        
        # Remove main kubeconfig
        aws s3 rm s3://${{ secrets.TF_STATE_BUCKET }}/kubeconfig/${{ matrix.env }}-network.yaml 2>/dev/null || echo "Main kubeconfig not found"
        
        # Remove environment-specific copies
        case "${{ matrix.env }}" in
          "lower")
            aws s3 rm s3://${{ secrets.TF_STATE_BUCKET }}/kubeconfig/dev-network.yaml 2>/dev/null || echo "Dev kubeconfig not found"
            aws s3 rm s3://${{ secrets.TF_STATE_BUCKET }}/kubeconfig/test-network.yaml 2>/dev/null || echo "Test kubeconfig not found"
            ;;
          "higher")
            aws s3 rm s3://${{ secrets.TF_STATE_BUCKET }}/kubeconfig/prod-network.yaml 2>/dev/null || echo "Prod kubeconfig not found"
            ;;
          "monitoring")
            # No additional copies for monitoring
            ;;
        esac
        
        echo "âœ… Kubeconfig cleanup completed"



    - name: Create kubeconfig for S3
      if: github.event.inputs.action == 'deploy'
      working-directory: infra
      run: |
        CLUSTER_IP=$(terraform output -raw k3s_instance_ip 2>/dev/null || echo "")
        
        if [[ -n "$CLUSTER_IP" && "$CLUSTER_IP" != "null" ]]; then
          cat > /tmp/kubeconfig.yaml << EOF
          apiVersion: v1
          clusters:
          - cluster:
              insecure-skip-tls-verify: true
              server: https://$CLUSTER_IP:6443
            name: default
          contexts:
          - context:
              cluster: default
              user: default
            name: default
          current-context: default
          kind: Config
          preferences: {}
          users:
          - name: default
            user:
              token: K10...
          EOF
          
          aws s3 cp /tmp/kubeconfig.yaml s3://${{ secrets.TF_STATE_BUCKET }}/kubeconfig/${{ matrix.env }}-network.yaml
          
          case "${{ matrix.env }}" in
            "lower")
              aws s3 cp /tmp/kubeconfig.yaml s3://${{ secrets.TF_STATE_BUCKET }}/kubeconfig/dev-network.yaml
              aws s3 cp /tmp/kubeconfig.yaml s3://${{ secrets.TF_STATE_BUCKET }}/kubeconfig/test-network.yaml
              ;;
            "higher")
              aws s3 cp /tmp/kubeconfig.yaml s3://${{ secrets.TF_STATE_BUCKET }}/kubeconfig/prod-network.yaml
              ;;
          esac
        fi

    - name: Cleanup on Failure
      if: failure() && github.event.inputs.action == 'deploy' && steps.terraform-apply.outcome == 'failure'
      working-directory: infra
      run: |
        echo "ðŸ§¹ Terraform deployment failed - cleaning up partial resources"
        
        terraform destroy \
          -var-file="environments/${{ matrix.env }}.tfvars" \
          -var="ssh_public_key=${{ secrets.SSH_PUBLIC_KEY }}" \
          -auto-approve || echo "Cleanup completed (some errors expected)"
        
        echo "âœ… Cleanup completed - safe to retry deployment"

    - name: Summary
      if: always()
      working-directory: infra
      run: |
        echo "## Infrastructure ${{ github.event.inputs.action }} - ${{ matrix.env }}" >> $GITHUB_STEP_SUMMARY
        echo "* Status: ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
        echo "* Environment: ${{ matrix.env }}" >> $GITHUB_STEP_SUMMARY
        
        if [[ "${{ job.status }}" == "success" && "${{ github.event.inputs.action }}" == "deploy" ]]; then
          CLUSTER_IP=$(terraform output -raw k3s_instance_ip 2>/dev/null || echo "Not available")
          echo "* Cluster IP: $CLUSTER_IP" >> $GITHUB_STEP_SUMMARY
          echo "* Ready for deployment" >> $GITHUB_STEP_SUMMARY
        fi