name: Core Infrastructure

on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Action'
        required: true
        type: choice
        options:
        - deploy
        - destroy
        - plan
      environment:
        description: 'Network/Environment'
        required: true
        default: 'lower'
        type: choice
        options:
        - lower
        - higher
        - monitoring
        - all
      confirm_destroy:
        description: 'Type "DESTROY" to confirm'
        required: false
        type: string

env:
  AWS_REGION: ap-south-1
  TERRAFORM_VERSION: 1.6.0

jobs:
  infrastructure:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      actions: write
    strategy:
      matrix:
        env: ${{ github.event.inputs.environment == 'all' && fromJson('["lower", "higher", "monitoring"]') || fromJson(format('["{0}"]', github.event.inputs.environment)) }}
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TERRAFORM_VERSION }}

    - name: Configure kubeconfig
      run: |
        mkdir -p ~/.kube
        ENV="${{ matrix.env }}"
        
        if [[ "$ENV" == "dev" && -n "${{ secrets.KUBECONFIG_DEV }}" ]]; then
          echo "${{ secrets.KUBECONFIG_DEV }}" | base64 -d > ~/.kube/config
        elif [[ "$ENV" == "test" && -n "${{ secrets.KUBECONFIG_TEST }}" ]]; then
          echo "${{ secrets.KUBECONFIG_TEST }}" | base64 -d > ~/.kube/config
        elif [[ "$ENV" == "prod" && -n "${{ secrets.KUBECONFIG_PROD }}" ]]; then
          echo "${{ secrets.KUBECONFIG_PROD }}" | base64 -d > ~/.kube/config
        elif [[ "$ENV" == "monitoring" && -n "${{ secrets.KUBECONFIG_MONITORING }}" ]]; then
          echo "${{ secrets.KUBECONFIG_MONITORING }}" | base64 -d > ~/.kube/config
        else
          echo "${{ secrets.KUBECONFIG }}" | base64 -d > ~/.kube/config
        fi
        
        chmod 600 ~/.kube/config

    - name: Terraform Init
      working-directory: infra
      run: |
        terraform init \
          -backend-config="bucket=${{ secrets.TF_STATE_BUCKET }}" \
          -backend-config="key=health-app-${{ matrix.env }}.tfstate" \
          -backend-config="region=$AWS_REGION"

    - name: Terraform Plan
      working-directory: infra
      if: github.event.inputs.action == 'plan' || github.event.inputs.action == 'deploy'
      run: |
        terraform plan \
          -var-file="environments/${{ matrix.env }}.tfvars" \
          -var="ssh_public_key=${{ secrets.SSH_PUBLIC_KEY }}" \
          -out=tfplan

    - name: Terraform Apply
      id: terraform-apply
      working-directory: infra
      if: github.event.inputs.action == 'deploy'
      run: terraform apply -auto-approve tfplan

    - name: Terraform Destroy
      working-directory: infra
      if: github.event.inputs.action == 'destroy' && github.event.inputs.confirm_destroy == 'DESTROY'
      run: |
        terraform destroy \
          -var-file="environments/${{ matrix.env }}.tfvars" \
          -var="ssh_public_key=${{ secrets.SSH_PUBLIC_KEY }}" \
          -auto-approve

    - name: Display kubeconfig setup instructions
      if: github.event.inputs.action == 'deploy'
      working-directory: infra
      run: |
        # Get cluster IP from Terraform output
        CLUSTER_IP=$(terraform output -raw k3s_instance_ip 2>/dev/null || echo "")
        
        if [[ -n "$CLUSTER_IP" && "$CLUSTER_IP" != *"error"* && "$CLUSTER_IP" != "null" ]]; then
          echo "✅ Infrastructure deployed successfully!"
          echo "🌐 Cluster IP: $CLUSTER_IP"
          echo "🔗 API Endpoint: https://$CLUSTER_IP:6443"
          echo ""
          echo "📋 Manual Kubeconfig Setup (Recommended):"
          echo "==========================================="
          echo "1. Run the kubeconfig generation script:"
          echo "   ./scripts/generate-kubeconfig.sh ${{ matrix.env }} $CLUSTER_IP"
          echo ""
          echo "2. Copy the base64 output to GitHub Secrets:"
          echo "   Name: KUBECONFIG_$(echo ${{ matrix.env }} | tr '[:lower:]' '[:upper:]')"
          echo ""
          echo "3. Or generate all kubeconfigs at once:"
          echo "   ./scripts/setup-all-kubeconfigs.sh"
          echo ""
          echo "💡 This approach is more reliable than automatic generation"
        else
          echo "❌ Cluster IP not available: $CLUSTER_IP"
          echo "💡 K8s cluster may not be deployed"
        fi

    - name: Cleanup on Failure
      if: failure() && github.event.inputs.action == 'deploy' && steps.terraform-apply.outcome == 'failure'
      working-directory: infra
      run: |
        echo "🧹 Terraform deployment failed - cleaning up partial resources"
        
        terraform destroy \
          -var-file="environments/${{ matrix.env }}.tfvars" \
          -var="ssh_public_key=${{ secrets.SSH_PUBLIC_KEY }}" \
          -auto-approve || echo "Cleanup completed (some errors expected)"
        
        echo "✅ Cleanup completed - safe to retry deployment"

    - name: Summary
      if: always()
      working-directory: infra
      run: |
        echo "## 🏗️ Infrastructure ${{ github.event.inputs.action }} - ${{ matrix.env }}" >> $GITHUB_STEP_SUMMARY
        echo "* Status: ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
        echo "* Environment: ${{ matrix.env }}" >> $GITHUB_STEP_SUMMARY
        echo "* Date: $(date)" >> $GITHUB_STEP_SUMMARY
        echo "* Triggered by: ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [[ "${{ job.status }}" == "success" && "${{ github.event.inputs.action }}" == "deploy" ]]; then
          echo "### ✅ Deployment Successful" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Get all Terraform outputs
          echo "### 📊 Infrastructure Details" >> $GITHUB_STEP_SUMMARY
          CLUSTER_IP=$(terraform output -raw k3s_instance_ip 2>/dev/null || echo "Not available")
          DB_ENDPOINT=$(terraform output -raw db_instance_endpoint 2>/dev/null || echo "Not available")
          VPC_ID=$(terraform output -raw vpc_id 2>/dev/null || echo "Not available")
          
          echo "* **K3s Cluster IP**: $CLUSTER_IP" >> $GITHUB_STEP_SUMMARY
          echo "* **K3s API Endpoint**: https://$CLUSTER_IP:6443" >> $GITHUB_STEP_SUMMARY
          echo "* **SSH Access**: ssh -i ~/.ssh/aws-key ubuntu@$CLUSTER_IP" >> $GITHUB_STEP_SUMMARY
          echo "* **Database Endpoint**: $DB_ENDPOINT" >> $GITHUB_STEP_SUMMARY
          echo "* **VPC ID**: $VPC_ID" >> $GITHUB_STEP_SUMMARY
          echo "* **AWS Region**: ${{ env.AWS_REGION }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Kubeconfig status
          SECRET_NAME="KUBECONFIG_$(echo ${{ matrix.env }} | tr '[:lower:]' '[:upper:]')"
          if [[ -f ~/.kube/config-${{ matrix.env }} ]]; then
            echo "### 🔐 Kubeconfig Status" >> $GITHUB_STEP_SUMMARY
            echo "* **Secret Name**: $SECRET_NAME" >> $GITHUB_STEP_SUMMARY
            echo "* **Status**: ✅ Created and added to GitHub Secrets" >> $GITHUB_STEP_SUMMARY
            echo "* **Re-run Safe**: Yes, secret will be updated automatically" >> $GITHUB_STEP_SUMMARY
            echo "* **Context**: health-app-${{ matrix.env }}" >> $GITHUB_STEP_SUMMARY
          else
            echo "### ❌ Kubeconfig Status" >> $GITHUB_STEP_SUMMARY
            echo "* **Status**: Failed to generate kubeconfig" >> $GITHUB_STEP_SUMMARY
            echo "* **Manual Setup**: ssh -i ~/.ssh/aws-key ubuntu@$CLUSTER_IP" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### 📝 Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "1. ✅ Infrastructure ready for application deployment" >> $GITHUB_STEP_SUMMARY
          echo "2. 🚀 Run GitOps or App Deploy workflow" >> $GITHUB_STEP_SUMMARY
          echo "3. 📋 Deploy K8s manifests: kubectl apply -f k8s/" >> $GITHUB_STEP_SUMMARY
          echo "4. 🔍 Verify: kubectl get pods -n health-app-${{ matrix.env }}" >> $GITHUB_STEP_SUMMARY
          
        elif [[ "${{ job.status }}" == "failure" && "${{ github.event.inputs.action }}" == "deploy" ]]; then
          echo "### ❌ Deployment Failed" >> $GITHUB_STEP_SUMMARY
          echo "* Partial resources cleaned up automatically" >> $GITHUB_STEP_SUMMARY
          echo "* Safe to retry deployment" >> $GITHUB_STEP_SUMMARY
          echo "* Check logs for error details" >> $GITHUB_STEP_SUMMARY
        fi