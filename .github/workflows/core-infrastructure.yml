name: Core Infrastructure

on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Action'
        required: true
        type: choice
        options:
          - deploy
          - destroy
          - plan
          - redeploy
      network:
        description: 'Network Tier'
        required: true
        default: 'lower'
        type: choice
        options:
          - lower
          - higher
          - monitoring
      confirm_destroy:
        description: 'Type "DESTROY" to confirm'
        required: false
        type: string

env:
  AWS_REGION: ap-south-1
  TERRAFORM_VERSION: 1.6.0

jobs:
  infrastructure:
    runs-on: ubuntu-latest
    outputs:
      cluster_ip: ${{ steps.apply.outputs.cluster_ip }}

    steps:
      - uses: actions/checkout@v4

      - uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Terraform Init
        working-directory: infra
        run: |
          terraform init \
            -backend-config="bucket=${{ secrets.TF_STATE_BUCKET }}" \
            -backend-config="key=health-app-${{ github.event.inputs.network }}.tfstate" \
            -backend-config="region=$AWS_REGION"

      - name: Terraform Plan
        if: github.event.inputs.action == 'plan'
        working-directory: infra
        run: |
          terraform plan \
            -var-file="environments/network-architecture.tfvars" \
            -var="network_tier=${{ github.event.inputs.network }}" \
            -var="ssh_public_key=${{ secrets.SSH_PUBLIC_KEY }}" \
            -var="github_pat=${{ secrets.REPO_PAT }}"

      - name: Terraform Apply
        id: apply
        if: github.event.inputs.action == 'deploy' || github.event.inputs.action == 'redeploy'
        working-directory: infra
        run: |
          if [ "${{ github.event.inputs.action }}" == "redeploy" ]; then
            terraform destroy \
              -var-file="environments/network-architecture.tfvars" \
              -var="network_tier=${{ github.event.inputs.network }}" \
              -var="ssh_public_key=${{ secrets.SSH_PUBLIC_KEY }}" \
              -var="github_pat=${{ secrets.REPO_PAT }}" \
              -auto-approve || true
          fi
          
          terraform apply \
            -var-file="environments/network-architecture.tfvars" \
            -var="network_tier=${{ github.event.inputs.network }}" \
            -var="ssh_public_key=${{ secrets.SSH_PUBLIC_KEY }}" \
            -var="github_pat=${{ secrets.REPO_PAT }}" \
            -auto-approve
          
          echo "cluster_ip=$(terraform output -raw k3s_instance_ip)" >> $GITHUB_OUTPUT

      - name: Terraform Destroy
        if: github.event.inputs.action == 'destroy'
        working-directory: infra
        run: |
          if [ "${{ github.event.inputs.confirm_destroy }}" != "DESTROY" ]; then
            echo "❌ Type 'DESTROY' to confirm"
            exit 1
          fi
          
          terraform destroy \
            -var-file="environments/network-architecture.tfvars" \
            -var="network_tier=${{ github.event.inputs.network }}" \
            -var="ssh_public_key=${{ secrets.SSH_PUBLIC_KEY }}" \
            -var="github_pat=${{ secrets.REPO_PAT }}" \
            -auto-approve

  kubeconfig:
    needs: infrastructure
    if: github.event.inputs.action == 'deploy' || github.event.inputs.action == 'redeploy'
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: Setup Kubeconfig
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          GITHUB_TOKEN: ${{ secrets.REPO_PAT }}
          CLUSTER_IP: ${{ needs.infrastructure.outputs.cluster_ip }}
        run: |
          if [ -z "$CLUSTER_IP" ]; then
            echo "❌ Cluster IP not available"
            exit 1
          fi
          
          echo "$SSH_PRIVATE_KEY" > /tmp/ssh_key
          chmod 600 /tmp/ssh_key
          
          # Wait for K3s with timeout
          echo "⏳ Waiting for K3s cluster at $CLUSTER_IP..."
          for i in {1..30}; do
            if timeout 10 ssh -i /tmp/ssh_key -o StrictHostKeyChecking=no ubuntu@$CLUSTER_IP "sudo test -f /etc/rancher/k3s/k3s.yaml" 2>/dev/null; then
              echo "✅ K3s ready"
              break
            fi
            if [ $i -eq 30 ]; then
              echo "❌ K3s not ready after 5 minutes"
              exit 1
            fi
            sleep 10
          done
          
          ssh -i /tmp/ssh_key -o StrictHostKeyChecking=no ubuntu@$CLUSTER_IP "sudo cat /etc/rancher/k3s/k3s.yaml" > /tmp/kubeconfig
          sed "s/127.0.0.1/$CLUSTER_IP/g" /tmp/kubeconfig > /tmp/kubeconfig-fixed
          
          curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg 2>/dev/null
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
          sudo apt update && sudo apt install gh -y
          
          ENV_NAME="${{ github.event.inputs.network == 'lower' && 'DEV' || github.event.inputs.network == 'higher' && 'PROD' || 'MONITORING' }}"
          SECRET_NAME="KUBECONFIG_$ENV_NAME"
          base64 -w 0 /tmp/kubeconfig-fixed | gh secret set $SECRET_NAME --repo $GITHUB_REPOSITORY
          echo "✅ GitHub secret $SECRET_NAME updated"
          
          rm -f /tmp/ssh_key /tmp/kubeconfig /tmp/kubeconfig-fixed