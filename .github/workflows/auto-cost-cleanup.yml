name: Auto Cost Cleanup

on:
  schedule:
    - cron: '0 10 * * 1'  # Every Monday at 10 AM UTC (after cost monitor)
  workflow_dispatch:
    inputs:
      force_cleanup:
        description: 'Force cleanup even if cost < $0.50'
        required: false
        type: boolean
        default: false

env:
  AWS_REGION: ap-south-1

jobs:
  auto-cleanup:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y jq bc

    - name: Run Auto Cleanup
      run: |
        chmod +x cost-cleanup-auto.sh
        
        if [ "${{ github.event.inputs.force_cleanup }}" = "true" ]; then
          echo "🚨 Force cleanup enabled - removing costly resources regardless of cost"
          # Modify script to force cleanup
          sed -i 's/> 0.50/> 0.00/' cost-cleanup-auto.sh
        fi
        
        ./cost-cleanup-auto.sh

    - name: Wait and Verify Cleanup
      run: |
        echo "⏳ Waiting 2 minutes for resource deletion to complete..."
        sleep 120
        
        echo "🔍 Verifying cleanup results..."
        echo "NAT Gateways remaining: $(aws ec2 describe-nat-gateways --query 'NatGateways[?State==`available`]' --output text | wc -l)"
        echo "Load Balancers remaining: $(aws elbv2 describe-load-balancers --query 'LoadBalancers[]' --output text 2>/dev/null | wc -l)"
        echo "Unattached Elastic IPs: $(aws ec2 describe-addresses --query 'Addresses[?AssociationId==null]' --output text | wc -l)"

    - name: Upload Cleanup Report
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: cleanup-report
        path: cost-report.json
        retention-days: 30

    - name: Cleanup Summary
      if: always()
      run: |
        echo "## 🧹 Auto Cost Cleanup Report" >> $GITHUB_STEP_SUMMARY
        echo "* Date: $(date)" >> $GITHUB_STEP_SUMMARY
        echo "* Region: ${{ env.AWS_REGION }}" >> $GITHUB_STEP_SUMMARY
        echo "* Force cleanup: ${{ github.event.inputs.force_cleanup || 'false' }}" >> $GITHUB_STEP_SUMMARY
        echo "* Triggered by: ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ -f cost-report.json ]; then
          TOTAL_COST=$(jq -r '.ResultsByTime[].Total.BlendedCost.Amount // "0"' cost-report.json | awk '{sum += $1} END {print sum+0}')
          echo "### 💰 Cost Analysis" >> $GITHUB_STEP_SUMMARY
          echo "**Weekly Cost: \$${TOTAL_COST}**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if (( $(echo "$TOTAL_COST > 0.50" | bc -l 2>/dev/null || echo "0") )); then
            echo "🚨 **High cost detected - cleanup performed**" >> $GITHUB_STEP_SUMMARY
          else
            echo "✅ **Cost within acceptable range**" >> $GITHUB_STEP_SUMMARY
          fi
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🗑️ Resources Cleaned" >> $GITHUB_STEP_SUMMARY
        echo "- NAT Gateways: Removed if found" >> $GITHUB_STEP_SUMMARY
        echo "- Load Balancers: Removed if found" >> $GITHUB_STEP_SUMMARY
        echo "- Unattached Elastic IPs: Released" >> $GITHUB_STEP_SUMMARY
        echo "- Oversized EC2: Stopped if > t2.micro" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "⏰ **Next check**: Every Monday at 10 AM UTC" >> $GITHUB_STEP_SUMMARY