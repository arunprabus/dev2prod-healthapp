name: Script Execute

on:
  workflow_dispatch:
    inputs:
      script:
        description: 'Script to execute'
        required: true
        type: choice
        options:
          - k8s-cluster-health-check
          - kubeconfig-test
          - cluster-diagnostics
      environment:
        description: 'Environment'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - test
          - prod
          - monitoring
      cluster_ip:
        description: 'Cluster IP (optional - will auto-detect)'
        required: false
        type: string

jobs:
  execute:
    runs-on: ["self-hosted", "github-runner-lower"]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-south-1

      - name: Setup tools
        run: |
          # Install kubectl
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/
          
          # Install jq and netcat
          sudo apt-get update
          sudo apt-get install -y jq netcat-openbsd

      - name: Get cluster IP
        id: cluster-ip
        run: |
          if [[ -n "${{ github.event.inputs.cluster_ip }}" ]]; then
            CLUSTER_IP="${{ github.event.inputs.cluster_ip }}"
            echo "Using provided IP: $CLUSTER_IP"
          else
            # Auto-detect from terraform state
            ENV="${{ github.event.inputs.environment }}"
            NETWORK_TIER=""
            
            case "$ENV" in
              "dev"|"test") NETWORK_TIER="lower" ;;
              "prod") NETWORK_TIER="higher" ;;
              "monitoring") NETWORK_TIER="monitoring" ;;
            esac
            
            echo "Auto-detecting IP for $ENV environment ($NETWORK_TIER network)..."
            
            # Try to get from AWS EC2 instances
            echo "üîç Searching for K3s instances with tags..."
            
            # Try multiple tag patterns
            CLUSTER_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=*k3s*" \
                       "Name=instance-state-name,Values=running" \
              --query 'Reservations[0].Instances[0].PublicIpAddress' \
              --output text 2>/dev/null || echo "")
            
            if [[ "$CLUSTER_IP" == "None" || -z "$CLUSTER_IP" ]]; then
              # Try with health-app prefix
              CLUSTER_IP=$(aws ec2 describe-instances \
                --filters "Name=tag:Name,Values=health-app-*" \
                         "Name=instance-state-name,Values=running" \
                --query 'Reservations[0].Instances[0].PublicIpAddress' \
                --output text 2>/dev/null || echo "")
            fi
            
            # Debug: Show all running instances
            echo "üìã All running instances:"
            aws ec2 describe-instances \
              --filters "Name=instance-state-name,Values=running" \
              --query 'Reservations[].Instances[].[Tags[?Key==`Name`].Value|[0],PublicIpAddress,InstanceId]' \
              --output table || echo "Could not list instances"
            
            if [[ "$CLUSTER_IP" == "None" || -z "$CLUSTER_IP" ]]; then
              echo "‚ùå Could not auto-detect cluster IP"
              exit 1
            fi
          fi
          
          echo "cluster_ip=$CLUSTER_IP" >> $GITHUB_OUTPUT
          echo "üéØ Using cluster IP: $CLUSTER_IP"

      - name: Execute script
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        run: |
          chmod +x scripts/${{ github.event.inputs.script }}.sh
          
          case "${{ github.event.inputs.script }}" in
            "k8s-cluster-health-check")
              ./scripts/k8s-cluster-health-check.sh ${{ github.event.inputs.environment }} ${{ steps.cluster-ip.outputs.cluster_ip }}
              ;;
            "kubeconfig-test")
              echo "üß™ Testing kubeconfig for ${{ github.event.inputs.environment }}"
              
              # Setup kubeconfig
              case "${{ github.event.inputs.environment }}" in
                "dev") echo "${{ secrets.KUBECONFIG_DEV }}" | base64 -d > kubeconfig.yaml ;;
                "test") echo "${{ secrets.KUBECONFIG_TEST }}" | base64 -d > kubeconfig.yaml ;;
                "prod") echo "${{ secrets.KUBECONFIG_PROD }}" | base64 -d > kubeconfig.yaml ;;
                "monitoring") echo "${{ secrets.KUBECONFIG_MONITORING }}" | base64 -d > kubeconfig.yaml ;;
              esac
              
              export KUBECONFIG=$PWD/kubeconfig.yaml
              
              echo "üìã Kubeconfig content:"
              cat kubeconfig.yaml
              echo ""
              
              echo "üîç Testing connection:"
              kubectl cluster-info --insecure-skip-tls-verify
              kubectl get nodes --insecure-skip-tls-verify
              ;;
            "cluster-diagnostics")
              echo "üîç Full cluster diagnostics for ${{ github.event.inputs.environment }}"
              
              # Run health check first
              ./scripts/k8s-cluster-health-check.sh ${{ github.event.inputs.environment }} ${{ steps.cluster-ip.outputs.cluster_ip }}
              
              echo ""
              echo "üß™ Testing kubeconfig..."
              
              # Test kubeconfig
              case "${{ github.event.inputs.environment }}" in
                "dev") echo "${{ secrets.KUBECONFIG_DEV }}" | base64 -d > kubeconfig.yaml ;;
                "test") echo "${{ secrets.KUBECONFIG_TEST }}" | base64 -d > kubeconfig.yaml ;;
                "prod") echo "${{ secrets.KUBECONFIG_PROD }}" | base64 -d > kubeconfig.yaml ;;
                "monitoring") echo "${{ secrets.KUBECONFIG_MONITORING }}" | base64 -d > kubeconfig.yaml ;;
              esac
              
              export KUBECONFIG=$PWD/kubeconfig.yaml
              kubectl get nodes --insecure-skip-tls-verify -o wide || echo "‚ùå Kubeconfig test failed"
              ;;
          esac