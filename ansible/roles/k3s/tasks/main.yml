---
# Main tasks for K3s role
- name: Verify K3s installation
  shell: k3s --version
  register: k3s_version
  changed_when: false
  
- name: Show K3s version
  debug:
    var: k3s_version.stdout

- name: Wait for K3s to be ready
  wait_for:
    path: "{{ kubeconfig_path }}"
    timeout: 300
  register: k3s_ready

- name: Get kubeconfig content
  slurp:
    src: "{{ kubeconfig_path }}"
  register: kubeconfig_content
  when: k3s_ready.state == "present"
  
- name: Fix kubeconfig server address
  set_fact:
    fixed_kubeconfig: "{{ kubeconfig_content['content'] | b64decode | replace('127.0.0.1', cluster_ip) }}"
  when: kubeconfig_content is defined

- name: Save kubeconfig locally
  copy:
    content: "{{ fixed_kubeconfig }}"
    dest: "/tmp/kubeconfig-{{ environment }}.yaml"
    mode: '0600'
  delegate_to: localhost
  when: fixed_kubeconfig is defined

- name: Create application namespace
  kubernetes.core.k8s:
    name: "{{ namespace }}"
    api_version: v1
    kind: Namespace
    state: present
  environment:
    KUBECONFIG: "{{ kubeconfig_path }}"
  when: k3s_ready.state == "present"

- name: Apply resource quotas
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: v1
      kind: ResourceQuota
      metadata:
        name: compute-resources
        namespace: "{{ namespace }}"
      spec:
        hard:
          pods: "10"
          requests.cpu: "1"
          requests.memory: 1Gi
          limits.cpu: "2"
          limits.memory: 2Gi
  environment:
    KUBECONFIG: "{{ kubeconfig_path }}"
  when: k3s_ready.state == "present"

- name: Create GitHub secret for kubeconfig
  uri:
    url: "https://api.github.com/repos/{{ repo_name }}/actions/secrets/KUBECONFIG_{{ environment | upper }}"
    method: PUT
    headers:
      Authorization: "token {{ github_token }}"
      Accept: "application/vnd.github.v3+json"
    body_format: json
    body:
      encrypted_value: "{{ fixed_kubeconfig | b64encode }}"
      key_id: "{{ lookup('env', 'GITHUB_KEY_ID') }}"
    status_code: 201, 204
  when: github_token != '' and repo_name != '' and fixed_kubeconfig is defined
  no_log: true
  delegate_to: localhost
  ignore_errors: yes

- name: Verify cluster health
  shell: kubectl get nodes
  environment:
    KUBECONFIG: "{{ kubeconfig_path }}"
  register: cluster_status
  changed_when: false
  
- name: Show cluster status
  debug:
    var: cluster_status.stdout_lines